cscope 15 $HOME/git/onlinetranslate-code-0/html               0000918614
	@JSONOptions.h

1 #i‚de‡
JSON_OPTIONS_H


2 
	#JSON_OPTIONS_H


	)

14 
	#JSON_LIBRARY


	)

46 
	#JSON_SAFE


	)

90 
	#JSON_REF_COUNT


	)

97 
	#JSON_BINARY


	)

105 
	#JSON_EXPOSE_BASE64


	)

112 
	#JSON_ITERATORS


	)

120 
	#JSON_STREAM


	)

188 
	#JSON_WRITE_PRIORITY
 
MED


	)

195 
	#JSON_READ_PRIORITY
 
HIGH


	)

218 
	#JSON_ESCAPE_WRITES


	)

226 
	#JSON_COMMENTS


	)

256 
	#JSON_VALIDATE


	)

263 
	#JSON_CASE_INSENSITIVE_FUNCTIONS


	)

324 
	#JSON_DEPRECATED_FUNCTIONS


	)

333 
	#JSON_CASTABLE


	)

342 
	#JSON_SECURITY_MAX_NEST_LEVEL
 128

	)

349 
	#JSON_SECURITY_MAX_STRING_LENGTH
 33554432

	)

357 
	#JSON_SECURITY_MAX_STREAM_OBJECTS
 128

	)

	@baiduEngine.cpp

1 #i‚de‡
BAIDUENGINECPP


2 
	#BAIDUENGINECPP


	)

4 
	~"baiduEngöe.hµ
"

8 
	gbaiduígöe
::
	$begöP¨sög
()

11 
to°¨tÊag
 = 
åue
;

12 
cou¡°¨tÊag
 = 0;

15 
	}
}

18 
	gbaiduígöe
::
	$foundTag
–
Node
 
node
, 
boﬁ
 
isEnd
 )

50 i‡–
	`af„˘_ãxt_èg
(
node
, 
isEnd
) )

55 
	}
}

57 
	gbaiduígöe
::
	$foundText
(
Node
 
node
)

62 i‡–
to°¨tÊag
 )

65 
°r_ªsu…
 +
node
.
	`ãxt
();

69 
	}
}

71 
	gbaiduígöe
::
	$ídP¨sög
()

75 
°rög
 
°r
;

77 
°rög
::
size_ty≥
 
pos
 = 0;

78 
°rög
 
	`•ecül
("&nbsp;");

80  
pos
 < 
°r_ªsu…
.
	`Àngth
() )

83 
pos
 = 
°r_ªsu…
.
	`föd
(
•ecül
,Öos);

84 i‡–
pos
 =
°rög
::
≈os
 )

87 
°r_ªsu…
.
	`ª∂a˚
(
pos
, 
•ecül
.
	`Àngth
(), " ");

88 
pos
 ++;

92 
pos
 = 0;

94 
•ecül
 = "&gt;";

95  
pos
 < 
°r_ªsu…
.
	`Àngth
() )

98 
pos
 = 
°r_ªsu…
.
	`föd
(
•ecül
,Öos);

99 i‡–
pos
 =
°rög
::
≈os
 )

102 
°r_ªsu…
.
	`ª∂a˚
(
pos
, 
•ecül
.
	`Àngth
(), ">");

103 
pos
 ++;

107 
pos
 = 
°r_ªsu…
.
	`föd
("[Ëã±]");

108 
°rög
::
size_ty≥
 
íd
;

109 
íd
 = 
°r_ªsu…
.
	`rföd
("]");

110 
°r_ªsu…
.
	`ª∂a˚
(
pos
, 
íd
-pos+1, " " );

114 
	}
}

	@baiduEngine.hpp

1 #i‚de‡
BAIDUENGINEHPP


2 
	#BAIDUENGINEHPP


	)

4 
	~"basi˘øn¶©eEngöe.hµ
"

5 
	~"../ö˛ude/Node.h
"

9 ˛as†
	cbaiduígöe
 : 
public
 
basi˘øn¶©eEngöe


11 
¥iv©e
:

12 
boﬁ
 
to°¨tÊag
;

13 
	mcou¡°¨tÊag
;

14 
	mpublic
 :

15 
	$baiduígöe
()

18 ~
	$baiduígöe
()

20 
	}
}

22 
¥Ÿe˘ed
:

24 
vútuÆ
 
begöP¨sög
();

27 
vútuÆ
 
foundTag
(
Node
 
node
, 
boﬁ
 
isEnd
);

29 
vútuÆ
 
foundText
(
Node
 
node
) ;

34 
vútuÆ
 
ídP¨sög
();

	@baiduparser.cpp

1 #i‚de‡
BAIDUPARSERCPP


2 
	#BAIDUPARSERCPP


	)

4 
	~"baidu∑r£r.hµ
"

7 
	$dñëe_¶ash
(
°rög
 & 
js⁄fûe
 )

9 
°rög
::
size_ty≥
 
pos
 = 
js⁄fûe
.
	`föd
("\\");

10  
pos
 !
°rög
::
≈os
 )

12 
js⁄fûe
.
	`îa£
–
pos
 );

13 
pos
 = 
js⁄fûe
.
	`föd
("\\", 
po
);

16 
pos
 = 
js⁄fûe
.
	`föd
( "\"result\"");

17 i‡–
pos
 !
°rög
::
≈os
 )

19 
pos
 = 
js⁄fûe
.
	`föd
( "\"{",Öos+1 );

20 i‡–
pos
 !
°rög
::
≈os
 )

21 
js⁄fûe
.
	`îa£
(
pos
);

22 
pos
 = 
js⁄fûe
.
	`föd
 ( "}\"",Öos );

23 i‡–
pos
 !
°rög
::
≈os
 )

24 
js⁄fûe
.
	`îa£
(
pos
+1);

27 
	}
}

29 
	gbaidu∑r£r
::
	$∑r£r
 ()

31 i‡–
_to_∑r£r_∑ge_
.
	`em±y
() )

33 
	`dñëe_¶ash
 ( 
_to_∑r£r_∑ge_
 );

35 
JSONNode
 
node_åì
 = 
libjs⁄
::
	`∑r£
 ( 
_to_∑r£r_∑ge_
 );

36 
	`_∑r£rJs⁄
 ( 
node_åì
 );

39 
	}
}

41 
	gbaidu∑r£r
:: 
	$_∑r£rJs⁄
 ( c⁄° 
JSONNode
 & 
node_åì
 )

43 
JSONNode
::
c⁄°_ôî©‹
 
node_ôî
 = 
node_åì
.
	`begö
();

44  
node_ôî
 !
node_åì
.
	`begö
() )

47 
°rög
 
node_«me
 = 
node_ôî
->
	`«me
 ();

49 i‡–
node_«me
 == "result" )

50 
ªsu…_
.
	`˛ór
();

51 i‡–
node_«me
 == "")

52 i‡–
node_ôî
 ->
	`ty≥
(Ë=
JSON_ARRAY
 ||Çode_ôî->ty≥(Ë=
JSON_NODE
 )

54 
	`_∑r£rJs⁄
 ( *
node_ôî
 );

59 
	`_∑r£rJs⁄
 ( 
node_ôî
 );

62 
	}
}

	@baiduparser.hpp

1 #i‚de‡
BAIDUPARSERHPP


2 
	#BAIDUPARSERHPP


	)

5 
	~"baiduEngöe.hµ
"

7 
	~"libjs⁄.h
"

9 
dñëe_¶ash
(
°rög
 &
html
);

12 ˛as†
	cbaidu∑r£r
 : 
public
 
∑gï¨£r


15 
¥Ÿe˘ed
:

16 
baiduígöe
 
h∑r£r_
;

18 
	mpublic
:

19 
	$baidu∑r£r
() { }

20 
	$baidu∑r£r
(c⁄° 
°rög
 &
∑ge
 )

22 
to_∑r£r_∑ge_
 = 
∑ge
;

24 
	}
}

27 
∑r£r
 ();

29 
	g¥iv©e
:

30 
_∑r£rJs⁄
 ( c⁄° 
JSONNode
 & );

	@basictranslateEngine.hpp

1 #i‚de‡
BASIC_TRANSLATEENGINE


2 
	#BASIC_TRANSLATEENGINE


	)

4 
	~"../ö˛ude/P¨£rSax.h
"

5 
	~"../ö˛ude/Node.h
"

6 
	~<°rög
>

7 
	~<c°dlib
>

8 
	~<io°ªam
>

9 
usög
 
«me•a˚
 
	g°d
;

10 
usög
 
«me•a˚
 
	ghtmlcxx
::
HTML
 ;

13 ˛as†
	cbasi˘øn¶©eEngöe
 : 
public
 
P¨£rSax


16 
¥iv©e
:

20 
public
 :

21 
°rög
 
	$gëResu…
()

23  
°r_ªsu…
.
	`em±y
()?
	`°rög
("Sorry,noÅranslationÑesult"):str_result;

27 
vútuÆ
 ~
	$basi˘øn¶©eEngöe
()

29 
	}
}

34 
	g¥Ÿe˘ed
:

35 
°rög
 
°r_ªsu…
;

36 
	$basi˘øn¶©eEngöe
()

38 
	}
}

40 
boﬁ
 
	$af„˘_ãxt_èg
–
Node
 
node
 , 
boﬁ
 
isEnd
 )

42 
°rög
 &
ªsu…
 = 
°r_ªsu…
;

43 c⁄° 
°rög
 &
èg«me
 = 
node
.
	`ègName
();

46 i‡–
èg«me
 == "p" )

48 
ªsu…
 += "\n ";

52 i‡–
èg«me
 == "br")

54 
ªsu…
 += "\n";

58 i‡–
èg«me
 == "strong")

60 
ªsu…
 += " ";

63 i‡–
èg«me
[0] == 'h' )

65 i‡–
isEnd
 )

66 
ªsu…
 += "\n";

69 
•a˚num
 = 
	`©oi
(&
èg«me
[1]);

70 --
•a˚num
 )

71 
ªsu…
 += ' ';

78  
Ál£
;

80  
åue
;

82 
	}
}

	@googleparser.cpp

1 #i‚de‡
GOOGLEPARSERCPP


2 
	#GOOGLEPARSERCPP


	)

4 
	~"googÀ∑r£r.hµ
"

7 
	ggoogÀ∑r£r
::
	$_d›¨£r
 (
boﬁ
 
gmÊag
)

9 
ve˘‹
<
°rög
> 
ªsu…li°
;

13 
°rög
::
size_ty≥
 
°¨ços
;

15 
°¨ços
 = 
to_∑r£r_∑ge_
.
	`föd
("[");

16 i‡–
°¨ços
 =
°rög
::
≈os
 )

18 
to_∑r£r_∑ge_
.
	`˛ór
();

23 
to_∑r£r_∑ge_
.
	`îa£
(0, 
°¨ços
);

28 
j∑r£r_
.
	`∑r£rJs⁄
(
to_∑r£r_∑ge_
);

29 
ªsu…li°
 = 
j∑r£r_
.
	`gëVÆue
(
	`°rög
("[["));

30 i‡–
ªsu…li°
.
	`em±y
() )

31 
	`as£π
(
Ál£
 && "parserÅheÑesultÖageÉrror");

33 i‡–
gmÊag
 )

35 
ªsu…_
 = 
ªsu…li°
.
	`‰⁄t
();

41 
ve˘‹
<
°rög
>::
ôî©‹
 
vsô
 = 
ªsu…li°
.
	`begö
();

42 
ve˘‹
<
°rög
>::
ôî©‹
 
v£nd
 = 
ªsu…li°
.
	`íd
();

43  
vsô
 !
v£nd
 )

45 
ªsu…_
 +(*
vsô
).
	`sub°r
(1, (*vsô).
	`föd
("\",\"")-1);

47 
vsô
++;

52 
	}
}

54 
	ggoogÀ∑r£r
::
	$∑r£r
 ()

56 i‡–
to_∑r£r_∑ge_
.
	`em±y
() )

59 
°rög
::
size_ty≥
 
Ωos
;

60 
Ωos
 = 
to_∑r£r_∑ge_
.
	`rföd
("ISGETMETHOD");

61 i‡–
Ωos
 !
°rög
::
≈os
 )

62 
	`_d›¨£r
(
åue
);

64 
	`_d›¨£r
(
Ál£
);

72 
	}
}

	@googleparser.hpp

1 #i‚de‡
GOOGLEPARSERHPP


2 
	#GOOGLEPARSERHPP


	)

4 
	~"∑gï¨£r.hµ
"

6 ˛as†
	cgoogÀ∑r£r
 : 
public
 
∑gï¨£r


8 
¥iv©e
:

9 
_d›¨£r
(
boﬁ
 
gmÊag
=
åue
);

12 
	mpublic
:

13 
	$googÀ∑r£r
()

16 
	$googÀ∑r£r
(c⁄° 
°rög
 &
∑ge
)

18 
to_∑r£r_∑ge_
 = 
∑ge
;

20 
	}
}

32 
∑r£r
 ();

	@json_array_node.cpp

1 #i‚de‡
JSONARRAYNODECPP


2 
	#JSONARRAYNODECPP


	)

4 
	~"js⁄_¨øy_node.hµ
"

5 
	~<io°ªam
>

8 
	gli°
<
	gba£node
 *> 
	g¨øynode
::
	$gëVÆue
 ( c⁄° 
°rög
 &
key
)

10 
ba£node
::
vÆue_ty≥
 
vt
;

11 
vt
 = 
ba£node
::
	`vÆueTy≥
(
key
);

14 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
vÆues_
.
	`begö
();

15 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
vÆues_
.
	`íd
();

16 
ba£node
 *
node
;

17 
li°
<
ba£node
 *> 
ªsu…
;

19  
ô
 !
íd
 )

21 
node
 = *
ô
;

22 i‡–
node
->
	`vÆueTy≥
(Ë=
vt
 )

25 i‡–
vt
 =
ba£node
::
VALUESTRING
 )

27 
°∫ode
 *
¢ode
 = 
dy«mic_ˇ°
<°∫odê*>(
node
);

28 i‡–
¢ode
->
	`gëSå
(Ë=
key
 )

29 
ªsu…
.
	`push_back
(
node
);

32 
ªsu…
.
	`push_back
(
node
);

35 
ô
 ++;

40  
ªsu…
;

42 
	}
}

46 
	g¨øynode
::
	$add
(
ba£node
 *
node
)

48 
vÆues_
.
	`push_back
(
node
);

50 
	}
}

52 
	g¨øynode
::
	$dñ
(c⁄° 
°rög
 &
key
 )

54 
li°
<
ba£node
*> 
ªsu…
;

57 
ªsu…
 = 
	`gëVÆue
(
key
);

58 i‡–
ªsu…
.
	`em±y
() )

61 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
ªsu…
.
	`begö
();

62 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
ªsu…
.
	`íd
();

63 
ba£node
 * 
node
;

64  
ô
 !
íd
 )

68 
dñëe
 *
ô
;

69 *
ô
 = 
NULL
;

70 
ô
 ++;

74 
ªsu…
.
	`ªmove
(
NULL
);

75 
	}
}

78 
	g¨øynode
::~
	$¨øynode
 ()

80 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
vÆues_
.
	`begö
();

81 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
vÆues_
.
	`íd
();

82 
ba£node
 * 
node
;

84  
ô
 !
íd
 )

86 
node
 = *
ô
;

87 *
ô
 = 
NULL
;

89 
ô
 ++;

90 
dñëe
 
node
;

94 
	}
}

96 
°rög
 
	g¨øynode
::
	$showJs⁄
 (
•a˚num
)

98 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
vÆues_
.
	`begö
();

99 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
vÆues_
.
	`íd
();

100 
ba£node
 * 
node
;

102 
°rög
 
ªsu…
 ;

104  
ô
 !
íd
 )

106 
node
 = *
ô
;

107 
ªsu…
 +
node
->
	`showJs⁄
(0);

108 
ô
 ++;

111 i‡–! 
key_
.
	`em±y
() )

112 
ªsu…
 +
key_
 + ':';

113  
ªsu…
 +
ãxt_
 + '\n';

116 
	}
}

120 
	gjs⁄node
::~
	$js⁄node
 ()

122 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
nodes_
.
	`begö
();

123 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
nodes_
.
	`íd
();

125 
ba£node
 * 
node
;

126  
ô
 !
íd
 )

128 
node
 = *
ô
;

129 *
ô
 = 
NULL
;

130 
ô
 ++;

131 
dñëe
 
node
;

135 
	}
}

137 
	gjs⁄node
::
	$add
(
ba£node
 *
node
)

139 
nodes_
.
	`push_back
(
node
);

141 
	}
}

144 
	gjs⁄node
::
	$dñ
(c⁄° 
°rög
 & 
keys
)

146 
li°
<
ba£node
*> 
ªsu…
;

148 
ªsu…
 = 
	`gëVÆue
(
keys
);

150 i‡–
ªsu…
.
	`em±y
() )

153 
li°
<
ba£node
 *>::
ôî©‹
 
ô
 = 
ªsu…
.
	`begö
();

154 
li°
<
ba£node
 *>::
ôî©‹
 
íd
 = 
ªsu…
.
	`íd
();

158  
ô
 !
íd
 )

161 
dñëe
 *
ô
;

162 *
ô
 = 
NULL
;

163 
ô
 ++;

165 
nodes_
.
	`ªmove
(
NULL
);

166 
	}
}

169 
	gli°
<
	gba£node
 *> 
	gjs⁄node
::
	$gëVÆue
 ( c⁄° 
°rög
 &
key
 )

171 
li°
<
ba£node
 *> 
ªsu…
;

173 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
nodes_
.
	`begö
();

174 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
nodes_
.
	`íd
();

176 
ba£node
 * 
node
 ;

178  
ô
 !
íd
 )

180 
node
 = *
ô
;

181 i‡–
node
->
	`gëKey
(Ë=
key
 )

182 
ªsu…
.
	`push_back
(
node
);

184 
ô
 ++;

188  
ªsu…
;

189 
	}
}

193 
	gve˘‹
<
	g°rög
> 
	gjs⁄node
::
	$li°keys
 ()

195 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
nodes_
.
	`begö
();

196 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
nodes_
.
	`íd
();

197 
ba£node
 *
node
 ;

198 
ve˘‹
<
°rög
> 
tmp
;

200  
ô
 !
íd
 )

203 
node
 = *
ô
;

204 
tmp
.
	`push_back
(
node
->
	`gëKey
());

205 
ô
 ++;

208  
tmp
;

210 
	}
}

212 
°rög
 
	gjs⁄node
::
	$showJs⁄
 (
•a˚num
)

214 
li°
<
ba£node
*>::
ôî©‹
 
ô
 = 
nodes_
.
	`begö
();

215 
li°
<
ba£node
*>::
ôî©‹
 
íd
 = 
nodes_
.
	`íd
();

216 
ba£node
 *
node
 ;

217 
°rög
 
ªsu…
;

219  
ô
 !
íd
 )

221 
node
 = *
ô
;

222 
ªsu…
 +
node
->
	`showJs⁄
(0);

223 
ô
 ++;

226 i‡–! 
key_
.
	`em±y
() )

227 
ªsu…
 +
key_
 + ':';

229  
ªsu…
 +
ãxt_
 + '\n';

231 
	}
}

	@json_array_node.hpp

1 #i‚de‡
JSONARRAYNODEHPP


2 
	#JSONARRAYNODEHPP


	)

4 
	~"js⁄_ba£_node.hµ
"

5 
	~<°rög
>

6 
	~<ve˘‹
>

7 
	~<li°
>

9 
usög
 
«me•a˚
 
	g°d
;

11 ˛as†
	c°∫ode
 : 
public
 
ba£node


13 
¥iv©e
:

14 
°rög
 
key_
;

15 
°rög
 
	mvÆue_
;

17 
	mpublic
:

19 
	$°∫ode
(c⁄° 
°rög
 & 
key
, c⁄° såög &
vÆue
):
	`key_
(key),
	$vÆue_
(
vÆue
)

21 
	`£tVÆueTy≥
(
ba£node
::
VALUESTRING
);

24 
	$°∫ode
(c⁄° 
°rög
 &
vÆue
 ):
	$vÆue_
(
vÆue
)

26 
	`£tVÆueTy≥
(
ba£node
::
VALUESTRING
);

27 
	}
}

29 
	gvútuÆ
 ~
	$°∫ode
()

31 
	}
}

33 
vútuÆ
 
°rög
 
	$gëKey
 ()

35  
key_
;

37 
	}
}

39 
vútuÆ
 
	gli°
<
	gba£node
 *> 
	$gëVÆue
 ( c⁄° 
°rög
 &
key
 )

41 
li°
<
ba£node
 *> 
ªsu…
;

42 
ªsu…
.
	`push_back
 (
this
);

44  
ªsu…
;

46 
	}
}

49 
°rög
 
	$gëSå
()

51  
vÆue_
;

53 
	}
}

55 
°rög
 
	$showJs⁄
 (
•a˚num
)

57 
°rög
 
ªsu…
;

58 i‡–! 
key_
.
	`em±y
() )

59 
ªsu…
 = 
key_
 + ':';

61  
ªsu…
 +
vÆue_
 + '\n';

64 
	}
}

69 ˛as†
	c¨øynode
 : 
public
 
ba£node


71 
¥iv©e
:

72 
li°
<
ba£node
*> 
vÆues_
;

73 
°rög
 
	mkey_
;

74 
°rög
 
	mãxt_
;

76 
	mpublic
:

78 
	$¨øynode
(c⁄° 
°rög
 &
key
):
	$key_
(
key
)

80 
	`£tVÆueTy≥
(
ba£node
::
VALUEARRAY
);

82 
	$¨øynode
()

84 
	`£tVÆueTy≥
(
ba£node
::
VALUEARRAY
);

85 
	}
}

86 
	gvútuÆ
 ~
¨øynode
 ();

89 
vútuÆ
 
°rög
 
	$gëKey
 ()

91  
key_
;

93 
	}
}

97 
	gli°
<
	gba£node
 *> 
gëVÆue
 ( c⁄° 
°rög
 &
key
 );

99 
°rög
 
	$gëSå
 ()

101  
ãxt_
;

103 
	}
}

108 
add
(
ba£node
 *
node
);

109 
dñ
(c⁄° 
°rög
& 
vÆues
);

111 
	$£tText
 ( c⁄° 
°rög
 &
ãxt
 )

113 
ãxt_
 = 
ãxt
;

115 
	}
}

117 
°rög
 
showJs⁄
 (
•a˚num
);

126 ˛as†
	cjs⁄node
 : 
public
 
ba£node


128 
¥iv©e
:

129 
li°
<
ba£node
*> 
nodes_
;

130 
°rög
 
	mkey_
;

131 
°rög
 
	mãxt_
;

141 
	mpublic
:

143 
add
(
ba£node
 *
node
);

145 
dñ
(c⁄° 
°rög
& 
key
);

146 
	mve˘‹
<
	m°rög
> 
li°keys
();

148 
°rög
 
	$gëKey
 ()

150  
key_
;

159 
li°
<
ba£node
 *> 
	`gëVÆue
 (c⁄° 
°rög
 &
key
);

161 
°rög
 
	$gëSå
 ()

163  
ãxt_
;

165 
	}
}

169 
	$js⁄node
 ()

171 
	`£tVÆueTy≥
(
ba£node
::
VALUEJSON
);

172 
	}
}

174 
	$js⁄node
 (c⁄° 
°rög
& 
key
 ):
	$key_
(
key
)

176 
	`£tVÆueTy≥
(
ba£node
::
VALUEJSON
);

177 
	}
}

179 
	gvútuÆ
 ~
js⁄node
();

188 
	$£tText
 ( c⁄° 
°rög
 &
ãxt
 )

190 
ãxt_
 = 
ãxt
;

192 
	}
}

194 
°rög
 
showJs⁄
 (
•a˚num
);

	@json_base_node.hpp

1 #i‚de‡
JSONBASENODEHPP


2 
	#JSONBASENODEHPP


	)

4 
	~<°rög
>

5 
	~<ve˘‹
>

6 
	~<li°
>

7 
usög
 
«me•a˚
 
	g°d
;

10 ˛as†
	cba£node


13 
	m¥iv©e
:

16 
public
:

17 
	evÆue_ty≥
 { 
VALUESTRING
,
	mVALUEARRAY
, 
	mVALUEJSON
 };

21 
	g¥Ÿe˘ed
:

22 
vÆue_ty≥
 
vÆuëy≥_
;

25 
	gpublic
:

26 
	$ba£node
 ()

29 
	}
}

30 
vútuÆ
 ~
	$ba£node
()

32 
	}
}

35 
vÆue_ty≥
 
	$vÆueTy≥
()

37  
vÆuëy≥_
;

38 
	}
}

39 
vÆue_ty≥
 
	$vÆueTy≥
 (c⁄° 
°rög
 &
°r
)

41 i‡–
°r
 =
	`°rög
(1,'{') )

42  
VALUEJSON
;

43 i‡–
°r
 =
	`°rög
(1,'['))

44  
VALUEARRAY
;

46  
VALUESTRING
;

48 
	}
}

50 
	$£tVÆueTy≥
(
vÆue_ty≥
 
t
 )

52 
vÆuëy≥_
 = 
t
;

53 
	}
}

55 
vútuÆ
 
°rög
 
	$gëKey
 ()

57  
	`°rög
();

59 
	}
}

67 
vútuÆ
 
°rög
 
	$gëSå
 ()

69  
	`°rög
();

71 
	}
}

74 
vútuÆ
 
	gli°
<
	gba£node
 *> 
	$gëVÆue
 ( c⁄° 
°rög
 &
key
 )

76  
li°
<
ba£node
*>();

78 
	}
}

82 
vútuÆ
 
	$add
 (
ba£node
 *
node
)

86 
	}
}

88 
vútuÆ
 
dñ
 (c⁄° 
ve˘‹
<
°rög
> &
keys
)

94 
vútuÆ
 
°rög
 
	$showJs⁄
 (
•a˚num
)

96  
	`°rög
();

98 
	}
}

	@jsonparser.cpp

1 #i‚de‡
JSONPARSERCPP


2 
	#JSONPARSERCPP


	)

4 
	~"js⁄∑r£r.hµ
"

5 
	~"js⁄_¨øy_node.hµ
"

7 
	~<f°ªam
>

8 
	~<ˇs£π
>

10 #ifde‡
_debug


12 
	~<time.h
>

13 
«me•a˚
 
	gdebug


17 c⁄° 
°rög
 
	gDEBUGFILE
 = "debug.log";

19 
ªc‹dUnknownSôu©i⁄
 (c⁄° 
°rög
 & 
ãxt
 , såög::
size_ty≥
 
pos
 )

21 
of°ªam
 
outfûe
;

22 
time_t
 
	gnow
;

23 
	g°rög
::
size_ty≥
 
size
 = 
ãxt
.
Àngth
();

25 
time
(&
now
);

27 
	goutfûe
.
›í
–
DEBUGFILE
.
c_°r
(), 
of°ªam
::
out
 | of°ªam::
≠p
 );

28 
	goutfûe
 << 
˘ime
(&
now
Ë<< 
	gídl
;

30 
	goutfûe
 << "po†: " << 
	gpos
 << "ároundÅhêch¨a˘î: " << 
	gãxt
.
sub°r
(
pos
, ( (
size
-posË> 10Ë? 10: (size-pos)Ë<< 
ídl
;

32 
	goutfûe
 << 
	gãxt
 << 
	gídl
;

33 
	goutfûe
.
˛o£
();

44 
	gve˘‹
<
	g°rög
> 
	gjs⁄∑r£r
::
	$_ex∂aöKey
 (c⁄° 
°rög
 &
key
 )

46 
°rög
 
	`no°r
("[{");

47 
ve˘‹
<
°rög
> 
ªsu…
;

49 i‡–
key
.
	`em±y
() )

50  
ªsu…
;

53 
°rög
::
size_ty≥
 
pos
 = 0;

54 
°rög
::
size_ty≥
 
íd
 ;

56 
size
 = 
key
.
	`size
();

58  
pos
 < 
size
 )

60 
key
[
pos
]) {

63 
ªsu…
.
	`push_back
–
	`°rög
(1, 
key
[
pos
]) );

64 ++ 
pos
;

68 
íd
 = 
key
.
	`föd_fú°_of
(
no°r
, 
pos
);

69 i‡–
íd
 =
°rög
::
≈os
 )

70 
íd
 = 
size
;

71 
ªsu…
.
	`push_back
(
key
.
	`sub°r
(
pos
, 
íd
-pos) );

72 
pos
 = 
íd
;

78  
ªsu…
;

81 
	}
}

83 
	gli°
<
	gba£node
 *> 
	gjs⁄∑r£r
::
åyToM©ch
 ( 
ve˘‹
<
°rög
>::
ôî©‹
 
beg
, ve˘‹<°rög>::ôî©‹ 
íd
 , 
li°
<
ba£node
*> &
nodes
 )

85 
	gli°
<
	gba£node
 *> 
	gnodñi°
;

86 
	gli°
<
	gba£node
 *> 
	gªsu…
;

88 
	gli°
<
	gba£node
 *>::
ôî©‹
 
nô
 = 
nodes
.
begö
();

89 
	gli°
<
	gba£node
 *>::
ôî©‹
 
√nd
 = 
nodes
.
íd
();

91  
	gnô
 !
√nd
 )

93 
nodñi°
.
˛ór
();

94 
	gnodñi°
 = (*
nô
)->
gëVÆue
(*
beg
);

95 i‡–
	gnodñi°
.
em±y
() )

97 ++ 
	gnô
;

101 i‡–(
	gbeg
 + 1Ë=
íd
 )

102 
ªsu…
.
•li˚
‘esu….
íd
(),
nodñi°
);

106 
	gli°
<
	gba£node
 *> 
	g∑π_ªsu…
 = 
åyToM©ch
(
beg
+1, 
íd
, 
nodñi°
) ;

107 
	gªsu…
.
•li˚
(
ªsu…
.
íd
(),
∑π_ªsu…
 );

110 
	gnô
 ++;

113  
	gªsu…
 ;

116 
	gve˘‹
<
	g°rög
> 
	gjs⁄∑r£r
::
	$gëVÆue
 ( c⁄° 
°rög
 &
key
)

118 
ve˘‹
<
°rög
> 
ªsu…
;

119 
ªsu…
 = 
	`_ex∂aöKey
(
key
);

122 
ve˘‹
<
°rög
>::
ôî©‹
 
ô
 = 
ªsu…
.
	`begö
();

123 
ve˘‹
<
°rög
>::
ôî©‹
 
íd
 = 
ªsu…
.
	`íd
();

126 
li°
<
ba£node
 *> 
nodes
;

127 
nodes
.
	`push_back
(
roŸ_
);

131 
nodes
 = 
	`åyToM©ch
(
ô
, 
íd
,Çodes);

133 
ªsu…
.
	`˛ór
();

134 i‡–! 
nodes
.
	`em±y
() )

138 
li°
<
ba£node
*>::
ôî©‹
 
lô
 = 
nodes
.
	`begö
();

139 
li°
<
ba£node
*>::
ôî©‹
 
Ànd
 = 
nodes
.
	`íd
();

141  
lô
 !
Ànd
 )

143 
ªsu…
.
	`push_back
((*
lô
)->
	`gëSå
() );

144 
lô
 ++;

148  
ªsu…
;

150 
	}
}

153 
	g°rög
::
size_ty≥
 
js⁄∑r£r
::
	$_∑r£rJs⁄
 ( c⁄° 
°rög
 &
ãxt
 ,
js⁄node
 * 
jnode
 )

155 
°rög
::
size_ty≥
 
pos
 = 0;

156 
°rög
::
size_ty≥
 
íd
 ;

159 
pos
 = 
ãxt
.
	`föd
('{');

160 i‡–
pos
 =
°rög
::
≈os
 )

162 
°rög
::
size_ty≥
 
size
 = 
ãxt
.
	`Àngth
();

163  
pos
 !
°rög
::
≈os
 &&Öo†< 
size
 && 
ãxt
[pos] != '}' )

166 
°rög
 
key
;

169 
pos
 = 
ãxt
.
	`föd
('\"',Öos);

170 
íd
 = 
ãxt
.
	`föd
('\"', 
pos
+1);

171 ++
íd
;

172 
key
 = 
ãxt
.
	`sub°r
(
pos
,
íd
-pos);

175 
°rög
 
	`ex˛udech¨
(": ");

176 
pos
 = 
ãxt
.
	`föd_fú°_nŸ_of
(
ex˛udech¨
, ++
íd
 );

177 
ba£node
 *
node
;

178 i‡–
ãxt
[
pos
] == '\"' )

180 
°rög
 
vÆue
 ;

181 
tmp
 = 1;

183 
íd
 = 
ãxt
.
	`föd
('\"', 
pos
+
tmp
);

184 
tmp
 = 
íd
 - 
pos
 + 1;

185 } 
ãxt
[
íd
-1] == '\\');

190 ++
íd
;

191 
vÆue
 = 
ãxt
.
	`sub°r
(
pos
, 
íd
-pos);

192 
node
 = 
√w
 
	`°∫ode
(
key
,
vÆue
);

193 
jnode
->
	`add
(
node
);

194 
pos
 = 
íd
;

196 i‡–
	`iß um
(
ãxt
[
pos
]) )

198 
°rög
 
vÆue
 ;

199 
tmp
 = 0;

201 
íd
 = 
ãxt
.
	`föd_fú°_of
(",}", 
pos
+
tmp
);

202 
tmp
 = 
íd
 - 
pos
 + 1;

204 } 
ãxt
[
íd
-1] == '\\' );

206 
vÆue
 = 
ãxt
.
	`sub°r
(
pos
, 
íd
-pos);

207 
node
 = 
√w
 
	`°∫ode
(
key
,
vÆue
);

208 
jnode
->
	`add
(
node
);

209 i‡–
ãxt
[
íd
] == '}' )

210 
pos
 = 
íd
;

212 
pos
 = 
íd
 + 1;

214 i‡–
ãxt
[
pos
] == '[' )

216 
¨øynode
 *
¨r
;

217 
°rög
::
size_ty≥
 
add
;

218 
¨r
 = 
√w
 
	`¨øynode
(
key
);

219 
add
 = 
	`_∑r£rAºay
(
ãxt
.
	`sub°r
(
pos
,Åext.
	`Àngth
()), 
¨r
 );

220 
¨r
->
	`£tText
–
ãxt
.
	`sub°r
(
pos
+1, 
add
-2));

222 
pos
 +
add
;

224 
jnode
->
	`add
(
¨r
);

226 i‡–
ãxt
[
pos
] == '{' )

228 
js⁄node
 *
j
;

229 
°rög
::
size_ty≥
 
add
;

230 
j
 = 
√w
 
	`js⁄node
(
key
);

231 
add
 = 
	`_∑r£rJs⁄
(
ãxt
.
	`sub°r
(
pos
,Åext.
	`Àngth
()), 
j
);

232 
j
->
	`£tText
(
ãxt
.
	`sub°r
(
pos
+1, 
add
-2));

233 
pos
 +
add
;

235 
jnode
->
	`add
 (
j
);

239 #ifde‡
_debug


240 
debug
::
	`ªc‹dUnknownSôu©i⁄
(
ãxt
, 
pos
);

243 ++ 
pos
;

248  ++
pos
;

250 
	}
}

253 
	g°rög
::
size_ty≥
 
js⁄∑r£r
::
	$_∑r£rAºay
 ( c⁄° 
°rög
 &
ãxt
 , 
¨øynode
 *
™ode
 )

255 
°rög
::
size_ty≥
 
pos
 = 
ãxt
.
	`föd
('[');

256 
°rög
::
size_ty≥
 
íd
;

259 
ba£node
 *
node
;

260 
°rög
::
size_ty≥
 
size
 = 
ãxt
.
	`Àngth
();

261  
pos
 !
°rög
::
≈os
 &&Öo†< 
size
 && 
ãxt
[pos] != ']' )

263 
°rög
 
	`ex˛udech¨
(", ");

264 
pos
 = 
ãxt
.
	`föd_fú°_nŸ_of
(
ex˛udech¨
,++pos);

266 i‡–
ãxt
[
pos
] == '\"' )

268 
°rög
 
vÆue
;

269 
tmp
 = 1;

272 
íd
 = 
ãxt
.
	`föd
('\"', 
pos
+
tmp
);

273 
tmp
 = 
íd
 - 
pos
 + 1;

274 } 
ãxt
[
íd
-1] == '\\' );

276 ++
íd
;

277 
vÆue
 = 
ãxt
.
	`sub°r
(
pos
, 
íd
-pos);

278 
node
 = 
√w
 
	`°∫ode
(
vÆue
);

279 
™ode
->
	`add
(
node
);

280 
pos
 = 
íd
;

282 i‡–
	`iß um
(
ãxt
[
pos
]) )

284 
°rög
 
vÆue
;

285 
tmp
 = 1;

288 
íd
 = 
ãxt
.
	`föd_fú°_of
(",]", 
pos
+
tmp
);

289 
tmp
 = 
íd
 - 
pos
 + 1;

290 } 
ãxt
[
íd
-1] == '\\' );

294 
vÆue
 = 
ãxt
.
	`sub°r
(
pos
, 
íd
-pos);

295 
node
 = 
√w
 
	`°∫ode
(
vÆue
);

296 
™ode
->
	`add
(
node
);

297 i‡–
ãxt
[
íd
] == ']' )

298 
pos
 = 
íd
;

300 
pos
 = 
íd
 + 1;

302 i‡–
ãxt
[
pos
] == '[' )

304 
¨øynode
 * 
¨r
;

305 
°rög
::
size_ty≥
 
add
;

307 
¨r
 = 
√w
 
¨øynode
;

308 
add
 = 
	`_∑r£rAºay
(
ãxt
.
	`sub°r
(
pos
,Åext.
	`Àngth
()), 
¨r
 );

309 
¨r
->
	`£tText
(
ãxt
.
	`sub°r
(
pos
+1, 
add
-2));

310 
pos
 +
add
;

312 
™ode
->
	`add
(
¨r
);

314 i‡–
ãxt
[
pos
] == '{' )

316 
js⁄node
 *
j
;

317 
°rög
::
size_ty≥
 
add
;

319 
j
 = 
√w
 
js⁄node
;

320 
add
 = 
	`_∑r£rJs⁄
–
ãxt
.
	`sub°r
(
pos
,Åext.
	`Àngth
()Ë, 
j
);

321 
j
->
	`£tText
(
ãxt
.
	`sub°r
(
pos
+1, 
add
-2));

322 
pos
 +
add
;

324 
™ode
->
	`add
(
j
);

327 i‡–
ãxt
[
pos
] == ']' )

334 #ifde‡
_debug


335 
debug
::
	`ªc‹dUnknownSôu©i⁄
(
ãxt
, 
pos
);

338 ++ 
pos
;

344 i‡–
pos
 =
°rög
::
≈os
 ||Öo†>
size
 )

345  
size
;

346  ++
pos
;

348 
	}
}

	@jsonparser.hpp

1 #i‚de‡
JSONPARSERHPP


2 
	#JSONPARSERHPP


	)

4 
	~"js⁄_¨øy_node.hµ
"

5 
	~<°rög
>

6 
	~<io°ªam
>

7 
	~<ve˘‹
>

9 ˛as†
	cjs⁄∑r£r


11 
	m¥iv©e
:

12 
ba£node
 *
roŸ_
;

16 
	m°rög
::
size_ty≥
 
_∑r£rJs⁄
 ( c⁄° 
°rög
 &
ãxt
 , 
js⁄node
 * 
jnode
 );

17 
	m°rög
::
size_ty≥
 
_∑r£rAºay
 ( c⁄° 
°rög
 &
ãxt
, 
¨øynode
* 
node
 );

19 
	mve˘‹
<
	m°rög
> 
_ex∂aöKey
 ( c⁄° 
°rög
 & 
key
 );

20 
	mli°
<
	mba£node
 *> 
åyToM©ch
 ( 
ve˘‹
<
°rög
>::
ôî©‹
 
beg
, ve˘‹<°rög>::ôî©‹ 
íd
 , 
li°
<
ba£node
 *> &
nodes
 );

23 
	mpublic
:

25 
	$js⁄∑r£r
():
	$roŸ_
(
NULL
)

29 ~
	$js⁄∑r£r
()

31 
dñëe
 
roŸ_
;

33 
	}
}

36 
	gve˘‹
<
	g°rög
> 
gëVÆue
 ( c⁄° 
°rög
 & 
key
);

40 
	$∑r£rJs⁄
 ( c⁄° 
°rög
 &
ãxt
 )

43 
°rög
 
	`obj_¨øy
("{[");

44 
°rög
::
size_ty≥
 
pos
 = 
ãxt
.
	`föd_fú°_of
(
obj_¨øy
);

45 i‡–
pos
 =
°rög
::
≈os
 )

48  
ãxt
[
pos
]) {

50 
roŸ_
 = 
√w
 
js⁄node
;

52 
	`_∑r£rJs⁄
(
ãxt
.
	`sub°r
(
pos
,ãxt.
	`Àngth
()), 
dy«mic_ˇ°
<
js⁄node
*>(
roŸ_
) );

56 
roŸ_
 = 
√w
 
¨øynode
;

58 
	`_∑r£rAºay
(
ãxt
.
	`sub°r
(
pos
,ãxt.
	`Àngth
()), 
dy«mic_ˇ°
<
¨øynode
*>(
roŸ_
) );

68 
	}
}

71 
	$li°Js⁄
 ()

73 
cout
 << 
roŸ_
->
	`showJs⁄
(0Ë<< 
ídl
;

76 
	}
}

	@libjson.h

1 #i‚de‡
LIBJSON_H


2 
	#LIBJSON_H


	)

4 
	~"_öã∫Æ/Sour˚/JSONDefs.h
"

13 #ifde‡
JSON_LIBRARY


14 #w¨nög, 
ENTER
 
IN
 
JSON_LIBRARY


15 #ifde‡
__˝lu•lus


19 #ifde‡
JSON_NO_C_CONSTS


21 
	#js⁄_c⁄°


	)

22 
	#TOCONST_CSTR
(
x
Ë
c⁄°_ˇ°
<c⁄° 
js⁄_ch¨
 *>(x)

	)

24 
	#js⁄_c⁄°
 c⁄°

	)

25 
	#TOCONST_CSTR
(
x
Ë
	)
x

31 
js⁄_‰ì
(* 
°r
);

32 
js⁄_dñëe
(
JSONNODE
 * 
node
);

33 #ifde‡
JSON_MEMORY_MANAGE


34 
js⁄_‰ì_Æl
();

35 
js⁄_dñëe_Æl
();

37 #ifde‡
JSON_READ_PRIORITY


38 
JSONNODE
 * 
js⁄_∑r£
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

39 
JSONNODE
 * 
js⁄_∑r£_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

41 
js⁄_ch¨
 * 
js⁄_°rù_whôe_•a˚
(
js⁄_c⁄°
 js⁄_ch¨ * 
js⁄
);

42 #ifde‡
JSON_VALIDATE


43 #ifde‡
JSON_DEPRECATED_FUNCTIONS


44 
JSONNODE
 * 
js⁄_dïªˇãd
(
js⁄_vÆid©e
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
), "json_validate is deprecated, use json_is_validánd json_parse instead");

46 
js⁄_boﬁ_t
 
js⁄_is_vÆid
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

47 
js⁄_boﬁ_t
 
js⁄_is_vÆid_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

49 #i‡
deföed
 
JSON_DEBUG
 && !deföed 
JSON_STDERROR


51 
js⁄_ªgi°î_debug_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
);

53 #ifde‡
JSON_MUTEX_CALLBACKS


54 #ifde‡
JSON_MUTEX_MANAGE


55 
js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, js⁄_muãx_ˇŒback_à
de°roy
, * 
m™agî_lock
);

57 
js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
);

59 
js⁄_£t_globÆ_muãx
(* 
muãx
);

60 
js⁄_£t_muãx
(
JSONNODE
 * 
node
, * 
muãx
);

61 
js⁄_lock
(
JSONNODE
 * 
node
, 
thªadid
);

62 
js⁄_u∆ock
(
JSONNODE
 * 
node
, 
thªadid
);

64 #ifde‡
JSON_MEMORY_CALLBACKS


65 
js⁄_ªgi°î_mem‹y_ˇŒbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
);

68 #ifde‡
JSON_STREAM


69 
JSONSTREAM
 * 
js⁄_√w_°ªam
(
js⁄_°ªam_ˇŒback_t
 
ˇŒback
, 
js⁄_°ªam_e_ˇŒback_t
 
e_ˇŒback
, * 
idítifõr
);

70 
js⁄_°ªam_push
(
JSONSTREAM
 * 
°ªam
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
addídum
);

71 
js⁄_dñëe_°ªam
(
JSONSTREAM
 * 
°ªam
);

72 
js⁄_°ªam_ª£t
(
JSONSTREAM
 * 
°ªam
);

80 
JSONNODE
 * 
js⁄_√w_a
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, js⁄_c⁄° js⁄_ch¨ * 
vÆue
);

81 
JSONNODE
 * 
js⁄_√w_i
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_öt_t
 
vÆue
);

82 
JSONNODE
 * 
js⁄_√w_f
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_numbî
 
vÆue
);

83 
JSONNODE
 * 
js⁄_√w_b
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_boﬁ_t
 
vÆue
);

84 
JSONNODE
 * 
js⁄_√w
(
ty≥
);

85 
JSONNODE
 * 
js⁄_c›y
(
js⁄_c⁄°
 JSONNODE * 
‹ig
);

86 
JSONNODE
 * 
js⁄_du∂iˇã
(
js⁄_c⁄°
 JSONNODE * 
‹ig
);

89 
js⁄_£t_a
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
vÆue
);

90 
js⁄_£t_i
(
JSONNODE
 * 
node
, 
js⁄_öt_t
 
vÆue
);

91 
js⁄_£t_f
(
JSONNODE
 * 
node
, 
js⁄_numbî
 
vÆue
);

92 
js⁄_£t_b
(
JSONNODE
 * 
node
, 
js⁄_boﬁ_t
 
vÆue
);

93 
js⁄_£t_n
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 JSONNODE * 
‹ig
);

96 
js⁄_ty≥
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

97 
js⁄_ödex_t
 
js⁄_size
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

98 
js⁄_boﬁ_t
 
js⁄_em±y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

99 
js⁄_ch¨
 * 
js⁄_«me
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

100 #ifde‡
JSON_COMMENTS


101 
js⁄_ch¨
 * 
js⁄_gë_commít
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

103 
js⁄_ch¨
 * 
js⁄_as_°rög
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

104 
js⁄_öt_t
 
js⁄_as_öt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

105 
js⁄_numbî
 
js⁄_as_Êﬂt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

106 
js⁄_boﬁ_t
 
js⁄_as_boﬁ
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

107 #ifde‡
JSON_CASTABLE


108 
JSONNODE
 * 
js⁄_as_node
(
js⁄_c⁄°
 JSONNODE * 
node
);

109 
JSONNODE
 * 
js⁄_as_¨øy
(
js⁄_c⁄°
 JSONNODE * 
node
);

111 #ifde‡
JSON_BINARY


112 * 
js⁄_as_bö¨y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
, * 
size
);

114 #ifde‡
JSON_WRITE_PRIORITY


115 
js⁄_ch¨
 * 
js⁄_wrôe
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

116 
js⁄_ch¨
 * 
js⁄_wrôe_f‹m©ãd
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

120 
js⁄_£t_«me
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

121 #ifde‡
JSON_COMMENTS


122 
js⁄_£t_commít
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
commít
);

124 
js⁄_˛ór
(
JSONNODE
 * 
node
);

125 
js⁄_nuŒify
(
JSONNODE
 * 
node
);

126 
js⁄_sw≠
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

127 
js⁄_mîge
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

128 #i‡!
deföed
 (
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

129 
js⁄_¥ï¨£
(
JSONNODE
 * 
node
);

131 #ifde‡
JSON_BINARY


132 
js⁄_£t_bö¨y
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 * 
d©a
, 
Àngth
);

134 #ifde‡
JSON_EXPOSE_BASE64


135 
js⁄_ch¨
 * 
js⁄_ícode64
(
js⁄_c⁄°
 * 
bö¨y
, 
js⁄_ödex_t
 
byãs
);

136 * 
js⁄_decode64
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
ãxt
, * 
size
);

138 #ifde‡
JSON_CASTABLE


139 
js⁄_ˇ°
(
JSONNODE
 * 
node
, 
ty≥
);

143 
js⁄_ª£rve
(
JSONNODE
 * 
node
, 
js⁄_ödex_t
 
siz
);

144 
JSONNODE
 * 
js⁄_©
(JSONNODE * 
node
, 
js⁄_ödex_t
 
pos
);

145 
JSONNODE
 * 
js⁄_gë
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

146 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


147 
JSONNODE
 * 
js⁄_gë_noˇ£
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

148 
JSONNODE
 * 
js⁄_p›_back_noˇ£
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

150 
js⁄_push_back
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

151 
JSONNODE
 * 
js⁄_p›_back_©
(JSONNODE * 
node
, 
js⁄_ödex_t
 
pos
);

152 
JSONNODE
 * 
js⁄_p›_back
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

153 #ifde‡
JSON_ITERATORS


154 
JSONNODE_ITERATOR
 
js⁄_föd
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

155 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


156 
JSONNODE_ITERATOR
 
js⁄_föd_noˇ£
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

158 
JSONNODE_ITERATOR
 
js⁄_îa£
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
);

159 
JSONNODE_ITERATOR
 
js⁄_îa£_mu…i
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
°¨t
, JSONNODE_ITERATOR 
íd
);

160 
JSONNODE_ITERATOR
 
js⁄_ö£π
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
, JSONNODE * 
node2
);

161 
JSONNODE_ITERATOR
 
js⁄_ö£π_mu…i
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
, JSONNODE_ITERATOR 
°¨t
, JSONNODE_ITERATOR 
íd
);

164 
JSONNODE_ITERATOR
 
js⁄_begö
(
JSONNODE
 * 
node
);

165 
JSONNODE_ITERATOR
 
js⁄_íd
(
JSONNODE
 * 
node
);

169 
js⁄_boﬁ_t
 
js⁄_equÆ
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

171 #ifde‡
__˝lu•lus


175 #i‚de‡
__˝lu•lus


176 #îr‹ 
Tu∫ög
 
off
 
JSON_LIBRARY
 
ªquúes
 
C
++

179 #w¨nög, 
íãr
 
this
 
bønch


180 
	~"_öã∫Æ/Sour˚/JSONNode.h
"

181 
	~"_öã∫Æ/Sour˚/JSONW‹kî.h
"

182 
	~"_öã∫Æ/Sour˚/JSONVÆid©‹.h
"

183 
	~"_öã∫Æ/Sour˚/JSONSåóm.h
"

184 
	~"_öã∫Æ/Sour˚/JSONPª∑r£.h
"

185 #ifde‡
JSON_EXPOSE_BASE64


186 
	~"_öã∫Æ/Sour˚/JSON_Ba£64.h
"

188 #i‚de‡
JSON_NO_EXCEPTIONS


189 
	~<°dex˚±
>

192 
	~<cwch¨
>

193 
	~<°rög
>

195 
«me•a˚
 
libjs⁄
 {

196 #ifde‡
JSON_EXPOSE_BASE64


197 
ölöe
 
js⁄_°rög
 
ícode64
(c⁄° * 
bö¨y
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
 {

198  
JSONBa£64
::
js⁄_ícode64
(
bö¨y
, 
byãs
);

201 
ölöe
 
°d
::
°rög
 
decode64
(c⁄° 
js⁄_°rög
 & 
ícoded
Ë
js⁄_nŸhrow
 {

202  
JSONBa£64
::
js⁄_decode64
(
ícoded
);

207 
ölöe
 
js⁄_°rög
 
°rù_whôe_•a˚
(c⁄° js⁄_°rög & 
js⁄
Ë
js⁄_nŸhrow
 {

208  
JSONW‹kî
::
RemoveWhôeS∑˚AndCommíts
(
js⁄
, 
Ál£
);

211 #i‚de‡
JSON_STRING_HEADER


212 
ölöe
 
°d
::
°rög
 
to_°d_°rög
(c⁄° 
js⁄_°rög
 & 
°r
){

213 #i‡
deföed
(
JSON_UNICODE
Ë||deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

214  
°d
::
°rög
(
°r
.
begö
(), så.
íd
());

216  
°r
;

219 
ölöe
 
°d
::
w°rög
 
to_°d_w°rög
(c⁄° 
js⁄_°rög
 & 
°r
){

220 #i‡(!
deföed
(
JSON_UNICODE
)Ë|| deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

221  
°d
::
w°rög
(
°r
.
begö
(), så.
íd
());

223  
°r
;

227 
ölöe
 
js⁄_°rög
 
to_js⁄_°rög
(c⁄° 
°d
::
°rög
 & 
°r
){

228 #i‡
deföed
(
JSON_UNICODE
Ë||deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

229  
js⁄_°rög
(
°r
.
begö
(), så.
íd
());

231  
°r
;

234 
ölöe
 
js⁄_°rög
 
to_js⁄_°rög
(c⁄° 
°d
::
w°rög
 & 
°r
){

235 #i‡(!
deföed
(
JSON_UNICODE
)Ë|| deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

236  
js⁄_°rög
(
°r
.
begö
(), så.
íd
());

238  
°r
;

243 #ifde‡
JSON_READ_PRIORITY


245 
ölöe
 
JSONNode
 
∑r£
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_throws
(
°d
::
övÆid_¨gumít
) {

246 #ifde‡
JSON_PREPARSE


247 
size_t
 
Àn
;

248 
js⁄_auto
<
js⁄_ch¨
> 
buf„r
(
JSONW‹kî
::
RemoveWhôeS∑˚
(
js⁄
, 
Àn
, 
Ál£
));

249  
JSONPª∑r£
::
isVÆidRoŸ
(
buf„r
.
±r
);

251  
JSONW‹kî
::
∑r£
(
js⁄
);

255 
ölöe
 
JSONNode
 
∑r£_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_throws
(
°d
::
övÆid_¨gumít
) {

256 #ifde‡
JSON_PREPARSE


257  
JSONPª∑r£
::
isVÆidRoŸ
(
js⁄
);

259  
JSONW‹kî
::
∑r£_unf‹m©ãd
(
js⁄
);

263 #ifde‡
JSON_VALIDATE


264 
ölöe
 
boﬁ
 
is_vÆid
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_nŸhrow
 {

265 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


266 i‡(
js⁄_u∆ikñy
(
js⁄
.
Àngth
(Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

267 
JSON_FAIL
(
JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

268  
Ál£
;

271 
js⁄_auto
<
js⁄_ch¨
> 
s
;

272 
s
.
£t
(
JSONW‹kî
::
RemoveWhôeS∑˚AndCommítsC
(
js⁄
, 
Ál£
));

273  
JSONVÆid©‹
::
isVÆidRoŸ
(
s
.
±r
);

276 
ölöe
 
boﬁ
 
is_vÆid_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_nŸhrow
 {

277 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


278 i‡(
js⁄_u∆ikñy
(
js⁄
.
Àngth
(Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

279 
JSON_FAIL
(
JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

280  
Ál£
;

283  
JSONVÆid©‹
::
isVÆidRoŸ
(
js⁄
.
c_°r
());

285 #ifde‡
JSON_DEPRECATED_FUNCTIONS


286 #ifde‡
JSON_NO_EXCEPTIONS


287 #îr‹, 
JSON_DEPRECATED_FUNCTIONS
 
ªquúes
 
JSON_NO_EXCEPTIONS
 
be
 
off


290 
ölöe
 
JSONNode
 
js⁄_dïªˇãd
(
vÆid©e
(c⁄° 
js⁄_°rög
 & 
js⁄
), "libjson::validate is deprecated, useÜibjson::is_validándÜibjson::parse instead");

296 #i‡
deföed
 
JSON_DEBUG
 && !deföed 
JSON_STDERROR


297 
ölöe
 
ªgi°î_debug_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
Ë
js⁄_nŸhrow
 {

298 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

302 #ifde‡
JSON_MUTEX_CALLBACKS


303 #ifde‡
JSON_MUTEX_MANAGE


304 
ölöe
 
ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, js⁄_muãx_ˇŒback_à
de°roy
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 {

305 
JSONNode
::
ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

306 
JSONNode
::
ªgi°î_muãx_de°ru˘‹
(
de°roy
);

309 
ölöe
 
ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 {

310 
JSONNode
::
ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

314 
ölöe
 
£t_globÆ_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 {

315 
JSONNode
::
£t_globÆ_muãx
(
muãx
);

319 #ifde‡
JSON_MEMORY_CALLBACKS


320 
ölöe
 
ªgi°î_mem‹y_ˇŒbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
Ë
js⁄_nŸhrow
 {

321 
JSONMem‹y
::
ªgi°îMem‹yCÆlbacks
(
mÆ
, 
ªÆ
, 
‰e
);

326 #ifde‡
JSON_VALIDATE


327 #ifde‡
JSON_DEPRECATED_FUNCTIONS


329 
ölöe
 
JSONNode
 
libjs⁄
::
	$vÆid©e
(c⁄° 
js⁄_°rög
 & 
js⁄
) {

330 i‡(
	`js⁄_likñy
(
	`is_vÆid
(
js⁄
))){

331  
	`∑r£
(
js⁄
);

333 
throw
 
°d
::
	`övÆid_¨gumít
("");

334 
	}
}

	@libjson/._JSONOptions.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/JSONOptions.h

1 #i‚de‡
JSON_OPTIONS_H


2 
	#JSON_OPTIONS_H


	)

46 
	#JSON_SAFE


	)

90 
	#JSON_REF_COUNT


	)

97 
	#JSON_BINARY


	)

105 
	#JSON_EXPOSE_BASE64


	)

112 
	#JSON_ITERATORS


	)

120 
	#JSON_STREAM


	)

188 
	#JSON_WRITE_PRIORITY
 
MED


	)

195 
	#JSON_READ_PRIORITY
 
HIGH


	)

218 
	#JSON_ESCAPE_WRITES


	)

226 
	#JSON_COMMENTS


	)

256 
	#JSON_VALIDATE


	)

263 
	#JSON_CASE_INSENSITIVE_FUNCTIONS


	)

324 
	#JSON_DEPRECATED_FUNCTIONS


	)

333 
	#JSON_CASTABLE


	)

342 
	#JSON_SECURITY_MAX_NEST_LEVEL
 128

	)

349 
	#JSON_SECURITY_MAX_STRING_LENGTH
 33554432

	)

357 
	#JSON_SECURITY_MAX_STREAM_OBJECTS
 128

	)

	@libjson/_internal/Dependencies/libbase64++/._libbase64++.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Dependencies/libbase64++/libbase64++.h

1 #i‚de‡
LIBBASE64_CPP_H


2 
	#LIBBASE64_CPP_H


	)

4 
	~<°rög
>

8 
	#__LIBBASE64_MAJOR__
 1

	)

9 
	#__LIBBASE64_MINOR__
 1

	)

10 
	#__LIBBASE64_PATCH__
 0

	)

11 
	#__LIBBASE64_VERSION__
 (
__LIBBASE64_MAJOR__
 * 10000 + 
__LIBBASE64_MINOR__
 * 100 + 
__LIBBASE64_PATCH__
)

	)

14 #ifde‡
NDEBUG


15 
	#LIBBASE64_ASSERT
(
c⁄d
, 
msg
Ë()0

	)

16 
	#CREATEBOUNDCHECKER
(
ty≥
, 
«me
, 
ubound
, 
lbound
Ë()0

	)

17 
	#GETITEM_BOUNDCHECK
(
loc
, 
«me
Ë(*÷oc))

	)

19 
	~<io°ªam
>

20 
	#LIBBASE64_ASSERT
(
c⁄d
, 
msg
Ëi‡(!(c⁄d)){ 
°d
::
˚º
 << msg << std::
ídl
; 
throw
 
Ál£
; }

	)

22 
	gãm∂©e
<
ty≥«me
 
	gT
>

23 ˛as†
	clibba£64_boundCheckî
 {

24 
	mpublic
:

25 
	$libba£64_boundCheckî
(c⁄° 
T
 * 
lbound
, c⁄° T * 
ubound
Ë: 
	`uµîbound
(ubound), 
	$lowîbound
(
lbound
){};

26 
T
 
	$gëLoˇti⁄
(c⁄° 
T
 * 
loc
){

27 
	`LIBBASE64_ASSERT
(
loc
 < 
uµîbound
, "Array indexábove bounds");

28 
	`LIBBASE64_ASSERT
(
loc
 >
lowîbound
, "Array index below bounds");

29  *
loc
;

30 
	}
}

31 
	g¥iv©e
:

32 c⁄° 
T
 * 
lowîbound
;

33 c⁄° 
T
 * 
	guµîbound
;

35 
	#CREATEBOUNDCHECKER
(
ty≥
, 
«me
, 
ubound
, 
lbound
Ë
libba£64_boundCheckî
<ty≥> 
	`«me
(ubound,Übound)

	)

36 
	#GETITEM_BOUNDCHECK
(
loc
, 
«me
Ë«me.
	`gëLoˇti⁄
÷oc)

	)

38 #ifde‡
LIBBASE64CODECOVERAGE


39 
	#LIBBASE64CODECOVERAGEBRANCH
 { 
boﬁ
 
f_codeCovîage_
 = 
Ál£
; i‡(f_codeCovîage_ =Ál£){ 
libba£64
::
gëCovîageHôs
<
STRINGTYPE
, 
CHARTYPE
, 
UCHARTYPE
, 
SAFETY
>(
åue
); f_codeCovîage_ =Årue; } }

	)

42 #i‚de‡
LIBBASE64CODECOVERAGE


43 
	#LIBBASE64CODECOVERAGEBRANCH
 ()0

	)

47 #ifde‡
__GNUC__


48 
	#LIBBASE64_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100)

	)

49 #i‡(
LIBBASE64_GCC_VERSION
 >= 29600)

50 
	#libba£64_likñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),1)

	)

51 
	#libba£64_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),0)

	)

54 #i‚de‡
libba£64_likñy


55 
	#libba£64_likñy
(
x
Ë
	)
x

56 
	#libba£64_u∆ikñy
(
x
Ë
	)
x

60 
«me•a˚
 
	glibba£64
 {

61 #ifde‡
LIBBASE64CODECOVERAGE


62 
	gãm∂©e
<
˛ass
 
	gSTRINGTYPE
, 
ty≥«me
 
	gCHARTYPE
,Åy≥«mê
	gUCHARTYPE
, 
boﬁ
 
	gSAFETY
>

63 
size_t
 
gëCovîageHôs
(
boﬁ
 
öc
){

64 
size_t
 
	ghôs
 = 0;

65 i‡(
	göc
Ë++
	ghôs
;

66  
	ghôs
;

71 
«me•a˚
 
	glibba£64_ch¨a˘îs
 {

72 
	gãm∂©e
<
ty≥«me
 
	gT
>

73 
ölöe
 c⁄° 
T
 * 
gëCh¨64
(){

74 c⁄° 
T
 
	gch¨64s
[64] = {

75 (
T
)'A', (T)'B', (T)'C', (T)'D', (T)'E', (T)'F', (T)'G', (T)'H', (T)'I', (T)'J', (T)'K', (T)'L', (T)'M',

76 (
T
)'N', (T)'O', (T)'P', (T)'Q', (T)'R', (T)'S', (T)'T', (T)'U', (T)'V', (T)'W', (T)'X', (T)'Y', (T)'Z',

77 (
T
)'a', (T)'b', (T)'c', (T)'d', (T)'e', (T)'f', (T)'g', (T)'h', (T)'i', (T)'j', (T)'k', (T)'l', (T)'m',

78 (
T
)'n', (T)'o', (T)'p', (T)'q', (T)'r', (T)'s', (T)'t', (T)'u', (T)'v', (T)'w', (T)'x', (T)'y', (T)'z',

79 (
T
)'0', (T)'1', (T)'2', (T)'3', (T)'4', (T)'5', (T)'6', (T)'7', (T)'8', (T)'9', (T)'+', (T)'/'

81  
	gch¨64s
;

84 
	gãm∂©e
<
ty≥«me
 
	gT
>

85 
ölöe
 
T
 
gëCh¨
(
bö
){

86 
CREATEBOUNDCHECKER
(
T
, 
ch¨64bounds
, 
gëCh¨64
<T>(), getChar64<T>() + 64);

87  
GETITEM_BOUNDCHECK
(
gëCh¨64
<
T
>(Ë+ 
bö
, 
ch¨64bounds
);

90 
	gãm∂©e
<
ty≥«me
 
	gT
>

91 
ölöe
 
T
 
toBö¨y
(T 
c
) {

92 
T
 
	gbö¨yC⁄vît
[80] = {62,48,49,50,63,52,53,54,55,56,57,58,59,60,61,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};

93 
CREATEBOUNDCHECKER
(
T
, 
bö¨yC⁄vîtsbounds
, 
bö¨yC⁄vît
, binaryConvert + 80);

94  
GETITEM_BOUNDCHECK
(
bö¨yC⁄vît
 + 
c
 - 43, 
bö¨yC⁄vîtsbounds
);

97 
	gãm∂©e
<
ty≥«me
 
	gT
>

98 
ölöe
 
	gT
 & 
em±ySåög
(){

99 
T
 
	gt
;

100  
	gt
;

104 
«me•a˚
 
	glibba£64_CÆcuœt‹
 {

105 
ölöe
 
size_t
 
gëEncodögSize
(size_à
byãs
){

106  (
	gbyãs
 + 2 - ((bytes + 2) % 3)) / 3 * 4;

108 
ölöe
 
size_t
 
gëDecodögSize
(size_à
ªs
){

109  
	gªs
 * 3 / 4;

117 
	gãm∂©e
<
˛ass
 
	gSTRINGTYPE
, 
ty≥«me
 
	gCHARTYPE
,Åy≥«mê
	gUCHARTYPE
, 
boﬁ
 
	gSAFETY
>

118 
STRINGTYPE
 
ícode
(c⁄° * 
bö¨y
, 
size_t
 
byãs
){

119 
CREATEBOUNDCHECKER
(, 
bö¨ybounds
, 
bö¨y
, bö¨y + 
byãs
);

122 i‡(
	gSAFETY
){

123 i‡(
libba£64_u∆ikñy
(
byãs
 == 0)){

124 
LIBBASE64CODECOVERAGEBRANCH
;

125  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
STRINGTYPE
>();

130 
size_t
 
	gmißlig√d
 = 
byãs
 % 3;

131 
STRINGTYPE
 
	gªsu…
;

132 
	gªsu…
.
ª£rve
(
libba£64_CÆcuœt‹
::
gëEncodögSize
(
byãs
));

135 
size_t
 
	gi
 = 0, 
Æig√d
((
byãs
 - 
mißlig√d
Ë/ 3); i < 
	gÆig√d
; ++i){

136 
	gLIBBASE64CODECOVERAGEBRANCH
;

137 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>((
GETITEM_BOUNDCHECK
(
bö¨y
, 
bö¨ybounds
) & 0xFC) >> 2);

138 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>(((
GETITEM_BOUNDCHECK
(
bö¨y
, 
bö¨ybounds
) & 0x03) << 4) + ((GETITEM_BOUNDCHECK(binary + 1, binarybounds) & 0xF0) >> 4));

139 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>(((
GETITEM_BOUNDCHECK
(
bö¨y
 + 1, 
bö¨ybounds
) & 0x0F) << 2) + ((GETITEM_BOUNDCHECK(binary + 2, binarybounds) & 0xC0) >> 6));

140 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>(
GETITEM_BOUNDCHECK
(
bö¨y
 + 2, 
bö¨ybounds
) & 0x3F);

141 
	gbö¨y
 += 3;

145 i‡(
libba£64_likñy
(
mißlig√d
 != 0)){

146 
LIBBASE64CODECOVERAGEBRANCH
;

148 
	gãmp
[3] = { '\0', '\0', '\0' };

149 
	gi
 = 0; i < ()
	gmißlig√d
; ++i){

150 
	gLIBBASE64CODECOVERAGEBRANCH
;

151 
	gãmp
[
i
] = 
GETITEM_BOUNDCHECK
(
bö¨y
++, 
bö¨ybounds
);

155 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>((
ãmp
[0] & 0xFC) >> 2);

156 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>(((
ãmp
[0] & 0x03) << 4) + ((temp[1] & 0xF0) >> 4));

157 i‡(
	gmißlig√d
 == 2){

158 
LIBBASE64CODECOVERAGEBRANCH
;

159 
	gªsu…
 +
libba£64_ch¨a˘îs
::
gëCh¨
<
CHARTYPE
>(((
ãmp
[1] & 0x0F) << 2) + ((temp[2] & 0xC0) >> 6));

161 
	gLIBBASE64CODECOVERAGEBRANCH
;

162 
	gªsu…
 +(
CHARTYPE
)'=';

164 
	gªsu…
 +(
CHARTYPE
)'=';

166 
	gLIBBASE64CODECOVERAGEBRANCH
;

169 
LIBBASE64_ASSERT
(
libba£64_CÆcuœt‹
::
gëEncodögSize
(
byãs
Ë=
ªsu…
.
Àngth
(), "Reserve wasn'tÅhe correct guess");

170  
	gªsu…
;

173 
	gãm∂©e
<
˛ass
 
	gSTRINGTYPE
, 
ty≥«me
 
	gCHARTYPE
,Åy≥«mê
	gUCHARTYPE
, 
boﬁ
 
	gSAFETY
>

174 
	g°d
::
°rög
 
decode
(c⁄° 
STRINGTYPE
 & 
ícoded
){

176 c⁄° 
size_t
 
Àngth
 = 
ícoded
.length();

178 i‡(
	gSAFETY
){

179 i‡(
libba£64_u∆ikñy
((
Àngth
 % 4) != 0)){

180 
LIBBASE64CODECOVERAGEBRANCH
;

181  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
°d
::
°rög
>();

183 i‡(
libba£64_u∆ikñy
(
Àngth
 == 0)){

184 
LIBBASE64CODECOVERAGEBRANCH
;

185  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
°d
::
°rög
>();

189 
size_t
 
	gpos
 = 
ícoded
.
föd_fú°_nŸ_of
(
libba£64_ch¨a˘îs
::
gëCh¨64
<
CHARTYPE
>());

190 i‡(
libba£64_u∆ikñy
(
pos
 !
STRINGTYPE
::
≈os
)){

191 
LIBBASE64CODECOVERAGEBRANCH
;

192 i‡(
libba£64_u∆ikñy
(
ícoded
[
pos
] !(
CHARTYPE
)'=')){

193 
LIBBASE64CODECOVERAGEBRANCH
;

194 #ifde‡
LIBBASE64_THROW_STD_INVALID_ARGUMENT


195 
throw
 
	g°d
::
övÆid_¨gumít
("invalid character in base64");

197  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
°d
::
°rög
>();

200 i‡(
	gpos
 !
Àngth
 - 1){

201 
LIBBASE64CODECOVERAGEBRANCH
;

202 i‡(
libba£64_u∆ikñy
(
pos
 !
Àngth
 - 2)){

203 
LIBBASE64CODECOVERAGEBRANCH
;

204 #ifde‡
LIBBASE64_THROW_STD_INVALID_ARGUMENT


205 
throw
 
	g°d
::
övÆid_¨gumít
("equal sign in wrongÖlace in base64");

207  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
°d
::
°rög
>();

210 i‡(
libba£64_u∆ikñy
(
ícoded
[
pos
 + 1] !(
CHARTYPE
)'=')){

211 
LIBBASE64CODECOVERAGEBRANCH
;

212 #ifde‡
LIBBASE64_THROW_STD_INVALID_ARGUMENT


213 
throw
 
	g°d
::
övÆid_¨gumít
("invalid character in base64");

215  
	glibba£64_ch¨a˘îs
::
em±ySåög
<
°d
::
°rög
>();

218 
	gLIBBASE64CODECOVERAGEBRANCH
;

220 
	gLIBBASE64CODECOVERAGEBRANCH
;

223 
	gLIBBASE64CODECOVERAGEBRANCH
;

227 c⁄° 
CHARTYPE
 * 
	gru¬î
 = 
ícoded
.
d©a
();

228 c⁄° 
CHARTYPE
 * 
	gíd
 = 
ru¬î
 + 
ícoded
.
Àngth
();

229 
CREATEBOUNDCHECKER
(
CHARTYPE
, 
ícodedbounds
, 
ru¬î
, 
íd
);

230 
size_t
 
	gÆig√d
 = 
Àngth
 / 4;

231 
	g°d
::
°rög
 
ªsu…
;

232 --
	gÆig√d
;

233 
	gªsu…
.
ª£rve
(
libba£64_CÆcuœt‹
::
gëDecodögSize
(
Àngth
));

236 
	gi
 = 0; i < 
	gÆig√d
; ++i){

237 c⁄° 
CHARTYPE
 
	g£c⁄d
 = 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
 + 1, 
ícodedbounds
));

238 c⁄° 
CHARTYPE
 
	gthúd
 = 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
 + 2, 
ícodedbounds
));

239 
	gªsu…
 +(
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
, 
ícodedbounds
)Ë<< 2Ë+ ((
	g£c⁄d
 & 0x30) >> 4);

240 
	gªsu…
 +((
£c⁄d
 & 0xfË<< 4Ë+ ((
thúd
 & 0x3c) >> 2);

241 
	gªsu…
 +((
thúd
 & 0x3Ë<< 6Ë+ 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
 + 3, 
ícodedbounds
));

242 
	gru¬î
 += 4;

246 c⁄° 
CHARTYPE
 
	g£c⁄d
 = 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
 + 1, 
ícodedbounds
));

247 
	gªsu…
 +(
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
 + 0, 
ícodedbounds
)Ë<< 2Ë+ ((
	g£c⁄d
 & 0x30) >> 4);

248 
	gru¬î
 += 2;

249 i‡((
	gru¬î
 !
íd
Ë&& (*
ru¬î
 !(
CHARTYPE
)'=')){

250 
LIBBASE64CODECOVERAGEBRANCH
;

251 c⁄° 
CHARTYPE
 
	gthúd
 = 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
, 
ícodedbounds
));

252 
	gªsu…
 +((
£c⁄d
 & 0xfË<< 4Ë+ ((
thúd
 & 0x3c) >> 2);

253 ++
	gru¬î
;

254 i‡((
	gru¬î
 !
íd
Ë&& (*
ru¬î
 !(
CHARTYPE
)'=')){

255 
LIBBASE64CODECOVERAGEBRANCH
;

256 
	gªsu…
 +((
thúd
 & 0x3Ë<< 6Ë+ 
libba£64_ch¨a˘îs
::
toBö¨y
<
UCHARTYPE
>(
GETITEM_BOUNDCHECK
(
ru¬î
, 
ícodedbounds
));

258 
	gLIBBASE64CODECOVERAGEBRANCH
;

261 
	gLIBBASE64CODECOVERAGEBRANCH
;

264 
LIBBASE64_ASSERT
(
libba£64_CÆcuœt‹
::
gëDecodögSize
(
Àngth
Ë>
ªsu…
.length(), "Reserve wasn'tÅhe correct guess,Åoo small");

265 
LIBBASE64_ASSERT
((
ªsu…
.
Àngth
(Ë<3Ë|| (
libba£64_CÆcuœt‹
::
gëDecodögSize
(length) >Ñesult.length() - 3), "Reserve wasn'tÅhe correct guess,Åoo big");

266  
	gªsu…
;

	@libjson/_internal/Dependencies/mempool++/._mempool.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Dependencies/mempool++/mempool.h

1 #i‚de‡
mempoﬁ___mempoﬁ_h


2 
	#mempoﬁ___mempoﬁ_h


	)

11 
	#MEMPOOL_OVERFLOW
 3.0f / 4.0f

13 
	#MEMPOOL_DETERMINE_SCALAR
 5.0f / 3.0f

14 
	#MEMPOOL_FALLBACK_DEPTH
 3

	)

20 
	#__MEMPOOL_MAJOR__
 1

	)

21 
	#__MEMPOOL_MINOR__
 2

	)

22 
	#__MEMPOOL_PATCH__
 0

	)

23 
	#__MEMPOOL_VERSION__
 (
__MEMPOOL_MAJOR__
 * 10000 + 
__MEMPOOL_MINOR__
 * 100 + 
__MEMPOOL_PATCH__
)

	)

29 #ifde‡
MEMPOOL_DEBUGGING


30 
	~<io°ªam
>

31 
	#MEMPOOL_DEBUG
(
x
Ë
°d
::
cout
 << x << std::
ídl
;

	)

33 
	#MEMPOOL_DEBUG
(
x
)

	)

36 #ifde‡
MEMPOOL_ASSERTS


37 
	~<io°ªam
>

38 
	#MEMPOOL_ASSERT
(
c⁄dôi⁄
Ëi‡(
	`poﬁ_u∆ikñy
(!(c⁄dôi⁄))){ 
°d
::
cout
 << #c⁄dôi⁄ << " i¢'àåue" << std::
ídl
; }

	)

39 
	#MEMPOOL_ASSERT2
(
c⁄dôi⁄
, 
out
Ëi‡(
	`poﬁ_u∆ikñy
(!(c⁄dôi⁄))){ 
°d
::
cout
 << ouà<< std::
ídl
; }

	)

41 
	#MEMPOOL_ASSERT
(
c⁄dôi⁄
)

	)

42 
	#MEMPOOL_ASSERT2
(
c⁄dôi⁄
, 
out
)

	)

45 #ifde‡
MEMPOOL_PERFORMANCE_DEBUGGING


46 
	~<io°ªam
>

47 
	~<s°ªam
>

48 
	~<°rög
>

49 
	#MEMPOOL_PERFORMANCE_DEBUG
(
x
Ë
°d
::
cout
 << x << std::
ídl
;

	)

51 
	#MEMPOOL_PERFORMANCE_DEBUG
(
x
)

	)

59 #ifde‡
__GNUC__


60 #i‡(
__GNUC__
 >= 3)

61 
	#POOL_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

63 
	#POOL_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100)

	)

66 #i‡(
POOL_GCC_VERSION
 >= 40300)

67 
	#poﬁ_hŸ
 
poﬁ_nŸhrow
 
	`__©åibuã__
 ((
hŸ
))

	)

69 
	#poﬁ_hŸ
 
poﬁ_nŸhrow


	)

72 #i‡(
POOL_GCC_VERSION
 >= 29600)

73 
	#poﬁ_likñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),1)

	)

74 
	#poﬁ_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),0)

	)

76 
	#poﬁ_likñy
(
x
Ë
	)
x

77 
	#poﬁ_u∆ikñy
(
x
Ë
	)
x

80 
	#poﬁ_nŸhrow
 
	`throw
()

	)

82 
	#poﬁ_hŸ
 
poﬁ_nŸhrow


	)

83 
	#poﬁ_likñy
(
x
Ë
	)
x

84 
	#poﬁ_u∆ikñy
(
x
Ë
	)
x

85 
	#poﬁ_nŸhrow


	)

88 
	~<c°rög
>

95 ˛as†
	cmempoﬁ_ˇŒbacks
 {

96 
	mpublic
:

97 * (*
	tmÆlo˚r_t
)(
	tsize_t
);

98 (*
	t‰ìr_t
)(*);

99 * (*
	tªÆlo˚r_t
)(*, 
	tsize_t
);

102 
ölöe
 
	$£t
(
mÆlo˚r_t
 
mÆlo˚r
, 
ªÆlo˚r_t
 
ªÆlo˚r
, 
‰ìr_t
 
‰ìr
Ë
poﬁ_nŸhrow
 {

103 
	`gë_ö°™˚
().
_mÆloc
 = 
mÆlo˚r
;

104 
	`gë_ö°™˚
().
_‰ì
 = 
‰ìr
;

105 
	`gë_ö°™˚
().
_ªÆloc
 = 
ªÆlo˚r
;

109 
ölöe
 * 
	$Æloˇã
(
size_t
 
size
Ë
poﬁ_nŸhrow
 {

110 
	`MEMPOOL_DEBUG
("Rëurög mÆlo˚d mem‹y:" << 
size
 << " bytes");

111  
	`gë_ö°™˚
().
	`_mÆloc
(
size
);

112 
	}
}

115 
ölöe
 
	$dóŒoˇã
(* 
±r
Ë
poﬁ_nŸhrow
 {

116 
	`MEMPOOL_DEBUG
("Fªeög mÆlo˚d mem‹y: " << 
±r
);

117 
	`gë_ö°™˚
().
	`_‰ì
(
±r
);

118 
	}
}

120 
ölöe
 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
size
Ë
poﬁ_nŸhrow
 {

121 
	`MEMPOOL_DEBUG
("RóŒoˇtög mem‹y: " << 
±r
 << "Åÿ" << 
size
 << " bytes");

122  
	`gë_ö°™˚
().
	`_ªÆloc
(
±r
, 
size
);

123 
	}
}

124 
	g¥iv©e
:

126 
ölöe
 
mempoﬁ_ˇŒbacks
 & 
	$gë_ö°™˚
(Ë
poﬁ_nŸhrow
 {

127 
mempoﬁ_ˇŒbacks
 
	`_sögÀ
(
°d
::
mÆloc
, std::
ªÆloc
, std::
‰ì
);

128  
_sögÀ
;

129 
	}
}

132 
ölöe
 
	$mempoﬁ_ˇŒbacks
(
mÆlo˚r_t
 
mÆlo˚r
, 
ªÆlo˚r_t
 
ªÆlo˚r
, 
‰ìr_t
 
‰ìr
) :

133 
	`_mÆloc
(
mÆlo˚r
),

134 
	`_‰ì
(
‰ìr
),

135 
	$_ªÆloc
(
ªÆlo˚r
){

136 
	}
}

139 
	gmempoﬁ_ˇŒbacks
 & 
	g›î©‹
 = (c⁄° 
mempoﬁ_ˇŒbacks
 & 
Ÿhî
);

140 
mempoﬁ_ˇŒbacks
(c⁄° mempoﬁ_ˇŒback†& 
Ÿhî
);

143 
mÆlo˚r_t
 
	g_mÆloc
;

144 
ªÆlo˚r_t
 
	g_ªÆloc
;

145 
‰ìr_t
 
	g_‰ì
;

149 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gsize
>

150 
˛ass
 
	gobje˘_mem‹y_poﬁ
;

152 
	gãm∂©e
 <
size_t
 
	gbyãs
, size_à
	gsize
>

153 ˛as†
	cmem‹y_poﬁ_no_fuŒÊag
 {

154 
	mpublic
:

155 
mem‹y_poﬁ_no_fuŒÊag
<
byãs
, 
	msize
>():

156 
_lök
(
NULL
),

157 
cuºít
(0),

158 
dïth
(0),

159 
thªshﬁd
((
size_t
)(()
size
 * (
MEMPOOL_OVERFLOW
))),

160 
mem‹yPoﬁ_íd
(
mem‹yPoﬁ_°¨t
 + (
size
 * 
byãs
)),

161 
u£d_íd
(
u£d_°¨t
 + 
size
),

162 
	$ru¬ögPoöãr
(
u£d_°¨t
)

164 
°d
::
	`mem£t
(
u£d_°¨t
, 0, 
size
 * (
boﬁ
));

167 
vútuÆ
 ~
	$mem‹y_poﬁ_no_fuŒÊag
(){

168 i‡(
_lök
){

169 
_lök
 -> ~
	`mem‹y_poﬁ_no_fuŒÊag
();

170 
mempoﬁ_ˇŒbacks
::
	`dóŒoˇã
(
_lök
);

172 
	}
}

174 
ölöe
 
size_t
 
	$lﬂd
(Ëc⁄° 
poﬁ_nŸhrow
 {

175  
cuºít
;

176 
	}
}

178 
ölöe
 * 
	$Æloˇã
(Ë
poﬁ_hŸ
 {

179 i‡(* 
ªs
 = 
	`Æloˇã_noÁŒback
()){

180  
ªs
;

182  
	`_lök_Æloˇã
();

183 
	}
}

185 
ölöe
 
	$dóŒoˇã
(* 
±r
Ë
poﬁ_hŸ
 {

186 i‡(
mem‹y_poﬁ_no_fuŒÊag
<
byãs
, 
size
> * 
c⁄èöî
 = 
	`c⁄èös
(
±r
)){

187 
c⁄èöî
 -> 
	`dóŒoˇã_noÁŒback
(
±r
);

189 
mempoﬁ_ˇŒbacks
::
	`dóŒoˇã
(
±r
);

191 
	}
}

193 * 
	$Æloˇã_noÁŒback
(Ë
poﬁ_hŸ
 {

194 i‡(!(*
ru¬ögPoöãr
)Ë 
	`_ªtu∫_cuºít
();

195 i‡(++
ru¬ögPoöãr
 >
u£d_íd
Ëru¬ögPoöã∏
u£d_°¨t
;

196 i‡(
cuºít
 < 
thªshﬁd
){

198 c⁄° 
boﬁ
 * 
posôi⁄
 = 
ru¬ögPoöãr
;

200 i‡(!(*
ru¬ögPoöãr
)Ë 
	`_ªtu∫_cuºít
();

201 i‡(++
ru¬ögPoöãr
 >
u£d_íd
Ëru¬ögPoöã∏
u£d_°¨t
;

202 } 
posôi⁄
 !
ru¬ögPoöãr
);

203 
	`MEMPOOL_ASSERT2
(
Ál£
, "GotÅo impossible codeÜocation");

206 
	`MEMPOOL_DEBUG
("ReturingÇull");

207  
NULL
;

208 
	}
}

210 
	$dóŒoˇã_noÁŒback
(* 
±r
Ë
poﬁ_hŸ
 {

211 
	`MEMPOOL_ASSERT2
(
cuºít
, "currentÇotÖositive");

212 --
cuºít
;

213 
	`MEMPOOL_DEBUG
("Fªeög slŸ " << ((*)
±r
 - 
mem‹yPoﬁ_°¨t
Ë/ 
byãs
);

214 
	`MEMPOOL_DEBUG
("Öoöãr=" << 
±r
);

215 
	`MEMPOOL_ASSERT2
((((*)
±r
 - 
mem‹yPoﬁ_°¨t
Ë/ 
byãs
Ë< 
size
, "Freeing slot " << (((*)ptr - memoryPool_start) / bytes) << " ináÖool with only " << size << " items");

216 
	`MEMPOOL_ASSERT2
(
u£d_°¨t
[((*)
±r
 - 
mem‹yPoﬁ_°¨t
Ë/ 
byãs
], "Freeing " <<Ötr << "ánd it'sálready been freed");

217 
u£d_°¨t
[(((*)
±r
 - 
mem‹yPoﬁ_°¨t
Ë/ 
byãs
)] = 
Ál£
;

218 
	}
}

220 
ölöe
 
	gmem‹y_poﬁ_no_fuŒÊag
<
	gbyãs
, 
	gsize
> * 
	$c⁄èös
(* 
±r
Ë
poﬁ_hŸ
 {

221 i‡((
±r
 >
mem‹yPoﬁ_°¨t
Ë&& (±∏< 
mem‹yPoﬁ_íd
)Ë 
this
;

222  (
_lök
Ë? _lök -> 
	`c⁄èös
(
±r
Ë: 
NULL
;

223 
	}
}

225 #ifde‡
MEMPOOL_PERFORMANCE_DEBUGGING


226 c⁄° * c⁄° 
	$gëName
(){  "mem‹y_poﬁ_no_fuŒÊag"; 
	}
}

228 c⁄° * 
	$gëDïth
(){

229 c⁄° * 
dïths
[15] = {

246 i‡(
dïth
 > 14Ë 
dïths
[14];

247  
dïths
[
dïth
];

248 
	}
}

250 
	g°d
::
°rög
 
	$dump
(){

251 
°d
::
°rög°ªam
 
ouçut
;

252 
ouçut
 << 
	`gëDïth
(Ë<< 
	`gëName
(Ë<< "<" << 
byãs
 << ", " << 
size
 << ">: " << (*)
this
 << 
°d
::
ídl
;

253 
ouçut
 << 
	`gëDïth
(Ë<< "Cuºíéy hﬁdög: " << 
cuºít
 << " iãms." << 
°d
::
ídl
;

255 
ouçut
 << 
	`gëDïth
() << "+";

256 
i
 = 0; i < 78; ++i){

257 
ouçut
 << "_";

259 
ouçut
 << "+" << 
°d
::
ídl
 << 
	`gëDïth
() << "|";

262 
i
;

263 
i
 = 0; i < 
size
; ++i){

264 i‡((
i
 % 80 == 0) && (i != 0)){

265 
ouçut
 << "|" << 
°d
::
ídl
 << 
	`gëDïth
() << "|";

267 i‡(
i
 =(
ru¬ögPoöãr
 - 
u£d_°¨t
)){

268 i‡(
u£d_°¨t
[
i
]){

269 
ouçut
 << "R";

271 
ouçut
 << "P";

273 } i‡(
u£d_°¨t
[
i
]){

274 
ouçut
 << "X";

276 
ouçut
 << " ";

280 ; (
i
 % 80) != 0; ++i){

281 
ouçut
 << "+";

285 
ouçut
 << 
	`gëDïth
() << "+";

286 
i
 = 0; i < 78; ++i){

287 
ouçut
 << "-";

289 
ouçut
 << "+";

290 i‡(
_lök
){

291 
ouçut
 << "----+" << 
°d
::
ídl
;

293  
ouçut
.
	`°r
();

294 
	}
}

296 
	g¥Ÿe˘ed
:

298 
mem‹y_poﬁ_no_fuŒÊag
 & 
›î©‹
 = (c⁄° mem‹y_poﬁ_no_fuŒÊag & 
Ÿhî
);

299 
mem‹y_poﬁ_no_fuŒÊag
(c⁄° mem‹y_poﬁ_no_fuŒÊag & 
Ÿhî
);

301 
ölöe
 * 
	$_ªtu∫_cuºít
(Ë
poﬁ_hŸ
 {

302 *
ru¬ögPoöãr
 = 
åue
;

303 ++
cuºít
;

304 
	`MEMPOOL_DEBUG
("Rëu∫ög slŸ " << 
ru¬ögPoöãr
 - 
u£d_°¨t
 << "áàdïth " << 
dïth
);

305 
	`MEMPOOL_DEBUG
(" mem‹yPoﬁ_°¨t=" << (*)
mem‹yPoﬁ_°¨t
);

306 
	`MEMPOOL_DEBUG
(" mem‹yPoﬁ_íd =" << (*)
mem‹yPoﬁ_íd
);

307 
	`MEMPOOL_DEBUG
("Ñëu∫ vÆuê =" << (*)(
mem‹yPoﬁ_°¨t
 + ((
ru¬ögPoöãr
 - 
u£d_°¨t
Ë* 
byãs
)));

308 
	`MEMPOOL_ASSERT2
(((
mem‹yPoﬁ_°¨t
 + ((
ru¬ögPoöãr
 - 
u£d_°¨t
Ë* 
byãs
))Ë< 
mem‹yPoﬁ_íd
, "ReturningÖointer outsideÅhe highÉnd ofÅheÖool");

309 
	`MEMPOOL_ASSERT2
(((
mem‹yPoﬁ_°¨t
 + ((
ru¬ögPoöãr
 - 
u£d_°¨t
Ë* 
byãs
))) >= memoryPool_start, "ReturningÖointer outsideÅheÜowÉnd ofÅheÖool");

310 c⁄° 
boﬁ
 * c⁄° 
¥e
 = 
ru¬ögPoöãr
;

311 i‡(++
ru¬ögPoöãr
 >
u£d_íd
Ëru¬ögPoöã∏
u£d_°¨t
;

312  
mem‹yPoﬁ_°¨t
 + ((
¥e
 - 
u£d_°¨t
Ë* 
byãs
);

313 
	}
}

315 * 
	$_lök_Æloˇã
(Ë
poﬁ_nŸhrow
 {

316 i‡(
dïth
 >
MEMPOOL_FALLBACK_DEPTH
Ë 
mempoﬁ_ˇŒbacks
::
	`Æloˇã
(
byãs
);

317 i‡(!
_lök
){

318 
_lök
 = 
	`√w
(
mempoﬁ_ˇŒbacks
::
	`Æloˇã
((
mem‹y_poﬁ_no_fuŒÊag
<
byãs
, 
size
>))) memory_pool_no_fullflag<bytes, size>();

319 
_lök
 -> 
dïth
 = depth + 1;

321  
_lök
 -> 
	`Æloˇã
();

322 
	}
}

324 
size_t
 
	gcuºít
;

325 
size_t
 
	gthªshﬁd
;

326 
	gmem‹yPoﬁ_°¨t
[
size
 * 
byãs
];

327 * 
	gmem‹yPoﬁ_íd
;

328 
boﬁ
 
	gu£d_°¨t
[
size
];

329 
boﬁ
 * 
	gu£d_íd
;

330 
boﬁ
 * 
	gru¬ögPoöãr
;

331 
	gmem‹y_poﬁ_no_fuŒÊag
<
	gbyãs
, 
	gsize
> * 
	g_lök
;

332 
size_t
 
	gdïth
;

335 
	gãm∂©e
 <
size_t
 
	gbyãs
, size_à
	gsize
>

336 
˛ass
 
	gmem‹y_poﬁ
 : 
public
 
mem‹y_poﬁ_no_fuŒÊag
<
byãs
, 
	gsize
> {

337 
	gpublic
:

338 
mem‹y_poﬁ
<
byãs
, 
	gsize
>() :

339 
mem‹y_poﬁ_no_fuŒÊag
<
byãs
, 
	gsize
>(),

340 
_fuŒ
(
Ál£
){}

342 
	gvútuÆ
 ~
mem‹y_poﬁ
(){}

344 
ölöe
 * 
Æloˇã
(Ë
	gpoﬁ_hŸ
 {

345 i‡(
	g_fuŒ
Ë 
	gmempoﬁ_ˇŒbacks
::
Æloˇã
(
byãs
);

346  
	gmem‹y_poﬁ_no_fuŒÊag
<
	gbyãs
, 
	gsize
>::
Æloˇã
();

349 
ölöe
 
dóŒoˇã
(* 
±r
Ë
	gpoﬁ_hŸ
 {

350 
	g_fuŒ
 = 
Ál£
;

351  
	gmem‹y_poﬁ_no_fuŒÊag
<
	gbyãs
, 
	gsize
>::
dóŒoˇã
(
±r
);

354 #ifde‡
MEMPOOL_PERFORMANCE_DEBUGGING


355 c⁄° * c⁄° 
gëName
(){  "memory_pool"; }

357 
	g¥iv©e
:

359 
mem‹y_poﬁ
 & 
›î©‹
 = (c⁄° mem‹y_poﬁ & 
Ÿhî
);

360 
mem‹y_poﬁ
(c⁄° mem‹y_poﬁ & 
Ÿhî
);

362 
boﬁ
 
	g_fuŒ
;

364 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gs
> 
‰õnd
 
˛ass
 
	gobje˘_mem‹y_poﬁ
;

369 
	#√w_obje˘
(
poﬁ
, 
˘‹
Ë
	`√w
 (poﬁ.
	`Æloˇã_no˘‹
()) ctor

370 
ãm∂©e
 <
ty≥«me
 
T
, 
size_t
 
size
>

	)

371 ˛as†
	cobje˘_mem‹y_poﬁ
 {

372 
	mpublic
:

373 
ölöe
 
size_t
 
	$lﬂd
(Ëc⁄° 
poﬁ_nŸhrow
 {

374  
_poﬁ
.
	`lﬂd
();

377 
vútuÆ
 ~
	$obje˘_mem‹y_poﬁ
(Ë
poﬁ_nŸhrow
 { 
	}
}

379 
ölöe
 
T
 * 
	$Æloˇã
(Ë
poﬁ_hŸ
 {  
	`√w
 (
_poﬁ
.
	`Æloˇã
()Ë
	`T
(); 
	}
}

380 
ölöe
 * 
	$Æloˇã_no˘‹
(Ë
poﬁ_nŸhrow
 {  
_poﬁ
.
	`Æloˇã
(); 
	}
}

382 
ölöe
 
	$dóŒoˇã
(
T
 * 
±r
Ë
poﬁ_hŸ
 {

383 
±r
 -> ~
	`T
();

384 
_poﬁ
.
	`dóŒoˇã
(
±r
);

385 
	}
}

387 
ölöe
 
	gmem‹y_poﬁ
<(
	gT
), 
	gsize
> * 
	$c⁄èös
(
T
 * 
±r
Ëc⁄° 
poﬁ_hŸ
 {

388  
_poﬁ
.
	`c⁄èös
((*)
±r
);

389 
	}
}

391 
ölöe
 
T
 * 
	$Æloc_noÁŒback
(Ë
poﬁ_hŸ
 {

392 i‡(* 
ªs
 = 
_poﬁ
.
	`Æloˇã_noÁŒback
()){

393  
	`√w
 (
ªs
Ë
	`T
();

395  
NULL
;

396 
	}
}

398 
ölöe
 
	$dóŒoˇã_noÁŒback
(
T
 * 
±r
Ë
poﬁ_hŸ
 {

399 
±r
 -> ~
	`T
();

400 
_poﬁ
.
	`dóŒoˇã_noÁŒback
(
±r
);

401 
	}
}

402 #ifde‡
MEMPOOL_PERFORMANCE_DEBUGGING


403 c⁄° 
	g°d
::
°rög
 
	$dump
(){  
_poﬁ
.
	`dump
(); 
	}
}

405 
	g¥iv©e
:

406 
mem‹y_poﬁ
<(
T
), 
	gsize
> 
	g_poﬁ
;

410 
	#MEMPOOL_TEMPLATE_PAIR
(
x
Ë
size_t
 
byãs
 ## x , size_à
cou¡
 ## 
	)
x

411 
	#MEMPOOL_ALLOC_CHECK
(
x
Ëi‡(
byãs
 <byã†## x ){ i‡(* 
ªs
 = (
_poﬁ
 ## x).
	`Æloˇã_noÁŒback
()ËÑes; }

	)

412 
	#MEMPOOL_DEALLOC_CHECK
(
x
Ëi‡(
mem‹y_poﬁ_no_fuŒÊag
< 
byãs
 ## x , 
cou¡
 ## x > * 
c⁄èöî
 = (
_poﬁ
 ## x).
	`c⁄èös
(
±r
)){ c⁄èöî -> 
	`dóŒoˇã_noÁŒback
’å); ; }

	)

413 
	#MEMPOOL_MEMBER_POOL
(
x
Ë
mem‹y_poﬁ
< 
byãs
 ## x , 
cou¡
 ## x > 
_poﬁ
 ## x;

	)

415 
	#MEMPOOL_REALLOC_CHECK
(
x
)\

416 i‡(
mem‹y_poﬁ_no_fuŒÊag
< 
byãs
 ## 
x
 , 
cou¡
 ## x > * 
c⁄èöî
 = (
_poﬁ
 ## x).
	`c⁄èös
(
±r
)){\

417 i‡(
byãs
 <byã†## 
x
Ë 
±r
;\

418 * 
√wvÆue
 = 
	`Æloˇã
(
byãs
);\

419 
°d
::
	`mem˝y
(
√wvÆue
, 
±r
, 
byãs
 ## 
x
);\

420 
c⁄èöî
 -> 
	`dóŒoˇã_noÁŒback
(
±r
);\

421  
√wvÆue
;\

422 }

	)

425 #ifde‡
MEMPOOL_DETERMINE_DISTRIBUTION


426 
	~<m≠
>

427 
	~<io°ªam
>

428 
	#MEMPOOL_ALLOC_METHOD
(
numbî
, 
code
)\

429 
buckë_poﬁ_
 ## 
	`numbî
 (Ë: 
	`_¥ofûe_⁄_dñëe
(0) { }\

430 ~
buckë_poﬁ_
 ## 
	`numbî
 () { \

431 i‡(
_¥ofûe_⁄_dñëe
){ \

432 
	`dump_©⁄˚
(
_¥ofûe_⁄_dñëe
, _profile_on_delete / 40); \

433 
	`dump_ãm∂©e
(
_¥ofûe_⁄_dñëe
); \

436 * 
	`Æloˇã
(
size_t
 
byãs
Ë
poﬁ_hŸ
 {\

437 i‡(
m≠pög
.
	`föd
(
byãs
Ë!m≠pög.
	`íd
()){\

438 ++
m≠pög
[
byãs
];\

439 ++
cuºít_m≠pög
[
byãs
];\

440 i‡(
cuºít_m≠pög
[
byãs
] > 
max_m≠pög
[bytes]) max_mapping[bytes] = current_mapping[bytes];\

442 
m≠pög
[
byãs
] = 1;\

443 
max_m≠pög
[
byãs
] = 1;\

444 
cuºít_m≠pög
[
byãs
] = 1;\

446 * 
ªs
 = 
mempoﬁ_ˇŒbacks
::
	`Æloˇã
(
byãs
);\

447 
mem_m≠pög
[
ªs
] = 
byãs
;\

448  
ªs
;\

449 }

	)

450 
	#MEMPOOL_DEALLOC_METHOD
(
code
)\

451 
	`dóŒoˇã
(* 
±r
Ë
poﬁ_hŸ
 {\

452 --
cuºít_m≠pög
[
mem_m≠pög
[
±r
]];\

453 
mem_m≠pög
.
	`îa£
(
±r
);\

454 
mempoﬁ_ˇŒbacks
::
	`dóŒoˇã
(
±r
);\

455 }

	)

457 
	#MEMPOOL_ANALYZERS
(
ma¸o_cou¡
)\

458 
ölöe
 
size_t
 
	`_max
(size_à
⁄e
, size_à
two
){  (one >Åwo) ? one :Åwo; }\

459 
	`dump_tŸÆ
(
size_t
 
max
, size_à
£p
 = 16, size_à
éí
 = 30){\

460 
°d
::
cout
 << "-------- TŸÆ --------" << std::
ídl
;\

461 
size_t
 
max_amou¡
 = 0;\

462 
size_t
 
i
 = 0; i < 
max
;){\

463 
size_t
 
amou¡
 = 0;\

464 
size_t
 
j
 = 0; j < 
£p
; ++j, ++
i
){\

465 i‡(
m≠pög
.
	`föd
(
i
Ë!m≠pög.
	`íd
()){\

466 
amou¡
 +
m≠pög
[
i
];\

469 i‡(
amou¡
 > 
max_amou¡
) max_amount =ámount;\

471 
sˇœr
 = (()
max_amou¡
Ë/ (()
éí
);\

473 
size_t
 
i
 = 0; i < 
max
;){\

474 
size_t
 
amou¡
 = 0;\

475 
size_t
 
j
 = 0; j < 
£p
; ++j, ++
i
){\

476 i‡(
m≠pög
.
	`föd
(
i
Ë!m≠pög.
	`íd
()){\

477 
amou¡
 +
m≠pög
[
i
];\

481 i‡(
i
 < 10Ë
°d
::
cout
 << ' ';\

482 i‡(
i
 < 100Ë
°d
::
cout
 << ' ';\

483 i‡(
i
 < 1000Ë
°d
::
cout
 << ' ';\

484 i‡(
i
 < 10000Ë
°d
::
cout
 << ' ';\

485 
°d
::
cout
 << 
i
 << ':';\

487 
size_t
 
j
 = 0; j < (size_t)(()
amou¡
 / 
sˇœr
); ++j){\

488 
°d
::
cout
 << '*';\

490 
°d
::
cout
 << '(' << 
amou¡
 << ')' << std::
ídl
;\

494 
	`dump_©⁄˚
(
size_t
 
max
, size_à
£p
 = 16, size_à
éí
 = 30){\

495 
°d
::
cout
 << "------ Di°ributi⁄ f‹ \"" << 
_°r
 << "\" ------" << std::
ídl
;\

496 
size_t
 
max_amou¡
 = 0;\

497 
size_t
 
i
 = 0; i < 
max
;){\

498 
size_t
 
amou¡
 = 0;\

499 
size_t
 
j
 = 0; j < 
£p
; ++j, ++
i
){\

500 i‡(
max_m≠pög
.
	`föd
(
i
Ë!max_m≠pög.
	`íd
()){\

501 
amou¡
 +
max_m≠pög
[
i
];\

504 i‡(
amou¡
 > 
max_amou¡
) max_amount =ámount;\

506 
sˇœr
 = (()
max_amou¡
Ë/ (()
éí
);\

508 
size_t
 
i
 = 0; i < 
max
;){\

509 
size_t
 
amou¡
 = 0;\

510 
size_t
 
j
 = 0; j < 
£p
; ++j, ++
i
){\

511 i‡(
max_m≠pög
.
	`föd
(
i
Ë!max_m≠pög.
	`íd
()){\

512 
amou¡
 +
max_m≠pög
[
i
];\

516 i‡(
i
 < 10Ë
°d
::
cout
 << ' ';\

517 i‡(
i
 < 100Ë
°d
::
cout
 << ' ';\

518 i‡(
i
 < 1000Ë
°d
::
cout
 << ' ';\

519 i‡(
i
 < 10000Ë
°d
::
cout
 << ' ';\

520 
°d
::
cout
 << 
i
 << ':';\

522 
size_t
 
j
 = 0; j < (size_t)(()
amou¡
 / 
sˇœr
); ++j){\

523 
°d
::
cout
 << '*';\

525 
°d
::
cout
 << '(' << 
amou¡
 << ')' << std::
ídl
;\

529 
	`dump_ãm∂©e
(
size_t
 
max
){\

530 
°d
::
cout
 << "Recommíded Tem∂©êf‹ \"" << 
_°r
 << "\" = ";\

531 
size_t
 
tŸÆ_©_⁄˚
 = 0;\

532 
size_t
 
highe°
 = 0;\

533 
size_t
 
i
 = 0; i < 
max
; ++i){\

534 i‡(
max_m≠pög
.
	`föd
(
i
Ë!max_m≠pög.
	`íd
()){\

535 
tŸÆ_©_⁄˚
 +
max_m≠pög
[
i
];\

536 
highe°
 = 
i
;\

540 
size_t
 
cou¡
 = 0;\

541 
size_t
 
tŸÆ_©_⁄˚_∑π
 = 
tŸÆ_©_⁄˚
 / 
ma¸o_cou¡
;\

542 
size_t
 
cuºít
 = 0;\

543 
size_t
 
tŸÆsoÁr
 = 0;\

544 
°d
::
cout
 << '<';\

545 
size_t
 
i
 = 0; ((ò< 
max
Ë&& (
cou¡
 < (
ma¸o_cou¡
 -1))); ++i){\

546 i‡(
max_m≠pög
.
	`föd
(
i
Ë!max_m≠pög.
	`íd
()){\

547 
cuºít
 +
max_m≠pög
[
i
];\

548 
tŸÆsoÁr
 +
max_m≠pög
[
i
];\

549 i‡(
cuºít
 > 
tŸÆ_©_⁄˚_∑π
){\

550 
°d
::
cout
 << (
i
 - 1Ë<< ", " << (
size_t
)((()
cuºít
 - 
max_m≠pög
[i]Ë* (
MEMPOOL_DETERMINE_SCALAR
)) << ", ";\

551 
cuºít
 = 
max_m≠pög
[
i
];\

552 ++
cou¡
;\

556 
°d
::
cout
 << 
max
 << ", " << 
	`_max
((
size_t
)(()(
tŸÆ_©_⁄˚
 - 
tŸÆsoÁr
Ë* (
MEMPOOL_DETERMINE_SCALAR
)), 
tŸÆ_©_⁄˚_∑π
 / 2Ë<< '>' << std::
ídl
;\

559 
ölöe
 
	`¥ofûe_⁄_dñëe
(
size_t
 
v¨
, c⁄° 
°d
::
°rög
 & 
°r
){ 
_¥ofûe_⁄_dñëe
 = v¨; 
_°r
 = så; }

	)

561 
	#MEMPOOL_MEMBERS
(
code
)\

562 
°d
::
m≠
<
size_t
, size_t> 
m≠pög
;\

563 
°d
::
m≠
<
size_t
, size_t> 
cuºít_m≠pög
;\

564 
°d
::
m≠
<
size_t
, size_t> 
max_m≠pög
;\

565 
°d
::
m≠
<*, 
size_t
> 
mem_m≠pög
;\

566 
size_t
 
_¥ofûe_⁄_dñëe
;\

567 
°d
::
°rög
 
_°r
;

	)

568 
	#MEMPOOL_LOAD
(
numbî
, 
code
Ë
ölöe
 
size_t
 * 
	`lﬂd
(Ëc⁄° 
poﬁ_nŸhrow
 { size_à
_lﬂd
[numbî] = {0};  &_lﬂd[0]; }

	)

570 
	#MEMPOOL_ALLOC_METHOD
(
numbî
, 
code
)\

571 * 
	`Æloˇã
(
size_t
 
byãs
Ë
poﬁ_hŸ
 {\

572 
code
\

573  
mempoﬁ_ˇŒbacks
::
	`Æloˇã
(
byãs
);\

574 }

	)

575 
	#MEMPOOL_DEALLOC_METHOD
(
code
)\

576 
	`dóŒoˇã
(* 
±r
Ë
poﬁ_hŸ
 {\

577 
code
\

578 
mempoﬁ_ˇŒbacks
::
	`dóŒoˇã
(
±r
);\

579 }

	)

580 
	#MEMPOOL_ANALYZERS
(
ma¸o_cou¡
)

	)

581 
	#MEMPOOL_MEMBERS
(
code
Ë
	)
code

582 
	#MEMPOOL_LOAD
(
numbî
, 
code
Ë
ölöe
 
size_t
 * 
	`lﬂd
(Ëc⁄° 
poﬁ_nŸhrow
 { size_à
_lﬂd
[numbî]; codê &_lﬂd[0]; }

	)

585 
	gãm∂©e
<

586 
MEMPOOL_TEMPLATE_PAIR
(1),

587 
MEMPOOL_TEMPLATE_PAIR
(2)>

588 ˛as†
	cbuckë_poﬁ_2
 {

589 
	mpublic
:

590 
MEMPOOL_ALLOC_METHOD
(

592 
	$MEMPOOL_ALLOC_CHECK
(1)

593 
	$MEMPOOL_ALLOC_CHECK
(2)

595 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

596 
	`MEMPOOL_REALLOC_CHECK
(1)

597 
	`MEMPOOL_REALLOC_CHECK
(2)

599 
	`MEMPOOL_LOAD
(

601 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

602 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

604 
	`MEMPOOL_DEALLOC_METHOD
(

605 
	$MEMPOOL_DEALLOC_CHECK
(1)

606 
	$MEMPOOL_DEALLOC_CHECK
(2)

608 
	$MEMPOOL_ANALYZERS
(2)

609 
¥iv©e
:

610 
	`MEMPOOL_MEMBERS
(

611 
	$MEMPOOL_MEMBER_POOL
(1)

612 
	`MEMPOOL_MEMBER_POOL
(2)

614 
	}
};

616 
	gãm∂©e
<

617 
MEMPOOL_TEMPLATE_PAIR
(1),

618 
MEMPOOL_TEMPLATE_PAIR
(2),

619 
MEMPOOL_TEMPLATE_PAIR
(3)>

620 ˛as†
	cbuckë_poﬁ_3
 {

621 
	mpublic
:

622 
MEMPOOL_ALLOC_METHOD
(

624 
	$MEMPOOL_ALLOC_CHECK
(1)

625 
	$MEMPOOL_ALLOC_CHECK
(2)

626 
	$MEMPOOL_ALLOC_CHECK
(3)

628 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

629 
	`MEMPOOL_REALLOC_CHECK
(1)

630 
	`MEMPOOL_REALLOC_CHECK
(2)

631 
	`MEMPOOL_REALLOC_CHECK
(3)

632  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

634 
	`MEMPOOL_LOAD
(

636 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

637 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

638 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

640 
	`MEMPOOL_DEALLOC_METHOD
(

641 
	$MEMPOOL_DEALLOC_CHECK
(1)

642 
	$MEMPOOL_DEALLOC_CHECK
(2)

643 
	$MEMPOOL_DEALLOC_CHECK
(3)

645 
	$MEMPOOL_ANALYZERS
(3)

646 
¥iv©e
:

647 
	`MEMPOOL_MEMBERS
(

648 
	$MEMPOOL_MEMBER_POOL
(1)

649 
	$MEMPOOL_MEMBER_POOL
(2)

650 
	`MEMPOOL_MEMBER_POOL
(3)

652 
	}
};

654 
	gãm∂©e
<

655 
MEMPOOL_TEMPLATE_PAIR
(1),

656 
MEMPOOL_TEMPLATE_PAIR
(2),

657 
MEMPOOL_TEMPLATE_PAIR
(3),

658 
MEMPOOL_TEMPLATE_PAIR
(4)>

659 ˛as†
	cbuckë_poﬁ_4
 {

660 
	mpublic
:

661 
MEMPOOL_ALLOC_METHOD
(

663 
	$MEMPOOL_ALLOC_CHECK
(1)

664 
	$MEMPOOL_ALLOC_CHECK
(2)

665 
	$MEMPOOL_ALLOC_CHECK
(3)

666 
	$MEMPOOL_ALLOC_CHECK
(4)

668 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

669 
	`MEMPOOL_REALLOC_CHECK
(1)

670 
	`MEMPOOL_REALLOC_CHECK
(2)

671 
	`MEMPOOL_REALLOC_CHECK
(3)

672 
	`MEMPOOL_REALLOC_CHECK
(4)

673  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

675 
	`MEMPOOL_LOAD
(

677 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

678 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

679 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

680 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

682 
	`MEMPOOL_DEALLOC_METHOD
(

683 
	$MEMPOOL_DEALLOC_CHECK
(1)

684 
	$MEMPOOL_DEALLOC_CHECK
(2)

685 
	$MEMPOOL_DEALLOC_CHECK
(3)

686 
	$MEMPOOL_DEALLOC_CHECK
(4)

688 
	$MEMPOOL_ANALYZERS
(4)

689 
¥iv©e
:

690 
	`MEMPOOL_MEMBERS
(

691 
	$MEMPOOL_MEMBER_POOL
(1)

692 
	$MEMPOOL_MEMBER_POOL
(2)

693 
	$MEMPOOL_MEMBER_POOL
(3)

694 
	`MEMPOOL_MEMBER_POOL
(4)

696 
	}
};

698 
	gãm∂©e
<

699 
MEMPOOL_TEMPLATE_PAIR
(1),

700 
MEMPOOL_TEMPLATE_PAIR
(2),

701 
MEMPOOL_TEMPLATE_PAIR
(3),

702 
MEMPOOL_TEMPLATE_PAIR
(4),

703 
MEMPOOL_TEMPLATE_PAIR
(5)>

704 ˛as†
	cbuckë_poﬁ_5
 {

705 
	mpublic
:

706 
MEMPOOL_ALLOC_METHOD
(

708 
	$MEMPOOL_ALLOC_CHECK
(1)

709 
	$MEMPOOL_ALLOC_CHECK
(2)

710 
	$MEMPOOL_ALLOC_CHECK
(3)

711 
	$MEMPOOL_ALLOC_CHECK
(4)

712 
	$MEMPOOL_ALLOC_CHECK
(5)

714 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

715 
	`MEMPOOL_REALLOC_CHECK
(1)

716 
	`MEMPOOL_REALLOC_CHECK
(2)

717 
	`MEMPOOL_REALLOC_CHECK
(3)

718 
	`MEMPOOL_REALLOC_CHECK
(4)

719 
	`MEMPOOL_REALLOC_CHECK
(5)

720  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

722 
	`MEMPOOL_LOAD
(

724 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

725 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

726 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

727 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

728 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

730 
	`MEMPOOL_DEALLOC_METHOD
(

731 
	$MEMPOOL_DEALLOC_CHECK
(1)

732 
	$MEMPOOL_DEALLOC_CHECK
(2)

733 
	$MEMPOOL_DEALLOC_CHECK
(3)

734 
	$MEMPOOL_DEALLOC_CHECK
(4)

735 
	$MEMPOOL_DEALLOC_CHECK
(5)

737 
	$MEMPOOL_ANALYZERS
(5)

738 
¥iv©e
:

739 
	`MEMPOOL_MEMBERS
(

740 
	$MEMPOOL_MEMBER_POOL
(1)

741 
	$MEMPOOL_MEMBER_POOL
(2)

742 
	$MEMPOOL_MEMBER_POOL
(3)

743 
	$MEMPOOL_MEMBER_POOL
(4)

744 
	`MEMPOOL_MEMBER_POOL
(5)

746 
	}
};

748 
	gãm∂©e
<

749 
MEMPOOL_TEMPLATE_PAIR
(1),

750 
MEMPOOL_TEMPLATE_PAIR
(2),

751 
MEMPOOL_TEMPLATE_PAIR
(3),

752 
MEMPOOL_TEMPLATE_PAIR
(4),

753 
MEMPOOL_TEMPLATE_PAIR
(5),

754 
MEMPOOL_TEMPLATE_PAIR
(6)>

755 ˛as†
	cbuckë_poﬁ_6
 {

756 
	mpublic
:

757 
MEMPOOL_ALLOC_METHOD
(

759 
	$MEMPOOL_ALLOC_CHECK
(1)

760 
	$MEMPOOL_ALLOC_CHECK
(2)

761 
	$MEMPOOL_ALLOC_CHECK
(3)

762 
	$MEMPOOL_ALLOC_CHECK
(4)

763 
	$MEMPOOL_ALLOC_CHECK
(5)

764 
	$MEMPOOL_ALLOC_CHECK
(6)

766 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

767 
	`MEMPOOL_REALLOC_CHECK
(1)

768 
	`MEMPOOL_REALLOC_CHECK
(2)

769 
	`MEMPOOL_REALLOC_CHECK
(3)

770 
	`MEMPOOL_REALLOC_CHECK
(4)

771 
	`MEMPOOL_REALLOC_CHECK
(5)

772 
	`MEMPOOL_REALLOC_CHECK
(6)

773  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

775 
	`MEMPOOL_LOAD
(

777 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

778 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

779 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

780 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

781 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

782 
_lﬂd
[5] = 
_poﬁ6
.
	`lﬂd
();

784 
	`MEMPOOL_DEALLOC_METHOD
(

785 
	$MEMPOOL_DEALLOC_CHECK
(1)

786 
	$MEMPOOL_DEALLOC_CHECK
(2)

787 
	$MEMPOOL_DEALLOC_CHECK
(3)

788 
	$MEMPOOL_DEALLOC_CHECK
(4)

789 
	$MEMPOOL_DEALLOC_CHECK
(5)

790 
	$MEMPOOL_DEALLOC_CHECK
(6)

792 
	$MEMPOOL_ANALYZERS
(6)

793 
¥iv©e
:

794 
	`MEMPOOL_MEMBERS
(

795 
	$MEMPOOL_MEMBER_POOL
(1)

796 
	$MEMPOOL_MEMBER_POOL
(2)

797 
	$MEMPOOL_MEMBER_POOL
(3)

798 
	$MEMPOOL_MEMBER_POOL
(4)

799 
	$MEMPOOL_MEMBER_POOL
(5)

800 
	`MEMPOOL_MEMBER_POOL
(6)

802 
	}
};

804 
	gãm∂©e
<

805 
MEMPOOL_TEMPLATE_PAIR
(1),

806 
MEMPOOL_TEMPLATE_PAIR
(2),

807 
MEMPOOL_TEMPLATE_PAIR
(3),

808 
MEMPOOL_TEMPLATE_PAIR
(4),

809 
MEMPOOL_TEMPLATE_PAIR
(5),

810 
MEMPOOL_TEMPLATE_PAIR
(6),

811 
MEMPOOL_TEMPLATE_PAIR
(7)>

812 ˛as†
	cbuckë_poﬁ_7
 {

813 
	mpublic
:

814 
MEMPOOL_ALLOC_METHOD
(

816 
	$MEMPOOL_ALLOC_CHECK
(1)

817 
	$MEMPOOL_ALLOC_CHECK
(2)

818 
	$MEMPOOL_ALLOC_CHECK
(3)

819 
	$MEMPOOL_ALLOC_CHECK
(4)

820 
	$MEMPOOL_ALLOC_CHECK
(5)

821 
	$MEMPOOL_ALLOC_CHECK
(6)

822 
	$MEMPOOL_ALLOC_CHECK
(7)

824 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

825 
	`MEMPOOL_REALLOC_CHECK
(1)

826 
	`MEMPOOL_REALLOC_CHECK
(2)

827 
	`MEMPOOL_REALLOC_CHECK
(3)

828 
	`MEMPOOL_REALLOC_CHECK
(4)

829 
	`MEMPOOL_REALLOC_CHECK
(5)

830 
	`MEMPOOL_REALLOC_CHECK
(6)

831 
	`MEMPOOL_REALLOC_CHECK
(7)

832  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

834 
	`MEMPOOL_LOAD
(

836 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

837 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

838 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

839 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

840 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

841 
_lﬂd
[5] = 
_poﬁ6
.
	`lﬂd
();

842 
_lﬂd
[6] = 
_poﬁ7
.
	`lﬂd
();

844 
	`MEMPOOL_DEALLOC_METHOD
(

845 
	$MEMPOOL_DEALLOC_CHECK
(1)

846 
	$MEMPOOL_DEALLOC_CHECK
(2)

847 
	$MEMPOOL_DEALLOC_CHECK
(3)

848 
	$MEMPOOL_DEALLOC_CHECK
(4)

849 
	$MEMPOOL_DEALLOC_CHECK
(5)

850 
	$MEMPOOL_DEALLOC_CHECK
(6)

851 
	$MEMPOOL_DEALLOC_CHECK
(7)

853 
	$MEMPOOL_ANALYZERS
(7)

854 
¥iv©e
:

855 
	`MEMPOOL_MEMBERS
(

856 
	$MEMPOOL_MEMBER_POOL
(1)

857 
	$MEMPOOL_MEMBER_POOL
(2)

858 
	$MEMPOOL_MEMBER_POOL
(3)

859 
	$MEMPOOL_MEMBER_POOL
(4)

860 
	$MEMPOOL_MEMBER_POOL
(5)

861 
	$MEMPOOL_MEMBER_POOL
(6)

862 
	`MEMPOOL_MEMBER_POOL
(7)

864 
	}
};

866 
	gãm∂©e
<

867 
MEMPOOL_TEMPLATE_PAIR
(1),

868 
MEMPOOL_TEMPLATE_PAIR
(2),

869 
MEMPOOL_TEMPLATE_PAIR
(3),

870 
MEMPOOL_TEMPLATE_PAIR
(4),

871 
MEMPOOL_TEMPLATE_PAIR
(5),

872 
MEMPOOL_TEMPLATE_PAIR
(6),

873 
MEMPOOL_TEMPLATE_PAIR
(7),

874 
MEMPOOL_TEMPLATE_PAIR
(8)>

875 ˛as†
	cbuckë_poﬁ_8
 {

876 
	mpublic
:

877 
MEMPOOL_ALLOC_METHOD
(

879 
	$MEMPOOL_ALLOC_CHECK
(1)

880 
	$MEMPOOL_ALLOC_CHECK
(2)

881 
	$MEMPOOL_ALLOC_CHECK
(3)

882 
	$MEMPOOL_ALLOC_CHECK
(4)

883 
	$MEMPOOL_ALLOC_CHECK
(5)

884 
	$MEMPOOL_ALLOC_CHECK
(6)

885 
	$MEMPOOL_ALLOC_CHECK
(7)

886 
	$MEMPOOL_ALLOC_CHECK
(8)

888 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

889 
	`MEMPOOL_REALLOC_CHECK
(1)

890 
	`MEMPOOL_REALLOC_CHECK
(2)

891 
	`MEMPOOL_REALLOC_CHECK
(3)

892 
	`MEMPOOL_REALLOC_CHECK
(4)

893 
	`MEMPOOL_REALLOC_CHECK
(5)

894 
	`MEMPOOL_REALLOC_CHECK
(6)

895 
	`MEMPOOL_REALLOC_CHECK
(7)

896 
	`MEMPOOL_REALLOC_CHECK
(8)

897  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

899 
	`MEMPOOL_LOAD
(

901 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

902 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

903 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

904 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

905 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

906 
_lﬂd
[5] = 
_poﬁ6
.
	`lﬂd
();

907 
_lﬂd
[6] = 
_poﬁ7
.
	`lﬂd
();

908 
_lﬂd
[7] = 
_poﬁ8
.
	`lﬂd
();

910 
	`MEMPOOL_DEALLOC_METHOD
(

911 
	$MEMPOOL_DEALLOC_CHECK
(1)

912 
	$MEMPOOL_DEALLOC_CHECK
(2)

913 
	$MEMPOOL_DEALLOC_CHECK
(3)

914 
	$MEMPOOL_DEALLOC_CHECK
(4)

915 
	$MEMPOOL_DEALLOC_CHECK
(5)

916 
	$MEMPOOL_DEALLOC_CHECK
(6)

917 
	$MEMPOOL_DEALLOC_CHECK
(7)

918 
	$MEMPOOL_DEALLOC_CHECK
(8)

920 
	$MEMPOOL_ANALYZERS
(8)

921 
¥iv©e
:

922 
	`MEMPOOL_MEMBERS
(

923 
	$MEMPOOL_MEMBER_POOL
(1)

924 
	$MEMPOOL_MEMBER_POOL
(2)

925 
	$MEMPOOL_MEMBER_POOL
(3)

926 
	$MEMPOOL_MEMBER_POOL
(4)

927 
	$MEMPOOL_MEMBER_POOL
(5)

928 
	$MEMPOOL_MEMBER_POOL
(6)

929 
	$MEMPOOL_MEMBER_POOL
(7)

930 
	`MEMPOOL_MEMBER_POOL
(8)

932 
	}
};

934 
	gãm∂©e
<

935 
MEMPOOL_TEMPLATE_PAIR
(1),

936 
MEMPOOL_TEMPLATE_PAIR
(2),

937 
MEMPOOL_TEMPLATE_PAIR
(3),

938 
MEMPOOL_TEMPLATE_PAIR
(4),

939 
MEMPOOL_TEMPLATE_PAIR
(5),

940 
MEMPOOL_TEMPLATE_PAIR
(6),

941 
MEMPOOL_TEMPLATE_PAIR
(7),

942 
MEMPOOL_TEMPLATE_PAIR
(8),

943 
MEMPOOL_TEMPLATE_PAIR
(9)>

944 ˛as†
	cbuckë_poﬁ_9
 {

945 
	mpublic
:

946 
MEMPOOL_ALLOC_METHOD
(

948 
	$MEMPOOL_ALLOC_CHECK
(1)

949 
	$MEMPOOL_ALLOC_CHECK
(2)

950 
	$MEMPOOL_ALLOC_CHECK
(3)

951 
	$MEMPOOL_ALLOC_CHECK
(4)

952 
	$MEMPOOL_ALLOC_CHECK
(5)

953 
	$MEMPOOL_ALLOC_CHECK
(6)

954 
	$MEMPOOL_ALLOC_CHECK
(7)

955 
	$MEMPOOL_ALLOC_CHECK
(8)

956 
	$MEMPOOL_ALLOC_CHECK
(9)

958 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

959 
	`MEMPOOL_REALLOC_CHECK
(1)

960 
	`MEMPOOL_REALLOC_CHECK
(2)

961 
	`MEMPOOL_REALLOC_CHECK
(3)

962 
	`MEMPOOL_REALLOC_CHECK
(4)

963 
	`MEMPOOL_REALLOC_CHECK
(5)

964 
	`MEMPOOL_REALLOC_CHECK
(6)

965 
	`MEMPOOL_REALLOC_CHECK
(7)

966 
	`MEMPOOL_REALLOC_CHECK
(8)

967 
	`MEMPOOL_REALLOC_CHECK
(9)

968  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

970 
	`MEMPOOL_LOAD
(

972 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

973 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

974 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

975 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

976 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

977 
_lﬂd
[5] = 
_poﬁ6
.
	`lﬂd
();

978 
_lﬂd
[6] = 
_poﬁ7
.
	`lﬂd
();

979 
_lﬂd
[7] = 
_poﬁ8
.
	`lﬂd
();

980 
_lﬂd
[8] = 
_poﬁ9
.
	`lﬂd
();

982 
	`MEMPOOL_DEALLOC_METHOD
(

983 
	$MEMPOOL_DEALLOC_CHECK
(1)

984 
	$MEMPOOL_DEALLOC_CHECK
(2)

985 
	$MEMPOOL_DEALLOC_CHECK
(3)

986 
	$MEMPOOL_DEALLOC_CHECK
(4)

987 
	$MEMPOOL_DEALLOC_CHECK
(5)

988 
	$MEMPOOL_DEALLOC_CHECK
(6)

989 
	$MEMPOOL_DEALLOC_CHECK
(7)

990 
	$MEMPOOL_DEALLOC_CHECK
(8)

991 
	$MEMPOOL_DEALLOC_CHECK
(9)

993 
	$MEMPOOL_ANALYZERS
(9)

994 
¥iv©e
:

995 
	`MEMPOOL_MEMBERS
(

996 
	$MEMPOOL_MEMBER_POOL
(1)

997 
	$MEMPOOL_MEMBER_POOL
(2)

998 
	$MEMPOOL_MEMBER_POOL
(3)

999 
	$MEMPOOL_MEMBER_POOL
(4)

1000 
	$MEMPOOL_MEMBER_POOL
(5)

1001 
	$MEMPOOL_MEMBER_POOL
(6)

1002 
	$MEMPOOL_MEMBER_POOL
(7)

1003 
	$MEMPOOL_MEMBER_POOL
(8)

1004 
	`MEMPOOL_MEMBER_POOL
(9)

1006 
	}
};

1008 
	gãm∂©e
<

1009 
MEMPOOL_TEMPLATE_PAIR
(1),

1010 
MEMPOOL_TEMPLATE_PAIR
(2),

1011 
MEMPOOL_TEMPLATE_PAIR
(3),

1012 
MEMPOOL_TEMPLATE_PAIR
(4),

1013 
MEMPOOL_TEMPLATE_PAIR
(5),

1014 
MEMPOOL_TEMPLATE_PAIR
(6),

1015 
MEMPOOL_TEMPLATE_PAIR
(7),

1016 
MEMPOOL_TEMPLATE_PAIR
(8),

1017 
MEMPOOL_TEMPLATE_PAIR
(9),

1018 
MEMPOOL_TEMPLATE_PAIR
(10)>

1019 ˛as†
	cbuckë_poﬁ_10
 {

1020 
	mpublic
:

1021 
MEMPOOL_ALLOC_METHOD
(

1023 
	$MEMPOOL_ALLOC_CHECK
(1)

1024 
	$MEMPOOL_ALLOC_CHECK
(2)

1025 
	$MEMPOOL_ALLOC_CHECK
(3)

1026 
	$MEMPOOL_ALLOC_CHECK
(4)

1027 
	$MEMPOOL_ALLOC_CHECK
(5)

1028 
	$MEMPOOL_ALLOC_CHECK
(6)

1029 
	$MEMPOOL_ALLOC_CHECK
(7)

1030 
	$MEMPOOL_ALLOC_CHECK
(8)

1031 
	$MEMPOOL_ALLOC_CHECK
(9)

1032 
	$MEMPOOL_ALLOC_CHECK
(10)

1034 * 
	$ªÆloˇã
(* 
±r
, 
size_t
 
byãs
){

1035 
	`MEMPOOL_REALLOC_CHECK
(1)

1036 
	`MEMPOOL_REALLOC_CHECK
(2)

1037 
	`MEMPOOL_REALLOC_CHECK
(3)

1038 
	`MEMPOOL_REALLOC_CHECK
(4)

1039 
	`MEMPOOL_REALLOC_CHECK
(5)

1040 
	`MEMPOOL_REALLOC_CHECK
(6)

1041 
	`MEMPOOL_REALLOC_CHECK
(7)

1042 
	`MEMPOOL_REALLOC_CHECK
(8)

1043 
	`MEMPOOL_REALLOC_CHECK
(9)

1044 
	`MEMPOOL_REALLOC_CHECK
(10)

1045  
mempoﬁ_ˇŒbacks
::
	`ªÆloˇã
(
±r
, 
byãs
);

1047 
	`MEMPOOL_LOAD
(

1049 
_lﬂd
[0] = 
_poﬁ1
.
	`lﬂd
();

1050 
_lﬂd
[1] = 
_poﬁ2
.
	`lﬂd
();

1051 
_lﬂd
[2] = 
_poﬁ3
.
	`lﬂd
();

1052 
_lﬂd
[3] = 
_poﬁ4
.
	`lﬂd
();

1053 
_lﬂd
[4] = 
_poﬁ5
.
	`lﬂd
();

1054 
_lﬂd
[5] = 
_poﬁ6
.
	`lﬂd
();

1055 
_lﬂd
[6] = 
_poﬁ7
.
	`lﬂd
();

1056 
_lﬂd
[7] = 
_poﬁ8
.
	`lﬂd
();

1057 
_lﬂd
[8] = 
_poﬁ9
.
	`lﬂd
();

1058 
_lﬂd
[9] = 
_poﬁ10
.
	`lﬂd
();

1060 
	`MEMPOOL_DEALLOC_METHOD
(

1061 
	$MEMPOOL_DEALLOC_CHECK
(1)

1062 
	$MEMPOOL_DEALLOC_CHECK
(2)

1063 
	$MEMPOOL_DEALLOC_CHECK
(3)

1064 
	$MEMPOOL_DEALLOC_CHECK
(4)

1065 
	$MEMPOOL_DEALLOC_CHECK
(5)

1066 
	$MEMPOOL_DEALLOC_CHECK
(6)

1067 
	$MEMPOOL_DEALLOC_CHECK
(7)

1068 
	$MEMPOOL_DEALLOC_CHECK
(8)

1069 
	$MEMPOOL_DEALLOC_CHECK
(9)

1070 
	$MEMPOOL_DEALLOC_CHECK
(10)

1072 
	$MEMPOOL_ANALYZERS
(10)

1073 
¥iv©e
:

1074 
	`MEMPOOL_MEMBERS
(

1075 
	$MEMPOOL_MEMBER_POOL
(1)

1076 
	$MEMPOOL_MEMBER_POOL
(2)

1077 
	$MEMPOOL_MEMBER_POOL
(3)

1078 
	$MEMPOOL_MEMBER_POOL
(4)

1079 
	$MEMPOOL_MEMBER_POOL
(5)

1080 
	$MEMPOOL_MEMBER_POOL
(6)

1081 
	$MEMPOOL_MEMBER_POOL
(7)

1082 
	$MEMPOOL_MEMBER_POOL
(8)

1083 
	$MEMPOOL_MEMBER_POOL
(9)

1084 
	`MEMPOOL_MEMBER_POOL
(10)

1086 
	}
};

	@libjson/_internal/Source/._JSONAllocator.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONAllocator.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONChildren.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONChildren.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONDebug.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONDebug.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONDefs.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONGlobals.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONIterators.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONMemory.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONMemory.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONMemoryPool.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONNode.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONNode.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONNode_Mutex.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONPreparse.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONPreparse.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONSharedString.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONSingleton.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONStats.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONStream.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONStream.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONValidator.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONWorker.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONWorker.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSONWriter.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._JSON_Base64.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._NumberToString.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._internalJSONNode.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._internalJSONNode.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/._libjson.cpp

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/JSONAllocator.cpp

1 
	~"JSONAŒoˇt‹.h
"

3 #i‡
deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

4 
	~"JSONMem‹y.h
"

6 * 
	gJSONAŒoˇt‹Rñayî
::
	$Æloc
(
size_t
 
byãs
Ë
js⁄_nŸhrow
 {

7  
JSONMem‹y
::
	`js⁄_mÆloc
(
byãs
);

8 
	}
}

10 
	gJSONAŒoˇt‹Rñayî
::
	$dóŒoc
(* 
±r
Ë
js⁄_nŸhrow
 {

11 
JSONMem‹y
::
	`js⁄_‰ì
(
±r
);

12 
	}
}

	@libjson/_internal/Source/JSONAllocator.h

1 #i‚de‡
JSON_ALLOCATOR_H


2 
	#JSON_ALLOCATOR_H


	)

4 
	~"JSONSèts.h
"

5 #i‡
deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

7 
	~<c°ddef
>

10 
	~"JSONDefs/VisuÆ_C.h
"

11 
	~"JSONDefs/GNU_C.h
"

12 
	~"JSONDefs/Unknown_C.h
"

14 ˛as†
	cJSONAŒoˇt‹Rñayî
 {

15 
	mpublic
:

16 * 
	$Æloc
(
size_t
 
byãs
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

17 
	$dóŒoc
(* 
±r
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

20 
ãm∂©e
 <
˛ass
 
T
> cœs†
js⁄_Æloˇt‹
;

23 
ãm∂©e
 <> 
˛ass
 
js⁄_Æloˇt‹
<> {

24 
public
:

25 * 
	tpoöãr
;

26 c⁄° * 
	tc⁄°_poöãr
;

28 
	tvÆue_ty≥
;

29 
ãm∂©e
 <
˛ass
 
U
> 
	sªböd
 { 
js⁄_Æloˇt‹
<
	tU
> 
	tŸhî
; };

30 
	}
};

32 
	gãm∂©e
 <
˛ass
 
	gT
> cœs†
	cjs⁄_Æloˇt‹
 {

33 
	mpublic
:

34 
size_t
 
	tsize_ty≥
;

35 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

36 
T
* 
	tpoöãr
;

37 c⁄° 
	tT
* 
	tc⁄°_poöãr
;

38 
	mT
& 
	tª„ªn˚
;

39 c⁄° 
	tT
& 
	tc⁄°_ª„ªn˚
;

40 
T
 
	tvÆue_ty≥
;

41 
	mãm∂©e
 <
˛ass
 
	mU
> 
	sªböd
 { 
	mjs⁄_Æloˇt‹
<
	tU
> 
	tŸhî
; };

45 
ölöe
 
	$js⁄_Æloˇt‹
(Ë
js⁄_nŸhrow
 {

47 
	}
}

48 
ölöe
 
	$js⁄_Æloˇt‹
(c⁄° 
js⁄_Æloˇt‹
&Ë
js⁄_nŸhrow
 {

50 
	}
}

51 
	gãm∂©e
 <
˛ass
 
	gU
> 
ölöe
 
js⁄_Æloˇt‹
(c⁄° js⁄_Æloˇt‹<
U
>&Ë
	gjs⁄_nŸhrow
 {

54 
	gölöe
 ~
	$js⁄_Æloˇt‹
(Ë
js⁄_nŸhrow
 {

56 
	}
}

58 
ölöe
 
poöãr
 
	$addªss
(
ª„ªn˚
 
x
Ëc⁄° {  &x; 
	}
}

59 
ölöe
 
c⁄°_poöãr
 
	$addªss
(
c⁄°_ª„ªn˚
 
x
Ëc⁄° {  &x; 
	}
}

61 
ölöe
 
poöãr
 
Æloˇã
(
size_ty≥
 
n
, 
js⁄_Æloˇt‹
<>::
c⁄°_poöãr
 = 0Ë
js⁄_hŸ
 {

62  (
poöãr
)
JSONAŒoˇt‹Rñayî
::
Æloc
(
n
 * (
T
));

64 
ölöe
 
	$dóŒoˇã
(
poöãr
 
p
, 
size_ty≥
Ë
js⁄_hŸ
 {

65 
JSONAŒoˇt‹Rñayî
::
	`dóŒoc
(
p
);

66 
	}
}

68 
ölöe
 
size_ty≥
 
	$max_size
(Ëc⁄° 
js⁄_nŸhrow
 {  0xEFFFFFFF; 
	}
}

70 
ölöe
 
	$c⁄°ru˘
(
poöãr
 
p
, c⁄° 
T
& 
vÆ
){

71 
	`√w
(
p
)
	`T
(
vÆ
);

72 
	}
};

73 
ölöe
 
	$de°roy
(
poöãr
 
p
){

74 ((
T
*)
p
Ë-> ~
	`T
();

75 
	}
}

78 
	gãm∂©e
 <
˛ass
 
	gT1
, cœs†
	gT2
> 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
js⁄_Æloˇt‹
<
T1
>&, c⁄° 
	gjs⁄_Æloˇt‹
<T2>&Ë
	gjs⁄_nŸhrow
 {  
	gåue
; }

79 
	gãm∂©e
 <
˛ass
 
	gT1
, cœs†
	gT2
> 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
js⁄_Æloˇt‹
<
T1
>&, c⁄° 
	gjs⁄_Æloˇt‹
<T2>&Ë
	gjs⁄_nŸhrow
 {  
	gÁl£
; }

	@libjson/_internal/Source/JSONChildren.cpp

1 
	~"JSONChûdªn.h
"

2 
	~"JSONNode.h
"

8 
	gjs⁄Chûdªn
::
	$ª£rve2
(
js⁄Chûdªn
 *& 
möe
, 
js⁄_ödex_t
 
amou¡
Ë
js⁄_nŸhrow
 {

9 i‡(
möe
 -> 
¨øy
 != 0){

10 i‡(
möe
 -> 
myˇ∑côy
 < 
amou¡
){

11 
möe
 -> 
	`öc
(
amou¡
 - möê-> 
myˇ∑côy
);

12 #ifde‡
JSON_LESS_MEMORY


13 
möe
 = 
js⁄Chûdªn_Re£rved
::
	`√wChûdªn_Re£rved
(möe, 
amou¡
);

17 
möe
 -> 
	`ª£rve
(
amou¡
);

19 
	}
}

21 
	gjs⁄Chûdªn
::
	$öc
(Ë
js⁄_nŸhrow
 {

22 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull inc"));

23 i‡(
	`js⁄_u∆ikñy
(
mysize
 =
myˇ∑côy
)){

24 i‡(
	`js⁄_u∆ikñy
(
myˇ∑côy
 == 0)){

25 
	`JSON_ASSERT
(!
¨øy
, 
	`JSON_TEXT
("Expandingá 0 capacityárray, butÇotÇull"));

26 #ifde‡
JSON_LESS_MEMORY


27 
¨øy
 = 
js⁄_mÆloc
<
JSONNode
*>(1);

28 
myˇ∑côy
 = 1;

30 
¨øy
 = 
js⁄_mÆloc
<
JSONNode
*>(8);

31 
myˇ∑côy
 = 8;

34 #ifde‡
JSON_LESS_MEMORY


35 
myˇ∑côy
 += 1;

37 
myˇ∑côy
 <<= 1;

39 
¨øy
 = 
js⁄_ªÆloc
<
JSONNode
*>◊ºay, 
myˇ∑côy
);

42 
	}
}

45 
	gjs⁄Chûdªn
::
	$öc
(
js⁄_ödex_t
 
amou¡
Ë
js⁄_nŸhrow
 {

46 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull inc(amount)"));

47 i‡(
	`js⁄_u∆ikñy
(
amou¡
 == 0)) ;

48 i‡(
	`js⁄_likñy
(
mysize
 + 
amou¡
 >
myˇ∑côy
)){

49 i‡(
	`js⁄_u∆ikñy
(
myˇ∑côy
 == 0)){

50 
	`JSON_ASSERT
(!
¨øy
, 
	`JSON_TEXT
("Expandingá 0 capacityárray, butÇotÇull"));

51 #ifde‡
JSON_LESS_MEMORY


52 
¨øy
 = 
js⁄_mÆloc
<
JSONNode
*>(
amou¡
);

53 
myˇ∑côy
 = 
amou¡
;

55 
¨øy
 = 
js⁄_mÆloc
<
JSONNode
*>(
amou¡
 > 8 ?ámount : 8);

56 
myˇ∑côy
 = 
amou¡
 > 8 ?ámount : 8;

59 #ifde‡
JSON_LESS_MEMORY


60 
myˇ∑côy
 = 
mysize
 + 
amou¡
;

62 
mysize
 + 
amou¡
 > 
myˇ∑côy
){

63 
myˇ∑côy
 <<= 1;

66 
¨øy
 = 
js⁄_ªÆloc
<
JSONNode
*>◊ºay, 
myˇ∑côy
);

69 
	}
}

72 
	gjs⁄Chûdªn
::
	$dñëeAŒ
(Ë
js⁄_nŸhrow
 {

73 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull deleteAll"));

74 
	`js⁄_f‹óch
(
this
, 
ru¬î
){

75 
	`JSON_ASSERT
(*
ru¬î
 !
	`JSON_TEXT
('\0'), JSON_TEXT("aÇullÖointer withinÅhe children"));

76 
JSONNode
::
	`dñëeJSONNode
(*
ru¬î
);

78 
	}
}

80 
	gjs⁄Chûdªn
::
	$d€ø£
(
JSONNode
 ** 
posôi⁄
, 
js⁄_ödex_t
 
numbî
Ë
js⁄_nŸhrow
 {

81 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull doerase"));

82 
	`JSON_ASSERT
(
¨øy
 !0, 
	`JSON_TEXT
("erasing something fromáÇullárray 2"));

83 
	`JSON_ASSERT
(
posôi⁄
 >
¨øy
, 
	`JSON_TEXT
("position is beneathÅhe start ofÅheárray 2"));

84 
	`JSON_ASSERT
(
posôi⁄
 + 
numbî
 <
¨øy
 + 
mysize
, 
	`JSON_TEXT
("erasing out of bounds 2"));

85 i‡(
posôi⁄
 + 
numbî
 >
¨øy
 + 
mysize
){

86 
mysize
 = (
js⁄_ödex_t
)(
posôi⁄
 - 
¨øy
);

87 #i‚de‡
JSON_ISO_STRICT


88 
	`JSON_ASSERT
(()
posôi⁄
 - ()
¨øy
 >0, 
	`JSON_TEXT
("doingÇegativeállocation"));

91 
°d
::
	`memmove
(
posôi⁄
,Öosôi⁄ + 
numbî
, (
mysize
 - (posôi⁄ - 
¨øy
Ë-ÇumbîË* (
JSONNode
 *));

92 
mysize
 -
numbî
;

94 
	}
}

	@libjson/_internal/Source/JSONChildren.h

1 #i‚de‡
JSONCHILDREN_H


2 
	#JSONCHILDREN_H


	)

4 
	~"JSONMem‹y.h
"

5 
	~"JSONDebug.h
"

7 #ifde‡
JSON_LESS_MEMORY


8 #ifde‡
__GNUC__


9 #¥agm®
∑ck
(
push
, 1)

10 #ñi‡
_MSC_VER


11 #¥agm®
∑ck
(
push
, 
js⁄Chûdªn
, 1)

15 
	#js⁄_f‹óch
(
chld∫
, 
ôπr
)\

16 
JSONNode
 ** 
ôπr
 = 
chld∫
 -> 
	`begö
();\

17 
JSONNode
 ** 
ôπr
##
_íd
 = 
chld∫
 -> 
	`íd
(); iåå !ôπr##_íd; ++ôπr)

	)

29 
˛ass
 
	gJSONNode
;

31 #ifde‡
JSON_LESS_MEMORY


32 
	#chûdªnVútuÆ
 
vútuÆ


	)

34 
	#chûdªnVútuÆ


	)

37 ˛as†
	cjs⁄Chûdªn
 {

38 
	mpublic
:

39 
LIBJSON_OBJECT
(
js⁄Chûdªn
);

41 
	$js⁄Chûdªn
(Ë
js⁄_nŸhrow
 : 
	`¨øy
(0), 
	`mysize
(0), 
	$myˇ∑côy
(0) {

42 
LIBJSON_CTOR
;

45 #ifde‡
JSON_LESS_MEMORY


46 
	$js⁄Chûdªn
(
JSONNode
** 
¨
, 
js⁄_ödex_t
 
si
, js⁄_ödex_à
ˇ
Ë
js⁄_nŸhrow
 : 
	`¨øy
◊r), 
	`mysize
(si), 
	$myˇ∑côy
(
ˇ
) {

47 
LIBJSON_CTOR
;

48 
	}
}

52 
	gchûdªnVútuÆ
 ~
	$js⁄Chûdªn
(Ë
js⁄_nŸhrow
 {

53 i‡(
	`js⁄_u∆ikñy
(
¨øy
 != 0)){

54 
	`dñëeAŒ
();

55 
libjs⁄_‰ì
<
JSONNode
*>(
¨øy
);

57 
LIBJSON_DTOR
;

58 
	}
}

61 
	$öc
(
js⁄_ödex_t
 
amou¡
Ë
js⁄_nŸhrow
;

62 
	$öc
(Ë
js⁄_nŸhrow
;

65 
	$push_back
(
JSONNode
 * 
ôem
Ë
js⁄_nŸhrow
 {

66 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÖush_back"));

67 
	`öc
();

68 
¨øy
[
mysize
++] = 
ôem
;

69 
	}
}

72 
	$push_‰⁄t
(
JSONNode
 * 
ôem
Ë
js⁄_nŸhrow
 {

73 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÖush_front"));

74 
	`öc
();

75 
°d
::
	`memmove
(
¨øy
 + 1,áºay, 
mysize
++ * (
JSONNode
 *));

76 
¨øy
[0] = 
ôem
;

77 
	}
}

80 
ölöe
 
JSONNode
 * 
	g›î©‹
[] (
js⁄_ödex_t
 
	gposôi⁄
Ëc⁄° 
	gjs⁄_nŸhrow
 {

81 
JSON_ASSERT
(
this
 !0, 
JSON_TEXT
("Children isÇull []"));

82 
JSON_ASSERT
(
posôi⁄
 < 
mysize
, 
JSON_TEXT
("Using [] out of bounds"));

83 
JSON_ASSERT
(
posôi⁄
 < 
myˇ∑côy
, 
JSON_TEXT
("Using [] out of bounds"));

84 
JSON_ASSERT
(
¨øy
 !0, 
JSON_TEXT
("Array isÇull"));

85  
	g¨øy
[
posôi⁄
];

89 
ölöe
 
js⁄_ödex_t
 
	$ˇ∑côy
(Ëc⁄° 
js⁄_nŸhrow
 {

90 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull capacity"));

91  
myˇ∑côy
;

92 
	}
}

95 
ölöe
 
js⁄_ödex_t
 
	$size
(Ëc⁄° 
js⁄_nŸhrow
 {

96 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull size"));

97  
mysize
;

98 
	}
}

101 
ölöe
 
boﬁ
 
	$em±y
(Ëc⁄° 
js⁄_nŸhrow
 {

102 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÉmpty"));

103  
mysize
 == 0;

104 
	}
}

107 
ölöe
 
	$˛ór
(Ë
js⁄_nŸhrow
 {

108 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull clear"));

109 i‡(
	`js⁄_likñy
(
¨øy
 != 0)){

110 
	`JSON_ASSERT
(
myˇ∑côy
 !0, 
	`JSON_TEXT
("mycapacity isÇot zero, butárray isÇull"));

111 
	`dñëeAŒ
();

112 
mysize
 = 0;

114 
	`JSON_ASSERT
(
mysize
 =0, 
	`JSON_TEXT
("mysize isÇot zeroáfter clear"));

115 
	}
}

118 
ölöe
 
JSONNode
 ** 
	$begö
(Ëc⁄° 
js⁄_nŸhrow
 {

119 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull begin"));

120  
¨øy
;

121 
	}
}

124 
ölöe
 
JSONNode
 ** 
	$íd
(Ëc⁄° 
js⁄_nŸhrow
 {

125 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÉnd"));

126  
¨øy
 + 
mysize
;

127 
	}
}

130 
	gãm∂©e
 <
boﬁ
 
	gªvî£
>

131 
	sôî©‹Kì≥r
 {

132 
	gpublic
:

133 
LIBJSON_OBJECT
(
js⁄Chûdªn
::
ôî©‹Kì≥r
);

134 
ôî©‹Kì≥r
(
js⁄Chûdªn
 * 
±his
, 
JSONNode
 ** & 
posôi⁄
Ë
	gjs⁄_nŸhrow
 :

135 
myRñ©iveOff£t
(
ªvî£
 ? (
js⁄_ödex_t
)(
±his
 -> 
¨øy
 + (
size_t
Ìthi†-> 
mysize
 - 
posôi⁄
) : (json_index_t)(position -Öthis ->árray)),

136 
myChûdªn
(
±his
),

137 
myPos
(
posôi⁄
){

138 
	gLIBJSON_CTOR
;

141 ~
ôî©‹Kì≥r
(Ë
	gjs⁄_nŸhrow
 {

142 
	gLIBJSON_DTOR
;

143 i‡(
	gªvî£
){

144 
	gmyPos
 = 
myChûdªn
 -> 
¨øy
 + myChûdª¿-> 
mysize
 - 
myRñ©iveOff£t
;

146 
	gmyPos
 = 
myChûdªn
 -> 
¨øy
 + 
myRñ©iveOff£t
;

149 
	g¥iv©e
:

150 
ôî©‹Kì≥r
(const iteratorKeeper &);

151 
	gôî©‹Kì≥r
 & 
	g›î©‹
 = (c⁄° 
ôî©‹Kì≥r
 &);

153 
js⁄_ödex_t
 
	gmyRñ©iveOff£t
;

154 
js⁄Chûdªn
 * 
	gmyChûdªn
;

155 
	gJSONNode
 ** & 
	gmyPos
;

159 
ölöe
 
	$îa£
(
JSONNode
 ** & 
posôi⁄
Ë
js⁄_nŸhrow
 {

160 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÉrase"));

161 
	`JSON_ASSERT
(
¨øy
 !0, 
	`JSON_TEXT
("erasing something fromáÇullárray 1"));

162 
	`JSON_ASSERT
(
posôi⁄
 >
¨øy
, 
	`JSON_TEXT
("position is beneathÅhe start ofÅheárray 1"));

163 
	`JSON_ASSERT
(
posôi⁄
 <
¨øy
 + 
mysize
, 
	`JSON_TEXT
("erasing out of bounds 1"));

164 
°d
::
	`memmove
(
posôi⁄
,Öosôi⁄ + 1, (
mysize
-- - (posôi⁄ - 
¨øy
Ë- 1Ë* (
JSONNode
 *));

165 
ôî©‹Kì≥r
<
Ál£
> 
	`ik
(
this
, 
posôi⁄
);

166 
	`shrök
();

167 
	}
}

170 
ölöe
 
	$îa£
(
JSONNode
 ** & 
posôi⁄
, 
js⁄_ödex_t
 
numbî
Ë
js⁄_nŸhrow
 {

171 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÉrase 2"));

172 
	`d€ø£
(
posôi⁄
, 
numbî
);

173 
ôî©‹Kì≥r
<
Ál£
> 
	`ik
(
this
, 
posôi⁄
);

174 
	`shrök
();

175 
	}
}

179 
ölöe
 
	$îa£
(
JSONNode
 ** 
posôi⁄
, 
js⁄_ödex_t
 
numbî
, JSONNodê** & 
°¨ãr
Ë
js⁄_nŸhrow
 {

180 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÉrase 3"));

181 
	`d€ø£
(
posôi⁄
, 
numbî
);

182 
ôî©‹Kì≥r
<
Ál£
> 
	`ik
(
this
, 
°¨ãr
);

183 
	`shrök
();

184 
	}
}

186 #ifde‡
JSON_LIBRARY


187 
	$ö£π
(
JSONNode
 ** & 
posôi⁄
, JSONNodê* 
ôem
Ë
js⁄_nŸhrow
{

189 
	$ö£π
(
JSONNode
 ** & 
posôi⁄
, JSONNodê* 
ôem
, 
boﬁ
 
ªvî£
 = 
Ál£
Ë
js⁄_nŸhrow
 {

191 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull insert"));

193 
	`JSON_ASSERT
(
posôi⁄
 >
¨øy
, 
	`JSON_TEXT
("position is beneathÅhe start ofÅheárray insert 1"));

194 
	`JSON_ASSERT
(
posôi⁄
 <
¨øy
 + 
mysize
, 
	`JSON_TEXT
("position isáboveÅheÉnd ofÅheárray insert 1"));

195 #i‚de‡
JSON_LIBRARY


196 i‡(
ªvî£
){

197 
ôî©‹Kì≥r
<
åue
> 
	`ik
(
this
, 
posôi⁄
);

198 
	`öc
();

202 
ôî©‹Kì≥r
<
Ál£
> 
	`ik
(
this
, 
posôi⁄
);

203 
	`öc
();

206 
°d
::
	`memmove
(
posôi⁄
 + 1,Öosôi⁄, (
mysize
++ - (posôi⁄ - 
¨øy
)Ë* (
JSONNode
 *));

207 *
posôi⁄
 = 
ôem
;

208 
	}
}

210 
	$ö£π
(
JSONNode
 ** & 
posôi⁄
, JSONNodê** 
ôems
, 
js⁄_ödex_t
 
num
Ë
js⁄_nŸhrow
 {

211 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull insert 2"));

212 
	`JSON_ASSERT
(
posôi⁄
 >
¨øy
, 
	`JSON_TEXT
("position is beneathÅhe start ofÅheárray insert 2"));

213 
	`JSON_ASSERT
(
posôi⁄
 <
¨øy
 + 
mysize
, 
	`JSON_TEXT
("position isáboveÅheÉnd ofÅheárray insert 2"));

215 
ôî©‹Kì≥r
<
Ál£
> 
	`ik
(
this
, 
posôi⁄
);

216 
	`öc
(
num
);

218 c⁄° 
size_t
 
±rs
 = ((
JSONNode
 **)(
¨øy
 + 
mysize
)Ë- 
posôi⁄
;

219 
°d
::
	`memmove
(
posôi⁄
 + 
num
,Öosôi⁄, 
±rs
 * (
JSONNode
 *));

220 
°d
::
	`mem˝y
(
posôi⁄
, 
ôems
, 
num
 * (
JSONNode
 *));

221 
mysize
 +
num
;

222 
	}
}

224 
ölöe
 
	$ª£rve
(
js⁄_ödex_t
 
amou¡
Ë
js⁄_nŸhrow
 {

225 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇullÑeserve"));

226 
	`JSON_ASSERT
(
¨øy
 =0, 
	`JSON_TEXT
("reserve isÇot meantÅoÉxpandáÖreexistingárray"));

227 
	`JSON_ASSERT
(
myˇ∑côy
 =0, 
	`JSON_TEXT
("reservec isÇot meantÅoÉxpandáÖreexistingárray"));

228 
	`JSON_ASSERT
(
mysize
 =0, 
	`JSON_TEXT
("reserves isÇot meantÅoÉxpandáÖreexistingárray"));

229 
¨øy
 = 
js⁄_mÆloc
<
JSONNode
*>(
myˇ∑côy
 = 
amou¡
);

230 
	}
}

233 
	$ª£rve2
(
js⁄Chûdªn
 *& 
möe
, 
js⁄_ödex_t
 
amou¡
Ë
js⁄_nŸhrow
;

236 
ölöe
 
chûdªnVútuÆ
 
	$shrök
(Ë
js⁄_nŸhrow
 {

237 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull shrink"));

238 i‡(
	`js⁄_u∆ikñy
(
mysize
 == 0)){

239 
libjs⁄_‰ì
<
JSONNode
*>(
¨øy
);

240 
¨øy
 = 0;

241 #ifde‡
JSON_LESS_MEMORY


243 
	`JSON_ASSERT
(
¨øy
 !0, 
	`JSON_TEXT
("shrinkingáÇullárrayÅhat isÇot size 0"));

244 
¨øy
 = 
js⁄_ªÆloc
<
JSONNode
*>◊ºay, 
mysize
);

247 
myˇ∑côy
 = 
mysize
;

248 
	}
}

251 
ölöe
 
	$dñëeChûdªn
(
js⁄Chûdªn
 * 
±r
Ë
js⁄_nŸhrow
 {

252 #ifde‡
JSON_MEMORY_CALLBACKS


253 
±r
 -> ~
	`js⁄Chûdªn
();

254 
libjs⁄_‰ì
<
js⁄Chûdªn
>(
±r
);

256 
dñëe
 
±r
;

258 
	}
}

260 
ölöe
 
js⁄Chûdªn
 * 
	$√wChûdªn
() {

261 #ifde‡
JSON_MEMORY_CALLBACKS


262  
	`√w
(
js⁄_mÆloc
<
js⁄Chûdªn
>(1)Ë
	`js⁄Chûdªn
();

264  
√w
 
	`js⁄Chûdªn
();

266 
	}
}

268 
JSONNode
 ** 
	g¨øy
;

270 
js⁄_ödex_t
 
	gmysize
;

271 
js⁄_ödex_t
 
	gmyˇ∑côy
;

272 
JSON_PROTECTED


274 
js⁄Chûdªn
(const jsonChildren &);

275 
	gjs⁄Chûdªn
 & 
	g›î©‹
 = (c⁄° 
js⁄Chûdªn
 &);

277 
	$dñëeAŒ
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

278 
	$d€ø£
(
JSONNode
 ** 
posôi⁄
, 
js⁄_ödex_t
 
numbî
Ë
js⁄_nŸhrow
;

279 
	}
};

281 #ifde‡
JSON_LESS_MEMORY


282 ˛as†
	cjs⁄Chûdªn_Re£rved
 : 
public
 
js⁄Chûdªn
 {

283 
public
:

284 
LIBJSON_OBJECT
(
js⁄Chûdªn_Re£rved
);

285 
	$js⁄Chûdªn_Re£rved
(
js⁄Chûdªn
 * 
‹ig
, 
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow
 : 
	`js⁄Chûdªn
(‹ig -> 
¨øy
, orig -> 
mysize
, orig -> 
myˇ∑côy
), 
	$myª£rved
(
siz
) {

286 
‹ig
 -> 
¨øy
 = 0;

287 
	`dñëeChûdªn
(
‹ig
);

288 
LIBJSON_CTOR
;

290 
	$js⁄Chûdªn_Re£rved
(c⁄° 
js⁄Chûdªn_Re£rved
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`js⁄Chûdªn
(‹ig.
¨øy
, orig.
mysize
, orig.
myˇ∑côy
), 
	$myª£rved
(
‹ig
.
myª£rved
){

291 
LIBJSON_COPY_CTOR
;

292 
	}
}

293 
ölöe
 
	gvútuÆ
 ~
	$js⁄Chûdªn_Re£rved
(Ë
js⁄_nŸhrow
 {

294 
LIBJSON_DTOR
;

295 
	}
};

296 
ölöe
 
vútuÆ
 
	$shrök
(Ë
js⁄_nŸhrow
 {

297 
	`JSON_ASSERT
(
this
 !0, 
	`JSON_TEXT
("Children isÇull shrinkÑeserved"));

298 i‡(
	`js⁄_u∆ikñy
(
mysize
 == 0)){

299 
libjs⁄_‰ì
<
JSONNode
*>(
¨øy
);

300 
¨øy
 = 0;

301 } i‡(
mysize
 > 
myª£rved
){

302 
	`JSON_ASSERT
(
¨øy
 !0, 
	`JSON_TEXT
("shrinkingáÇullárrayÅhat isÇot size 0"));

303 
¨øy
 = 
js⁄_ªÆloc
<
JSONNode
*>◊ºay, 
mysize
);

305 
	}
}

307 #ifde‡
JSON_LESS_MEMORY


308 
ölöe
 
js⁄Chûdªn
 * 
	$√wChûdªn_Re£rved
(
js⁄Chûdªn
 * 
‹ig
, 
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow
 {

309 #ifde‡
JSON_MEMORY_CALLBACKS


310  
	`√w
(
js⁄_mÆloc
<
js⁄Chûdªn_Re£rved
>(1)Ë
	`js⁄Chûdªn_Re£rved
(
‹ig
, 
siz
);

312  
√w
 
	`js⁄Chûdªn_Re£rved
(
‹ig
, 
siz
);

314 
	}
}

316 
JSON_PRIVATE


317 
	gjs⁄Chûdªn_Re£rved
 & 
	g›î©‹
 = (c⁄° 
js⁄Chûdªn_Re£rved
 &);

318 
js⁄_ödex_t
 
	gmyª£rved
;

322 #ifde‡
JSON_LESS_MEMORY


323 #ifde‡
__GNUC__


324 #¥agm®
∑ck
(
p›
)

325 #ñi‡
_MSC_VER


326 #¥agm®
∑ck
(
p›
, 
js⁄Chûdªn
)

	@libjson/_internal/Source/JSONDebug.cpp

1 
	~"JSONDebug.h
"

2 #ifde‡
JSON_DEBUG


4 #ifde‡
JSON_STDERROR


5 
	~<io°ªam
>

7 
	~"JSONSögÀt⁄.h
"

9 
js⁄_îr‹_ˇŒback_t
 
	gJSONDebug
::
	$ªgi°î_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
Ë
js⁄_nŸhrow
 {

10 
js⁄_îr‹_ˇŒback_t
 
ªs
 = 
JSONSögÀt⁄
<js⁄_îr‹_ˇŒback_t>::
	`gë
();

11 
JSONSögÀt⁄
<
js⁄_îr‹_ˇŒback_t
>::
	`£t
(
ˇŒback
);

12  
ªs
;

13 
	}
}

17 
	gJSONDebug
::
	$_JSON_FAIL
(c⁄° 
js⁄_°rög
 & 
msg
Ë
js⁄_nŸhrow
 {

18 #ifde‡
JSON_STDERROR


19 #i‚de‡
JSON_UNICODE


20 
°d
::
˚º
 << 
msg
 << std::
ídl
;

22 
°d
::
˚º
 << std::
	`°rög
(
msg
.
	`begö
(), msg.
	`íd
()Ë<< std::
ídl
;

25 i‡(
js⁄_îr‹_ˇŒback_t
 
Eº‹CÆlback
 = 
JSONSögÀt⁄
<js⁄_îr‹_ˇŒback_t>::
	`gë
()){

26 #ifde‡
JSON_LIBRARY


27 
	`Eº‹CÆlback
(
msg
.
	`c_°r
());

29 
	`Eº‹CÆlback
(
msg
);

33 
	}
}

36 
	gJSONDebug
::
	$_JSON_ASSERT
(
boﬁ
 
c⁄dôi⁄
, c⁄° 
js⁄_°rög
 & 
msg
Ë
js⁄_nŸhrow
 {

37 i‡(
	`js⁄_u∆ikñy
(!
c⁄dôi⁄
)){

38 
	`_JSON_FAIL
(
msg
);

40 
	}
}

	@libjson/_internal/Source/JSONDebug.h

1 #i‚de‡
LIBJSON_GUARD_DEBUG_H


2 
	#LIBJSON_GUARD_DEBUG_H


	)

4 
	~"JSONDefs.h
"

5 
	~"JSONSèts.h
"

7 #ifde‡
JSON_DEBUG


8 #ifde‡
JSON_SAFE


9 
	#JSON_ASSERT_SAFE
(
c⁄dôi⁄
, 
msg
, 
code
)\

11 i‡(
	`js⁄_u∆ikñy
(!(
c⁄dôi⁄
))){\

12 
	`JSON_FAIL
(
msg
);\

13 
code
\

15 }

	)

16 
	#JSON_FAIL_SAFE
(
msg
, 
code
)\

18 
	`JSON_FAIL
(
msg
);\

19 
code
\

20 }

	)

22 
	#JSON_ASSERT_SAFE
(
c⁄dôi⁄
, 
msg
, 
code
Ë
	`JSON_ASSERT
(c⁄dôi⁄, msg)

	)

23 
	#JSON_FAIL_SAFE
(
msg
, 
code
Ë
	`JSON_FAIL
(msg)

	)

26 
	#JSON_FAIL
(
msg
Ë
JSONDebug
::
	`_JSON_FAIL
(msg)

	)

27 
	#JSON_ASSERT
(
bo
, 
msg
Ë
JSONDebug
::
	`_JSON_ASSERT
(bo, msg)

	)

29 ˛as†
	cJSONDebug
 {

30 
	mpublic
:

31 #i‚de‡
JSON_STDERROR


32 
js⁄_îr‹_ˇŒback_t
 
	$ªgi°î_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

34 
	$_JSON_FAIL
(c⁄° 
js⁄_°rög
 & 
msg
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

35 
	$_JSON_ASSERT
(
boﬁ
 
c⁄dôi⁄
, c⁄° 
js⁄_°rög
 & 
msg
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

38 #ifde‡
JSON_SAFE


39 
	#JSON_ASSERT_SAFE
(
c⁄dôi⁄
, 
msg
, 
code
)\

41 i‡(
	`js⁄_u∆ikñy
(!(
c⁄dôi⁄
))){\

42 
code
\

44 
	}

	)
}

45 
	#JSON_FAIL_SAFE
(
msg
, 
code
)\

47 
code
\

48 }

	)

50 
	#JSON_ASSERT_SAFE
(
c⁄dôi⁄
, 
msg
, 
code
)

	)

51 
	#JSON_FAIL_SAFE
(
msg
, 
code
)

	)

54 
	#JSON_ASSERT
(
c⁄dôi⁄
, 
msg
)

	)

55 
	#JSON_FAIL
(
msg
)

	)

	@libjson/_internal/Source/JSONDefs.h

1 #i‚de‡
JSONDEFS_H


2 
	#JSONDEFS_H


	)

10 
	~"../../JSONO±i⁄s.h
"

11 
	~"JSONDefs/Unknown_C.h
"

12 
	~"JSONDefs/GNU_C.h
"

13 
	~"JSONDefs/VisuÆ_C.h
"

14 
	~"JSONDefs/Såögs_Defs.h
"

16 
	#__LIBJSON_MAJOR__
 7

	)

17 
	#__LIBJSON_MINOR__
 6

	)

18 
	#__LIBJSON_PATCH__
 1

	)

19 
	#__LIBJSON_VERSION__
 (
__LIBJSON_MAJOR__
 * 10000 + 
__LIBJSON_MINOR__
 * 100 + 
__LIBJSON_PATCH__
)

	)

21 
	#JSON_NULL
 '\0'

	)

22 
	#JSON_STRING
 '\1'

	)

23 
	#JSON_NUMBER
 '\2'

	)

24 
	#JSON_BOOL
 '\3'

	)

25 
	#JSON_ARRAY
 '\4'

	)

26 
	#JSON_NODE
 '\5'

	)

28 #ifde‡
__˝lu•lus


29 #i‡
deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

30 
	~"JSONAŒoˇt‹.h
"

32 
	#js⁄_Æloˇt‹
 
°d
::
Æloˇt‹


	)

35 #ifde‡
JSON_STRING_HEADER


36 #ö˛udê
JSON_STRING_HEADER


38 
	g°d
::
	tbasic_°rög
<
	tjs⁄_ch¨
, 
	t°d
::
	tch¨_åaôs
<js⁄_ch¨>, 
	tjs⁄_Æloˇt‹
<js⁄_ch¨> > 
	tjs⁄_°rög
;

41 
	#JSON_MAP
(
x
, 
y
Ë
°d
::
m≠
<x, y, std::
Àss
<x>, 
js⁄_Æloˇt‹
<°d::
∑ú
<c⁄° x, y> > >

	)

43 #ifde‡
JSON_NO_EXCEPTIONS


44 
	#js⁄_throw
(
x
)

	)

45 
	#js⁄_åy


	)

46 
	#js⁄_ˇtch
(
ex˚±i⁄
, 
code
)

	)

48 
	#js⁄_throw
(
x
Ë
	`throw
(x)

	)

49 
	#js⁄_åy
 
åy


	)

50 
	#js⁄_ˇtch
(
ex˚±i⁄
, 
code
Ë
	`ˇtch
”x˚±i⁄){ codê}

	)

53 #ifde‡
JSON_STRICT


54 #i‚de‡
JSON_UNICODE


55 #îr‹, 
JSON_UNICODE
 
is
 
ªquúed
 
JSON_STRICT


57 #ifde‡
JSON_COMMENTS


58 #îr‹, 
JSON_COMMENTS
 
is
 
ªquúed
 
to
 
be
 
off
 
JSON_STRICT


62 #ifde‡
JSON_ISO_STRICT


63 #ifde‡
JSON_UNICODE


64 #îr‹, 
You
 
ˇn
 
nŸ
 
u£
 
unicode
 
undî
 
ANSI
 
Såi˘
 
C
++

67 #ifde‡
__GNUC__


68 #ifde‡
__STRICT_ANSI__


69 #w¨nög, 
Usög
 -
™si
 
GCC
 
›ti⁄
, 
but
 
JSON_ISO_STRICT
 
nŸ
 
⁄
, 
tu∫ög
 
ô
 o¿
you


70 
	#JSON_ISO_STRICT


	)

76 #ifde‡
JSON_NUMBER_TYPE


77 
JSON_NUMBER_TYPE
 
	tjs⁄_numbî
;

78 
	#JSON_FLOAT_THRESHHOLD
 0.00001

	)

80 #ifde‡
JSON_LESS_MEMORY


81 
	tjs⁄_numbî
;

82 
	#JSON_FLOAT_THRESHHOLD
 0.00001f

	)

84 
	tjs⁄_numbî
;

85 
	#JSON_FLOAT_THRESHHOLD
 0.00001

	)

90 #ifde‡
JSON_LESS_MEMORY


92 
	#START_MEM_SCOPE
 {

	)

93 
	#END_MEM_SCOPE
 }

	)

95 
	#PACKED
(
x
)

	)

96 
	#BITS
(
x
)

	)

97 
	#START_MEM_SCOPE


	)

98 
	#END_MEM_SCOPE


	)

101 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


102 #ifde‡
JSON_LIBRARY


103 (*
	tjs⁄_îr‹_ˇŒback_t
)(c⁄° 
	tjs⁄_ch¨
 *);

105 (*
	tjs⁄_îr‹_ˇŒback_t
)(c⁄° 
	tjs⁄_°rög
 &);

109 #ifde‡
JSON_INDEX_TYPE


110 
JSON_INDEX_TYPE
 
	tjs⁄_ödex_t
;

112 
	tjs⁄_ödex_t
;

115 #ifde‡
JSON_BOOL_TYPE


116 
JSON_BOOL_TYPE
 
	tjs⁄_boﬁ_t
;

118 
	tjs⁄_boﬁ_t
;

121 #ifde‡
JSON_INT_TYPE


122 
JSON_INT_TYPE
 
	tjs⁄_öt_t
;

124 
	tjs⁄_öt_t
;

127 
	#JSONSTREAM_SELF
 (*)-1

	)

128 (*
	tjs⁄_°ªam_e_ˇŒback_t
)(* 
	tidítifõr
);

130 (*
	tjs⁄_muãx_ˇŒback_t
)(*);

131 (*
	tjs⁄_‰ì_t
)(*);

132 #i‚de‡
JSON_LIBRARY


133 * (*
	tjs⁄_mÆloc_t
)(
	tsize_t
);

134 * (*
	tjs⁄_ªÆloc_t
)(*, 
	tsize_t
);

136 
	#JSONNODE
 

	)

137 
JSONNODE
** 
	tJSONNODE_ITERATOR
;

138 #ifde‡
JSON_STREAM


139 
	#JSONSTREAM
 

	)

140 (*
	tjs⁄_°ªam_ˇŒback_t
)(
	tJSONNODE
 *, * 
	tidítifõr
);

142 * (*
	tjs⁄_mÆloc_t
)();

143 * (*
	tjs⁄_ªÆloc_t
)(*, );

146 #ifde‡
JSON_DEBUG


147 #ifde‡
NDEBUG


148 #ifde‡
__GNUC__


149 #w¨nög, 
Have
 
JSON_DEBUG
 
⁄
 
ö
 
a
 
ªÀa£
 
buûd


151 #îr‹, 
Have
 
JSON_DEBUG
 
⁄
 
ö
 
a
 
ªÀa£
 
buûd


155 #i‚de‡
NDEBUG


156 #ifde‡
__GNUC__


157 #w¨nög, 
Rñó£
 
buûd
 
of
 
libjs⁄
, 
but
 
NDEBUG
 
is
 
nŸ
 
⁄


159 #îr‹, 
Rñó£
 
buûd
 
of
 
libjs⁄
, 
but
 
NDEBUG
 
is
 
nŸ
 
⁄


164 #ifde‡
JSON_UNIT_TEST


165 
	#JSON_PRIVATE
 
public
:

	)

166 
	#JSON_PROTECTED
 
public
:

	)

168 
	#JSON_PRIVATE
 
¥iv©e
:

	)

169 
	#JSON_PROTECTED
 
¥Ÿe˘ed
:

	)

171 #ifde‡
JSON_STREAM


172 #i‚de‡
JSON_READ_PRIORITY


173 #îr‹, 
JSON_STREAM
 
Æso
 
ªquúes
 
JSON_READ_PRIORITY


176 #ifde‡
JSON_VALIDATE


177 #i‚de‡
JSON_READ_PRIORITY


178 #îr‹, 
JSON_VALIDATE
 
Æso
 
ªquúes
 
JSON_READ_PRIORITY


182 
	#JSON_TEMP_COMMENT_IDENTIFIER
 
	`JSON_TEXT
('#')

	)

	@libjson/_internal/Source/JSONDefs/._GNU_C.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/JSONDefs/._Strings_Defs.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ú                     ú     .≠∂e.TextEncodög   -8;134217984                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/JSONDefs/._Unknown_C.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/JSONDefs/._Visual_C.h

1      OS X        2  ∞     ‚                                    ;ö…ˇ  ‚   ò                     ò     .≠∂e.qu¨™töe 0001;4f706af6;SaÁri;10A69EBD-1800-4019-A6B0-DEECB9ED3349|com.≠∂e.SaÁri                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ªsour˚ f‹k i¡íti⁄ÆlyÜe· bœnk                                                                                                                                                                                                                          ˇˇ

	@libjson/_internal/Source/JSONDefs/GNU_C.h

1 #i‚de‡
JSON_GNU_C_HEADER


2 
	#JSON_GUN_C_HEADER


	)

4 #ifde‡
__GNUC__


6 
	#js⁄_dïªˇãd
(
mëhod
, 
w¨nög
Ëmëhod 
	`__©åibuã__
((
dïªˇãd
))

	)

8 #i‡(
__GNUC__
 >= 3)

9 
	#JSON_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

11 
	#JSON_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100)

	)

14 #i‡(
JSON_GCC_VERSION
 >= 40300)

15 
	#js⁄_hŸ
 
	`__©åibuã__
 ((
hŸ
))

	)

16 
	#js⁄_cﬁd
 
	`__©åibuã__
 ((
cﬁd
))

	)

17 
	#js⁄_puª
 
js⁄_nŸhrow
 
	`__©åibuã__
 ((
puª
, 
hŸ
))

	)

18 
	#js⁄_mÆloc_©å
 
js⁄_nŸhrow
 
	`__©åibuã__
 ((
mÆloc
, 
hŸ
))

	)

21 #i‡(
JSON_WRITE_PRIORITY
 =
HIGH
)

22 
	#js⁄_wrôe_¥i‹ôy
 
	`__©åibuã__
 ((
hŸ
))

	)

23 #ñi‡(
JSON_WRITE_PRIORITY
 =
LOW
)

24 
	#js⁄_wrôe_¥i‹ôy
 
	`__©åibuã__
 ((
cﬁd
))

	)

26 
	#js⁄_wrôe_¥i‹ôy


	)

29 #i‡(
JSON_READ_PRIORITY
 =
HIGH
)

30 
	#js⁄_ªad_¥i‹ôy
 
	`__©åibuã__
 ((
hŸ
))

	)

31 #ñi‡(
JSON_READ_PRIORITY
 =
LOW
)

32 
	#js⁄_ªad_¥i‹ôy
 
	`__©åibuã__
 ((
cﬁd
))

	)

34 
	#js⁄_ªad_¥i‹ôy


	)

37 
	#js⁄_likñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),1)

	)

38 
	#js⁄_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),0)

	)

40 #i‡(
JSON_GCC_VERSION
 >= 29600)

41 
	#js⁄_puª
 
js⁄_nŸhrow
 
	`__©åibuã__
 ((
puª
))

	)

42 
	#js⁄_likñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),1)

	)

43 
	#js⁄_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),0)

	)

45 
	#js⁄_puª
 
js⁄_nŸhrow


	)

46 
	#js⁄_likñy
(
x
Ë
	)
x

47 
	#js⁄_u∆ikñy
(
x
Ë
	)
x

50 
	#js⁄_mÆloc_©å
 
js⁄_nŸhrow
 
	`__©åibuã__
 ((
mÆloc
))

	)

51 
	#js⁄_wrôe_¥i‹ôy


	)

52 
	#js⁄_ªad_¥i‹ôy


	)

53 
	#js⁄_hŸ


	)

54 
	#js⁄_cﬁd


	)

57 
	#js⁄_nŸhrow
 
	`throw
()

	)

58 
	#js⁄_throws
(
x
Ë
	`throw
(x)

	)

60 #ifde‡
JSON_LESS_MEMORY


61 
	#PACKED
(
x
Ë:x 
	`__©åibuã__
 ((
∑cked
))

	)

62 
	#BITS
(
x
Ë:
	)
x

	@libjson/_internal/Source/JSONDefs/Strings_Defs.h

1 #i‚de‡
STRINGS_DEFS_HEADER


2 
	#STRINGS_DEFS_HEADER


	)

4 
	~"../../../JSONO±i⁄s.h
"

6 #ifde‡
JSON_UNICODE


7 
	#js⁄_ch¨
 
wch¨_t


	)

8 
	#js⁄_uch¨
 
wch¨_t


	)

9 #ifde‡
__˝lu•lus


10 
	~<cwch¨
>

11 #i‚de‡
JSON_STRING_HEADER


12 
	~<°rög
>

15 
	~<wch¨.h
>

17 
	#JSON_TEXT
(
s
Ë
L
 ## 
	)
s

18 
	#js⁄_°æí
 
wc¶í


	)

19 
	#js⁄_°rcmp
 
wcscmp


	)

21 
	#js⁄_ch¨
 

	)

22 
	#js⁄_uch¨
 

	)

23 #ifde‡
__˝lu•lus


24 #i‚de‡
JSON_STRING_HEADER


25 
	~<°rög
>

28 
	~<°rög.h
>

30 
	#JSON_TEXT
(
s
Ë
	)
s

31 
	#js⁄_°æí
 
°æí


	)

32 
	#js⁄_°rcmp
 
°rcmp


	)

	@libjson/_internal/Source/JSONDefs/Unknown_C.h

1 #i‚de‡
JSON_UNKNOWN_C_HEADER


2 
	#JSON_UNKNOWN_C_HEADER


	)

4 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
_MSC_VER
)

6 
	#js⁄_dïªˇãd
(
mëhod
, 
w¨nög
Ë
	)
method

8 
	#js⁄_nŸhrow


	)

9 
	#js⁄_throws
(
x
)

	)

10 
	#js⁄_puª
 
js⁄_nŸhrow


	)

11 
	#js⁄_ªad_¥i‹ôy


	)

12 
	#js⁄_wrôe_¥i‹ôy


	)

13 
	#js⁄_mÆloc_©å
 
js⁄_nŸhrow


	)

14 
	#js⁄_hŸ


	)

15 
	#js⁄_cﬁd


	)

16 
	#js⁄_likñy
(
x
Ë
	)
x

17 
	#js⁄_u∆ikñy
(
x
Ë
	)
x

19 #ifde‡
JSON_LESS_MEMORY


20 
	#PACKED
(
x
Ë:
	)
x

21 
	#BITS
(
x
Ë:
	)
x

	@libjson/_internal/Source/JSONDefs/Visual_C.h

1 #i‚de‡
JSON_VISUAL_C_HEADER


2 
	#JSON_VISUAL_C_HEADER


	)

4 #ifde‡
_MSC_VER


6 
	#js⁄_dïªˇãd
(
mëhod
, 
w¨nög
Ë
	`__de˛•ec
(
	`dïªˇãd
(w¨nög)Ë
	)
method

8 
	#js⁄_nŸhrow


	)

9 
	#js⁄_throws
(
x
)

	)

10 
	#js⁄_puª
 
js⁄_nŸhrow


	)

11 
	#js⁄_ªad_¥i‹ôy


	)

12 
	#js⁄_wrôe_¥i‹ôy


	)

13 
	#js⁄_mÆloc_©å
 
js⁄_nŸhrow


	)

14 
	#js⁄_hŸ


	)

15 
	#js⁄_cﬁd


	)

16 
	#js⁄_likñy
(
x
Ë
	)
x

17 
	#js⁄_u∆ikñy
(
x
Ë
	)
x

19 #ifde‡
JSON_LESS_MEMORY


20 
	#PACKED
(
x
Ë:
	)
x

21 
	#BITS
(
x
Ë:
	)
x

	@libjson/_internal/Source/JSONGlobals.h

1 #i‚de‡
JSON_GLOBALS_H


2 
	#JSON_GLOBALS_H


	)

4 
	~"JSONDefs.h
"

13 
	#js⁄_globÆ_de˛
(
TYPE
, 
NAME
, 
VALUE
) \

14 
˛ass
 
js⁄SögÀt⁄
 ## 
NAME
 { \

15 
public
: \

16 
ölöe
 
TYPE
 & 
	`gëVÆue
(Ë
js⁄_nŸhrow
 { \

17 
js⁄SögÀt⁄
 ## 
NAME
 
sögÀ
; \

18  
sögÀ
.
vÆ
; \

20 
¥Ÿe˘ed
: \

21 
ölöe
 
js⁄SögÀt⁄
 ## 
	`NAME
(Ë
js⁄_nŸhrow
 : 
	`vÆ
(
VALUE
) {} \

22 
TYPE
 
vÆ
; \

23 }

	)

25 
	#js⁄_globÆ_de˛_°rc⁄fig
(
TYPE
, 
NAME
, 
VALUE
) \

26 
˛ass
 
js⁄SögÀt⁄
 ## 
NAME
 { \

27 
public
: \

28 
ölöe
 
TYPE
 & 
	`gëVÆue
(Ë
js⁄_nŸhrow
 { \

29 
js⁄SögÀt⁄
 ## 
NAME
 
sögÀ
; \

30  
sögÀ
.
vÆ
; \

32 
¥Ÿe˘ed
: \

33 
ölöe
 
js⁄SögÀt⁄
 ## 
	`NAME
(Ë
js⁄_nŸhrow
 { \

34 c⁄° 
°d
::
°rög
 
tmp
 = std::
	`°rög
(
VALUE
); \

35 
vÆ
 = 
	`js⁄_°rög
(
tmp
.
	`begö
(),Åmp.
	`íd
()); \

37 
TYPE
 
vÆ
; \

38 }

	)

40 
	#js⁄_globÆ
(
NAME
Ë
js⁄SögÀt⁄
 ## NAME::
	`gëVÆue
()

	)

42 
	~<°rög
>

43 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
EMPTY_JSON_STRING
, );

44 
js⁄_globÆ_de˛
(
°d
::
°rög
, 
EMPTY_STD_STRING
, );

46 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
CONST_TRUE
, 
JSON_TEXT
("true"));

47 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
CONST_FALSE
, 
JSON_TEXT
("false"));

48 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
CONST_NULL
, 
JSON_TEXT
("null"));

50 #i‚de‡
JSON_NEWLINE


51 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
NEW_LINE
, 
JSON_TEXT
("\n"));

53 
js⁄_globÆ_de˛_°rc⁄fig
(
js⁄_°rög
, 
NEW_LINE
, 
JSON_NEWLINE
);

56 #ifde‡
JSON_WRITE_BASH_COMMENTS


57 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
SINGLELINE_COMMENT
, 
JSON_TEXT
("#"));

59 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
SINGLELINE_COMMENT
, 
JSON_TEXT
("//"));

62 #ifde‡
JSON_INDENT


63 
js⁄_globÆ_de˛_°rc⁄fig
(
js⁄_°rög
, 
INDENT
, 
JSON_INDENT
);

66 #ifde‡
JSON_MUTEX_CALLBACKS


67 
	~<m≠
>

68 
js⁄_globÆ_de˛
(
JSON_MAP
(*, ), 
MUTEX_MANAGER
, );

69 
js⁄_globÆ_de˛
(
JSON_MAP
(, JSON_MAP(*, Ë), 
THREAD_LOCKS
, );

72 #ifde‡
JSON_LIBRARY


73 #ifde‡
JSON_MEMORY_MANAGE


74 
	~"JSONMem‹y.h
"

75 
js⁄_globÆ_de˛
(
auto_ex∑nd
, 
STRING_HANDLER
, );

76 
js⁄_globÆ_de˛
(
auto_ex∑nd_node
, 
NODE_HANDLER
, );

77 #ifde‡
JSON_STREAM


78 
js⁄_globÆ_de˛
(
auto_ex∑nd_°ªam
, 
STREAM_HANDLER
, );

84 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_TOO_LONG
, 
JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

85 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_UNKNOWN_LITERAL
, 
JSON_TEXT
("Unknown JSONÜiteral: "));

86 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_NON_CONTAINER
, 
JSON_TEXT
("Calling container method onÇon-container: "));

87 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_NON_ITERATABLE
, 
JSON_TEXT
("Calling iterator method onÇon-iteratable: "));

88 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_NULL_IN_CHILDREN
, 
JSON_TEXT
("aÇullÖointer withinÅhe children"));

89 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_UNDEFINED
, 
JSON_TEXT
("UndefinedÑesults: "));

90 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_LOWER_RANGE
, 
JSON_TEXT
(" is outsideÅheÜowerÑange of "));

91 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_UPPER_RANGE
, 
JSON_TEXT
(" is outsideÅhe upperÑange of "));

92 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_NOT_BASE64
, 
JSON_TEXT
("Not base64"));

93 
js⁄_globÆ_de˛
(
js⁄_°rög
, 
ERROR_OUT_OF_MEMORY
, 
JSON_TEXT
("Out of memory"));

	@libjson/_internal/Source/JSONIterators.cpp

1 
	~"JSONNode.h
"

3 #ifde‡
JSON_ITERATORS


4 #ifde‡
JSON_REF_COUNT


5 
	#JSON_ASSERT_UNIQUE
(
x
Ë
	`JSON_ASSERT
(
öã∫Æ
 -> 
ªfcou¡
 =1, 
	`js⁄_°rög
(
	`JSON_TEXT
(x)Ë+ JSON_TEXT(" i¿n⁄ sögÀÑe„ªn˚"))

	)

7 
	#JSON_ASSERT_UNIQUE
(
x
Ë()0

	)

10 #ifde‡
JSON_MUTEX_CALLBACKS


11 
	#JSON_MUTEX_COPY2
 ,
öã∫Æ
 -> 
mylock


	)

13 
	#JSON_MUTEX_COPY2


	)

16 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$föd
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

17 
	`JSON_CHECK_INTERNAL
();

18 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("find"));

19 
	`makeUniqueI¡î«l
();

20 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©
(
«me_t
)){

21  
	`±r_to_js⁄_ôî©‹
(
ªs
);

23  
	`íd
();

24 
	}
}

26 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


27 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$föd_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

28 
	`JSON_CHECK_INTERNAL
();

29 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("find_nocase"));

30 
	`makeUniqueI¡î«l
();

31 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©_noˇ£
(
«me_t
)){

32  
	`±r_to_js⁄_ôî©‹
(
ªs
);

34  
	`íd
();

35 
	}
}

38 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$îa£
(
js⁄_ôî©‹
 
pos
Ë
js⁄_nŸhrow
 {

39 
	`JSON_CHECK_INTERNAL
();

40 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("erase"));

41 
	`JSON_ASSERT_UNIQUE
("erase 1");

42 
	`JSON_ASSERT_SAFE
(
pos
 < 
	`íd
(), 
	`JSON_TEXT
("erase out ofÑange"), Énd(););

43 
	`JSON_ASSERT_SAFE
(
pos
 >
	`begö
(), 
	`JSON_TEXT
("erase out ofÑange"),  begin(););

44 
	`dñëeJSONNode
(*(
	`js⁄_ôî©‹_±r
(
pos
)));

45 
öã∫Æ
 -> 
CHILDREN
 -> 
	`îa£
(
	`js⁄_ôî©‹_±r
(
pos
));

46  (
	`em±y
()Ë? 
	`íd
(Ë: 
pos
;

47 
	}
}

49 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$îa£
(
js⁄_ôî©‹
 
_°¨t
, c⁄° js⁄_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

50 i‡(
_°¨t
 =
_íd
)  _start;

51 
	`JSON_CHECK_INTERNAL
();

52 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("erase"));

53 
	`JSON_ASSERT_UNIQUE
("erase 3");

54 
	`JSON_ASSERT_SAFE
(
_°¨t
 <
	`íd
(), 
	`JSON_TEXT
("erase out ofÜoÑange"), Énd(););

55 
	`JSON_ASSERT_SAFE
(
_íd
 <
	`íd
(), 
	`JSON_TEXT
("erase out of hiÑange"), Énd(););

56 
	`JSON_ASSERT_SAFE
(
_°¨t
 >
	`begö
(), 
	`JSON_TEXT
("erase out ofÜoÑange"),  begin(););

57 
	`JSON_ASSERT_SAFE
(
_íd
 >
	`begö
(), 
	`JSON_TEXT
("erase out of hiÑange"),  begin(););

58 
JSONNode
 ** 
pos
 = 
	`js⁄_ôî©‹_±r
(
_°¨t
);Öo†< js⁄_ôî©‹_±r(
_íd
); ++pos){

59 
	`dñëeJSONNode
(*
pos
);

62 
öã∫Æ
 -> 
CHILDREN
 -> 
	`îa£
(
	`js⁄_ôî©‹_±r
(
_°¨t
), (
js⁄_ödex_t
)(js⁄_ôî©‹_±r(
_íd
) - json_iterator_ptr(_start)));

63  (
	`em±y
()Ë? 
	`íd
(Ë: 
_°¨t
;

64 
	}
}

66 #ifde‡
JSON_LIBRARY


67 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$ö£π
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 * 
x
Ë
js⁄_nŸhrow
 {

69 
JSONNode
::
js⁄_ôî©‹
 JSONNode::
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° 
JSONNode
 & 
x
Ë
js⁄_nŸhrow
 {

71 
	`JSON_CHECK_INTERNAL
();

72 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insert"));

73 
	`JSON_ASSERT_UNIQUE
("insert 1");

74 i‡(
	`js⁄_ôî©‹_±r
(
pos
Ë>
öã∫Æ
 -> 
CHILDREN
 -> 
	`íd
()){

75 
öã∫Æ
 -> 
	`push_back
(
x
);

76  
	`íd
() - 1;

78 
	`JSON_ASSERT_SAFE
(
pos
 >
	`begö
(), 
	`JSON_TEXT
("insert out ofÜoÑange"),  begin(););

79 #ifde‡
JSON_LIBRARY


80 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(
	`js⁄_ôî©‹_±r
(
pos
), 
x
);

82 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(
	`js⁄_ôî©‹_±r
(
pos
), 
	`√wJSONNode
(
x
));

84  
pos
;

85 
	}
}

87 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$ö£πFFF
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
 {

88 
	`JSON_CHECK_INTERNAL
();

89 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insertFFF"));

90 
	`JSON_ASSERT_UNIQUE
("insertFFF");

91 
	`JSON_ASSERT_SAFE
(
pos
 <
	`íd
(), 
	`JSON_TEXT
("insert out of highÑange"), Énd(););

92 
	`JSON_ASSERT_SAFE
(
pos
 >
	`begö
(), 
	`JSON_TEXT
("insert out ofÜowÑange"),  begin(););

93 c⁄° 
js⁄_ödex_t
 
num
 = (js⁄_ödex_t)(
_íd
 - 
_°¨t
);

94 
js⁄_auto
<
JSONNode
 *> 
	`mem
(
num
);

95 
JSONNode
 ** 
ru¬î
 = 
mem
.
±r
;

96 
JSONNode
 ** 
po
 = 
_°¨t
;Öÿ< 
_íd
; ++po){

97 *
ru¬î
++ = 
	`√wJSONNode
(*(*
po
Ë
JSON_MUTEX_COPY2
);

99 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(
	`js⁄_ôî©‹_±r
(
pos
), 
mem
.
±r
, 
num
);

100  
pos
;

101 
	}
}

103 #i‚de‡
JSON_LIBRARY


104 
	gJSONNode
::
c⁄°_ôî©‹
 
JSONNode
::
	$föd
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
 {

105 
	`JSON_CHECK_INTERNAL
();

106 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("find"));

107 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©
(
«me_t
)){

108  
JSONNode
::
	`c⁄°_ôî©‹
(
ªs
);

110  
JSONNode
::
	`c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`íd
());

111 
	}
}

113 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


114 
	gJSONNode
::
c⁄°_ôî©‹
 
JSONNode
::
	$föd_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
 {

115 
	`JSON_CHECK_INTERNAL
();

116 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("find_nocase"));

117 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©_noˇ£
(
«me_t
)){

118  
JSONNode
::
	`c⁄°_ôî©‹
(
ªs
);

120  
JSONNode
::
	`c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`íd
());

121 
	}
}

124 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$îa£
(
ªvî£_ôî©‹
 
pos
Ë
js⁄_nŸhrow
 {

125 
	`JSON_CHECK_INTERNAL
();

126 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("erase"));

127 
	`JSON_ASSERT_UNIQUE
("erase 2");

128 
	`JSON_ASSERT_SAFE
(
pos
 < 
	`ªnd
(), 
	`JSON_TEXT
("erase out ofÑange"), Ñend(););

129 
	`JSON_ASSERT_SAFE
(
pos
 >
	`rbegö
(), 
	`JSON_TEXT
("erase out ofÑange"), Ñbegin(););

130 
	`dñëeJSONNode
(*(
pos
.
ô
));

131 
öã∫Æ
 -> 
CHILDREN
 -> 
	`îa£
(
pos
.
ô
);

132  (
	`em±y
()Ë? 
	`ªnd
(Ë: 
pos
 + 1;

133 
	}
}

135 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$îa£
(
ªvî£_ôî©‹
 
_°¨t
, c⁄°Ñevî£_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

136 i‡(
_°¨t
 =
_íd
)  _start;

137 
	`JSON_CHECK_INTERNAL
();

138 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("erase"));

139 
	`JSON_ASSERT_UNIQUE
("erase 4");

140 
	`JSON_ASSERT_SAFE
(
_°¨t
 <
	`ªnd
(), 
	`JSON_TEXT
("erase out ofÜoÑange"), Ñend(););

141 
	`JSON_ASSERT_SAFE
(
_íd
 <
	`ªnd
(), 
	`JSON_TEXT
("erase out of hiÑange"), Ñend(););

142 
	`JSON_ASSERT_SAFE
(
_°¨t
 >
	`rbegö
(), 
	`JSON_TEXT
("erase out ofÜoÑange"), Ñbegin(););

143 
	`JSON_ASSERT_SAFE
(
_íd
 >
	`rbegö
(), 
	`JSON_TEXT
("erase out of hiÑange"), Ñbegin(););

144 
JSONNode
 ** 
pos
 = 
_°¨t
.
ô
;Öo†> 
_íd
.it; --pos){

145 
	`dñëeJSONNode
(*
pos
);

147 c⁄° 
js⁄_ödex_t
 
num
 = (js⁄_ödex_t)(
_°¨t
.
ô
 - 
_íd
.it);

148 
öã∫Æ
 -> 
CHILDREN
 -> 
	`îa£
(
_íd
.
ô
 + 1, 
num
, 
_°¨t
.it);

149  (
	`em±y
()Ë? 
	`ªnd
(Ë: 
_°¨t
 + 
num
;

150 
	}
}

152 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
JSONNode
 & 
x
Ë
js⁄_nŸhrow
 {

153 
	`JSON_CHECK_INTERNAL
();

154 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insert"));

155 
	`JSON_ASSERT_UNIQUE
("insert 1");

156 i‡(
pos
.
ô
 < 
öã∫Æ
 -> 
CHILDREN
 -> 
	`begö
()){

157 
öã∫Æ
 -> 
	`push_‰⁄t
(
x
);

158  
	`ªnd
() - 1;

160 
	`JSON_ASSERT_SAFE
(
pos
 >
	`rbegö
(), 
	`JSON_TEXT
("insert out ofÑange"), Ñbegin(););

161 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(++
pos
.
ô
, 
	`√wJSONNode
(
x
), 
åue
);

162  
pos
;

163 
	}
}

165 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£πRFF
(
ªvî£_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
 {

166 
	`JSON_CHECK_INTERNAL
();

167 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insertRFF"));

168 
	`JSON_ASSERT_UNIQUE
("insert RFF");

169 
	`JSON_ASSERT_SAFE
(
pos
 <
	`ªnd
(), 
	`JSON_TEXT
("insert out ofÑange"), Ñend(););

170 
	`JSON_ASSERT_SAFE
(
pos
 >
	`rbegö
(), 
	`JSON_TEXT
("insert out ofÑange"), Ñbegin(););

171 c⁄° 
js⁄_ödex_t
 
num
 = (js⁄_ödex_t)(
_íd
 - 
_°¨t
);

172 
js⁄_auto
<
JSONNode
 *> 
	`mem
(
num
);

173 
JSONNode
 ** 
ru¬î
 = 
mem
.
±r
 + 
num
;

174 
JSONNode
 ** 
po
 = 
_°¨t
;Öÿ< 
_íd
; ++po){

175 *(--
ru¬î
Ë
	`√wJSONNode
(*(*
po
Ë
JSON_MUTEX_COPY2
);

177 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(++
pos
.
ô
, 
mem
.
±r
, 
num
);

178  
pos
 - 
num
 + 1;

179 
	}
}

181 
	gJSONNode
::
ôî©‹
 
JSONNode
::
	$ö£πFRR
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
 {

182 
	`JSON_CHECK_INTERNAL
();

183 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insertFRR"));

184 
	`JSON_ASSERT_UNIQUE
("insert FRR");

185 
	`JSON_ASSERT_SAFE
(
pos
 <
	`íd
(), 
	`JSON_TEXT
("insert out ofÑange"), Énd(););

186 
	`JSON_ASSERT_SAFE
(
pos
 >
	`begö
(), 
	`JSON_TEXT
("insert out ofÑange"),  begin(););

187 c⁄° 
js⁄_ödex_t
 
num
 = (js⁄_ödex_t)(
_°¨t
 - 
_íd
);

188 
js⁄_auto
<
JSONNode
 *> 
	`mem
(
num
);

189 
JSONNode
 ** 
ru¬î
 = 
mem
.
±r
;

190 
JSONNode
 ** 
po
 = 
_°¨t
;Öÿ> 
_íd
; --po){

191 *
ru¬î
++ = 
	`√wJSONNode
(*(*
po
Ë
JSON_MUTEX_COPY2
);

193 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(
pos
.
ô
, 
mem
.
±r
, 
num
);

194  
pos
;

195 
	}
}

197 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£πRRR
(
ªvî£_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
 {

198 
	`JSON_CHECK_INTERNAL
();

199 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("insertRRR"));

200 
	`JSON_ASSERT_UNIQUE
("insert RRR");

201 
	`JSON_ASSERT_SAFE
(
pos
 <
	`ªnd
(), 
	`JSON_TEXT
("insert out ofÑange"), Ñend(););

202 
	`JSON_ASSERT_SAFE
(
pos
 >
	`rbegö
(), 
	`JSON_TEXT
("insert out ofÑange"), Ñbegin(););

203 c⁄° 
js⁄_ödex_t
 
num
 = (js⁄_ödex_t)(
_°¨t
 - 
_íd
);

204 
js⁄_auto
<
JSONNode
 *> 
	`mem
(
num
);

205 
JSONNode
 ** 
ru¬î
 = 
mem
.
±r
;

206 
JSONNode
 ** 
po
 = 
_°¨t
;Öÿ> 
_íd
; --po){

207 *
ru¬î
++ = 
	`√wJSONNode
(*(*
po
Ë
JSON_MUTEX_COPY2
);

209 
öã∫Æ
 -> 
CHILDREN
 -> 
	`ö£π
(++
pos
.
ô
, 
mem
.
±r
, 
num
);

210  
pos
 - 
num
 + 1;

211 
	}
}

	@libjson/_internal/Source/JSONMemory.cpp

1 
	~"JSONMem‹y.h
"

3 #ifde‡
JSON_MEMORY_MANAGE


4 
	~"JSONNode.h
"

5 
	gauto_ex∑nd
::
	$purge
(Ë
js⁄_nŸhrow
 {

6 
	`JSON_MAP
(*, *)::
ôî©‹
 
i
 = 
mym≠
.
	`begö
(), 
í
 = mym≠.
	`íd
(); i !=Én; ++i){

7 #i‡
	`deföed
(
JSON_DEBUG
Ë|| deföed(
JSON_SAFE
)

8 * 
ãmp
 = (*)
i
 -> 
fú°
;

9 
libjs⁄_‰ì
<>(
ãmp
);

11 
libjs⁄_‰ì
<>((*)
i
 -> 
fú°
);

14 
	}
}

16 
	gauto_ex∑nd_node
::
	$purge
(Ë
js⁄_nŸhrow
 {

17 
	`JSON_MAP
(*, 
JSONNode
 *)::
ôî©‹
 
i
 = 
mym≠
.
	`begö
(), 
í
 = mym≠.
	`íd
(); i !=Én; ++i){

18 
JSONNode
::
	`dñëeJSONNode
((JSONNodê*)
i
 -> 
£c⁄d
);

20 
	}
}

22 #ifde‡
JSON_STREAM


23 
	~"JSONSåóm.h
"

24 
	gauto_ex∑nd_°ªam
::
	$purge
(Ë
js⁄_nŸhrow
 {

25 
	`JSON_MAP
(*, 
JSONSåóm
 *)::
ôî©‹
 
i
 = 
mym≠
.
	`begö
(), 
í
 = mym≠.
	`íd
(); i !=Én; ++i){

26 
JSONSåóm
::
	`dñëeJSONSåóm
((JSONSåóm *)
i
 -> 
£c⁄d
);

28 
	}
}

32 #i‡
deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

34 #ifde‡
JSON_MEMORY_POOL


35 
	~"JSONMem‹yPoﬁ.h
"

36 
	gbuckë_poﬁ_8
<
	gMEMPOOL_1
, 
	gMEMPOOL_2
, 
	gMEMPOOL_3
, 
	gMEMPOOL_4
, 
	gMEMPOOL_5
, 
	gMEMPOOL_6
, 
	gMEMPOOL_7
, 
	gMEMPOOL_8
> 
	gjs⁄_gíîic_mempoﬁ
;

39 ˛as†
	cmempoﬁ_ˇŒback_£âî
 {

40 
	mpublic
:

41 
LIBJSON_OBJECT
(
mempoﬁ_ˇŒback_£âî
);

42 
ölöe
 
	$mempoﬁ_ˇŒback_£âî
(Ë
js⁄_nŸhrow
 {

43 ` 
LIBJSON_CTOR
;

44 
mempoﬁ_ˇŒbacks
::
	`£t
(
°d
::
mÆloc
, std::
ªÆloc
, std::
‰ì
);

46 
¥iv©e
:

47 
ölöe
 
	`mempoﬁ_ˇŒback_£âî
(c⁄° 
mempoﬁ_ˇŒback_£âî
 & 
o
);

48 
ölöe
 
mempoﬁ_ˇŒback_£âî
 & 
›î©‹
 = (c⁄° mempoﬁ_ˇŒback_£âî & 
o
);

49 
	}
};

50 
mempoﬁ_ˇŒback_£âî
 
	g__mempoﬁˇŒback£âî
;

53 
	~"JSONSögÀt⁄.h
"

55 * 
	gJSONMem‹y
::
	$js⁄_mÆloc
(
size_t
 
siz
Ë
js⁄_nŸhrow
 {

56 #ifde‡
JSON_MEMORY_POOL


57  
js⁄_gíîic_mempoﬁ
.
	`Æloˇã
(
siz
);

59 i‡(
js⁄_mÆloc_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_mÆloc_t>::
	`gë
()){

60 #if(
	`deföed
(
JSON_DEBUG
Ë&& (!deföed(
JSON_MEMORY_CALLBACKS
)))

61 * 
ªsu…
 = 
	`ˇŒback
(
siz
);

62 
	`JSON_ASSERT
(
ªsu…
, 
	`JSON_TEXT
("Out of memory"));

63  
ªsu…
;

65  
	`ˇŒback
(
siz
);

68 #if(
	`deföed
(
JSON_DEBUG
Ë&& (!deföed(
JSON_MEMORY_CALLBACKS
)))

69 * 
ªsu…
 = 
°d
::
	`mÆloc
(
siz
);

70 
	`JSON_ASSERT
(
ªsu…
, 
	`JSON_TEXT
("Out of memory"));

71  
ªsu…
;

73  
°d
::
	`mÆloc
(
siz
);

76 
	}
}

78 
	gJSONMem‹y
::
	$js⁄_‰ì
(* 
±r
Ë
js⁄_nŸhrow
 {

79 #ifde‡
JSON_MEMORY_POOL


80 
js⁄_gíîic_mempoﬁ
.
	`dóŒoˇã
(
±r
);

82 i‡(
js⁄_‰ì_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_‰ì_t>::
	`gë
()){

83 
	`ˇŒback
(
±r
);

85 
°d
::
	`‰ì
(
±r
);

88 
	}
}

90 * 
	gJSONMem‹y
::
	$js⁄_ªÆloc
(* 
±r
, 
size_t
 
siz
Ë
js⁄_nŸhrow
 {

91 #ifde‡
JSON_MEMORY_POOL


92  
js⁄_gíîic_mempoﬁ
.
	`ªÆloˇã
(
±r
, 
siz
);

94 i‡(
js⁄_ªÆloc_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_ªÆloc_t>::
	`gë
()){

95 #if(
	`deföed
(
JSON_DEBUG
Ë&& (!deföed(
JSON_MEMORY_CALLBACKS
)))

96 * 
ªsu…
 = 
	`ˇŒback
(
±r
, 
siz
);

97 
	`JSON_ASSERT
(
ªsu…
, 
	`JSON_TEXT
("Out of memory"));

98  
ªsu…
;

100  
	`ˇŒback
(
±r
, 
siz
);

103 #if(
	`deföed
(
JSON_DEBUG
Ë&& (!deföed(
JSON_MEMORY_CALLBACKS
)))

104 * 
ªsu…
 = 
°d
::
	`ªÆloc
(
±r
, 
siz
);

105 
	`JSON_ASSERT
(
ªsu…
, 
	`JSON_TEXT
("Out of memory"));

106  
ªsu…
;

108  
°d
::
	`ªÆloc
(
±r
, 
siz
);

111 
	}
}

113 #ifde‡
JSON_MEMORY_POOL


115 * 
	$mÆloc_¥oxy
(
size_t
 
siz
Ë
js⁄_nŸhrow
 {

116 i‡(
js⁄_mÆloc_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_mÆloc_t>::
	`gë
()){

117  
	`ˇŒback
(
siz
);

119  
°d
::
	`mÆloc
(
siz
);

120 
	}
}

122 * 
	$ªÆloc_¥oxy
(* 
±r
, 
size_t
 
siz
Ë
js⁄_nŸhrow
 {

123 i‡(
js⁄_ªÆloc_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_ªÆloc_t>::
	`gë
()){

124  
	`ˇŒback
(
±r
, 
siz
);

126  
°d
::
	`ªÆloc
(
±r
, 
siz
);

127 
	}
}

129 
	$‰ì_¥oxy
(* 
±r
){

130 i‡(
js⁄_‰ì_t
 
ˇŒback
 = 
JSONSögÀt⁄
<js⁄_‰ì_t>::
	`gë
()){

131 
	`ˇŒback
(
±r
);

133 
°d
::
	`‰ì
(
±r
);

135 
	}
}

139 
	gJSONMem‹y
::
	$ªgi°îMem‹yCÆlbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
Ë
js⁄_nŸhrow
 {

140 
JSONSögÀt⁄
<
js⁄_mÆloc_t
>::
	`£t
(
mÆ
);

141 
JSONSögÀt⁄
<
js⁄_ªÆloc_t
>::
	`£t
(
ªÆ
);

142 
JSONSögÀt⁄
<
js⁄_‰ì_t
>::
	`£t
(
‰e
);

143 #ifde‡
JSON_MEMORY_POOL


144 
mempoﬁ_ˇŒbacks
::
	`£t
(
mÆloc_¥oxy
, 
ªÆloc_¥oxy
, 
‰ì_¥oxy
);

146 
	}
}

	@libjson/_internal/Source/JSONMemory.h

1 #i‚de‡
JSON_MEMORY_H


2 
	#JSON_MEMORY_H


	)

4 
	~<c°dlib
>

5 
	~<c°rög
>

6 
	~"JSONDebug.h
"

8 #i‡
deföed
(
JSON_DEBUG
Ë|| deföed(
JSON_SAFE
)

9 
	#JSON_FREE_PASSTYPE
 &

	)

11 
	#JSON_FREE_PASSTYPE


	)

14 #i‡
deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

15 ˛as†
	cJSONMem‹y
 {

16 
	mpublic
:

17 * 
	$js⁄_mÆloc
(
size_t
 
siz
Ë
js⁄_mÆloc_©å
;

18 * 
	$js⁄_ªÆloc
(* 
±r
, 
size_t
 
siz
Ë
js⁄_mÆloc_©å
;

19 
	$js⁄_‰ì
(* 
±r
Ë
js⁄_nŸhrow
;

20 
	$ªgi°îMem‹yCÆlbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

21 
¥iv©e
:

22 
	`JSONMem‹y
();

25 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
 T * 
	$js⁄_mÆloc
(
size_t
 
cou¡
Ë
js⁄_mÆloc_©å
;

26 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
 T * 
	$js⁄_mÆloc
(
size_t
 
cou¡
Ë
js⁄_nŸhrow
 {

27  (
T
 *)
JSONMem‹y
::
	`js⁄_mÆloc
((TË* 
cou¡
);

28 
	}
}

30 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 * 
	$js⁄_ªÆloc
(
T
 * 
±r
, 
size_t
 
cou¡
Ë
js⁄_mÆloc_©å
;

31 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
 T * 
	$js⁄_ªÆloc
(
T
 * 
±r
, 
size_t
 
cou¡
Ë
js⁄_nŸhrow
 {

32  (
T
 *)
JSONMem‹y
::
	`js⁄_ªÆloc
(
±r
, (TË* 
cou¡
);

33 
	}
}

35 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	$libjs⁄_‰ì
(
T
 * 
JSON_FREE_PASSTYPE
 
±r
Ë
js⁄_nŸhrow
 {

36 
JSONMem‹y
::
	`js⁄_‰ì
(
±r
);

37 #i‡
	`deföed
(
JSON_DEBUG
Ë|| deföed(
JSON_SAFE
)

38 
±r
 = 0;

40 
	}
}

43 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 * 
	$js⁄_mÆloc
(
size_t
 
cou¡
Ë
js⁄_mÆloc_©å
;

44 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
 T * 
	$js⁄_mÆloc
(
size_t
 
cou¡
Ë
js⁄_nŸhrow
 {

45 #ifde‡
JSON_DEBUG


46 * 
ªsu…
 = 
°d
::
	`mÆloc
(
cou¡
 * (
T
));

47 
	`JSON_ASSERT
(
ªsu…
 !0, 
	`JSON_TEXT
("Out of memory"));

48 #ifde‡
JSON_NULL_MEMORY


49 
°d
::
	`mem£t
(
ªsu…
, '\0', 
cou¡
 * (
T
));

51  (
T
 *)
ªsu…
;

53  (
T
 *)
°d
::
	`mÆloc
(
cou¡
 * (T));

55 
	}
}

57 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
	$libjs⁄_‰ì
(
T
 * 
JSON_FREE_PASSTYPE
 
±r
Ë
js⁄_nŸhrow
 {

58 
°d
::
	`‰ì
(
±r
);

59 #i‡
	`deföed
(
JSON_DEBUG
Ë|| deföed(
JSON_SAFE
)

60 
±r
 = 0;

62 
	}
}

64 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
ölöe
 
T
 * 
	$js⁄_ªÆloc
(
T
 * 
±r
, 
size_t
 
cou¡
Ë
js⁄_mÆloc_©å
;

65 
ãm∂©e
 <
ty≥«me
 
T
> 
ölöe
 T * 
	$js⁄_ªÆloc
(
T
 * 
±r
, 
size_t
 
cou¡
Ë
js⁄_nŸhrow
 {

66 #ifde‡
JSON_DEBUG


67 * 
ªsu…
 = 
°d
::
	`ªÆloc
(
±r
, 
cou¡
 * (
T
));

68 
	`JSON_ASSERT
(
ªsu…
 !0, 
	`JSON_TEXT
("Out of memory"));

69  (
T
 *)
ªsu…
;

71  (
T
 *)
°d
::
	`ªÆloc
(
±r
, 
cou¡
 * (T));

73 
	}
}

76 #ifde‡
JSON_MEMORY_MANAGE


77 
	~<m≠
>

78 
˛ass
 
	gJSONNode
;

79 
	sauto_ex∑nd
 {

80 
	mpublic
:

81 
LIBJSON_OBJECT
(
auto_ex∑nd
);

82 
auto_ex∑nd
(Ë
	mjs⁄_nŸhrow
 : 
mym≠
(){ 
LIBJSON_CTOR
;}

83 ~
auto_ex∑nd
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mLIBJSON_DTOR
; }

84 
purge
(Ë
	mjs⁄_nŸhrow
;

85 
ölöe
 
˛ór
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mmym≠
.clear(); }

86 
ölöe
 * 
ö£π
(* 
±r
Ë
	mjs⁄_nŸhrow
 { 
	mmym≠
[±r] =Öå;  
	m±r
; }

87 
ölöe
 
ªmove
(* 
±r
Ë
	mjs⁄_nŸhrow
 {

88 
JSON_MAP
(*, *)::
ôî©‹
 
i
 = 
mym≠
.
föd
(
±r
);

89 
JSON_ASSERT
(
i
 !
mym≠
.
íd
(), 
JSON_TEXT
("RemovingáÇon-managed item"));

90 
	mmym≠
.
îa£
(
i
);

92 
JSON_MAP
(*, *Ë
	mmym≠
;

93 
	m¥iv©e
:

94 
auto_ex∑nd
(constáuto_expand &);

95 
	mauto_ex∑nd
 & 
	m›î©‹
 = (c⁄° 
auto_ex∑nd
 &);

98 
	sauto_ex∑nd_node
 {

99 
	mpublic
:

100 
LIBJSON_OBJECT
(
auto_ex∑nd_node
);

101 
auto_ex∑nd_node
(Ë
	mjs⁄_nŸhrow
 : 
mym≠
(){ 
LIBJSON_CTOR
; }

102 ~
auto_ex∑nd_node
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mLIBJSON_DTOR
; }

103 
purge
(Ë
	mjs⁄_nŸhrow
 ;

104 
ölöe
 
˛ór
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mmym≠
.clear(); }

105 
ölöe
 
JSONNode
 * 
ö£π
(JSONNodê* 
±r
Ë
	mjs⁄_nŸhrow
 { 
	mmym≠
[±r] =Öå;  
	m±r
; }

106 
ölöe
 
ªmove
(* 
±r
Ë
	mjs⁄_nŸhrow
 {

107 
JSON_MAP
(*, 
JSONNode
 *)::
ôî©‹
 
i
 = 
mym≠
.
föd
(
±r
);

108 if(
js⁄_likñy
(
i
 !
mym≠
.
íd
())Ëmym≠.
îa£
(i);

110 
JSON_MAP
(*, 
JSONNode
 *Ë
	mmym≠
;

111 
	m¥iv©e
:

112 
auto_ex∑nd_node
(constáuto_expand_node &);

113 
	mauto_ex∑nd_node
 & 
	m›î©‹
 = (c⁄° 
auto_ex∑nd_node
 &);

116 #ifde‡
JSON_STREAM


117 
˛ass
 
	gJSONSåóm
;

118 
	sauto_ex∑nd_°ªam
 {

119 
	mpublic
:

120 
LIBJSON_OBJECT
(
auto_ex∑nd_°ªam
);

121 
auto_ex∑nd_°ªam
(Ë
	mjs⁄_nŸhrow
 : 
mym≠
(){ 
LIBJSON_CTOR
; }

122 ~
auto_ex∑nd_°ªam
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mLIBJSON_DTOR
; }

123 
purge
(Ë
	mjs⁄_nŸhrow
 ;

124 
ölöe
 
˛ór
(Ë
	mjs⁄_nŸhrow
 { 
purge
(); 
	mmym≠
.clear(); }

125 
ölöe
 
JSONSåóm
 * 
ö£π
(JSONSåóm * 
±r
Ë
	mjs⁄_nŸhrow
 { 
	mmym≠
[±r] =Öå;  
	m±r
; }

126 
ölöe
 
ªmove
(* 
±r
Ë
	mjs⁄_nŸhrow
 {

127 
JSON_MAP
(*, 
JSONSåóm
 *)::
ôî©‹
 
i
 = 
mym≠
.
föd
(
±r
);

128 if(
js⁄_likñy
(
i
 !
mym≠
.
íd
())Ëmym≠.
îa£
(i);

130 
JSON_MAP
(*, 
JSONSåóm
 *Ë
	mmym≠
;

131 
	m¥iv©e
:

132 
auto_ex∑nd_°ªam
(constáuto_expand_stream &);

133 
	mauto_ex∑nd_°ªam
 & 
	m›î©‹
 = (c⁄° 
auto_ex∑nd_°ªam
 &);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
>

140 ˛as†
	cjs⁄_auto
 {

141 
	mpublic
:

142 
LIBJSON_OBJECT
(
js⁄_auto
);

143 
	$js⁄_auto
(Ë
js⁄_nŸhrow
 : 
	$±r
(0){ 
LIBJSON_CTOR
; }

144 
	$js⁄_auto
(
size_t
 
cou¡
Ë
js⁄_nŸhrow
 : 
	`±r
(
js⁄_mÆloc
<
T
>(cou¡)){ 
LIBJSON_CTOR
; 
	}
}

145 
	$js⁄_auto
(
T
 * 
¨g
Ë
js⁄_nŸhrow
 : 
	$±r
(
¨g
){ 
LIBJSON_CTOR
; 
	}
}

146 ~
	$js⁄_auto
(Ë
js⁄_nŸhrow
 {

147 
libjs⁄_‰ì
<
T
>(
±r
);

148 
LIBJSON_DTOR
;

149 
	}
}

150 
ölöe
 
	$£t
(
T
 * 
p
Ë
js⁄_nŸhrow
{

151 
±r
 = 
p
;

152 
	}
}

153 
T
 * 
	g±r
;

154 
	g¥iv©e
:

155 
js⁄_auto
(const json_auto &);

156 
	gjs⁄_auto
 & 
	g›î©‹
 =(c⁄° 
js⁄_auto
 &);

160 
ölöe
 
	$˛órSåög
(
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
 {

161 #ifde‡
JSON_LESS_MEMORY


162 
	`js⁄_°rög
().
	`sw≠
(
°r
);

164 
°r
.
	`˛ór
();

166 
	}
}

169 
ölöe
 
	$shrökSåög
(
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
 {

170 #ifde‡
JSON_LESS_MEMORY


171 i‡(
°r
.
	`ˇ∑côy
(Ë!°r.
	`Àngth
()Ë°∏
	`js⁄_°rög
(°r.
	`begö
(), så.
	`íd
());

173 
	}
}

	@libjson/_internal/Source/JSONMemoryPool.h

1 #i‚de‡
LIBJSON_GUARD_MEMORY_POOL_H


2 
	#LIBJSON_GUARD_MEMORY_POOL_H


	)

4 #ifde‡
JSON_MEMORY_POOL


6 
	~"../Dïídícõs/mempoﬁ++/mempoﬁ.h
"

9 
	#js⁄PoﬁP¨t
(
byãs_≥r_block
, 
thúty_£c⁄ds_of_mem
Ëbyãs_≥r_block, (—húty_£c⁄ds_of_mem * 
JSON_MEMORY_POOL
 / 32Ë/ byãs_≥r_block)

	)

11 #ifde‡
JSON_PREPARSE


12 
	#NODEPOOL
 
	`js⁄PoﬁP¨t
((
JSONNode
), 1)

	)

13 
	#INTERNALNODEPOOL
 
	`js⁄PoﬁP¨t
((
öã∫ÆJSONNode
), 3)

	)

14 
	#MEMPOOL_1
 
	`js⁄PoﬁP¨t
(8, 2)

	)

15 
	#MEMPOOL_2
 
	`js⁄PoﬁP¨t
(16, 2)

	)

16 
	#MEMPOOL_3
 
	`js⁄PoﬁP¨t
(32, 2)

	)

17 
	#MEMPOOL_4
 
	`js⁄PoﬁP¨t
(64, 2)

	)

18 
	#MEMPOOL_5
 
	`js⁄PoﬁP¨t
(128, 3)

	)

19 
	#MEMPOOL_6
 
	`js⁄PoﬁP¨t
(256, 4)

	)

20 
	#MEMPOOL_7
 
	`js⁄PoﬁP¨t
(512, 5)

	)

21 
	#MEMPOOL_8
 
	`js⁄PoﬁP¨t
(4096, 8)

	)

23 
	#NODEPOOL
 
	`js⁄PoﬁP¨t
((
JSONNode
), 2)

	)

24 
	#INTERNALNODEPOOL
 
	`js⁄PoﬁP¨t
((
öã∫ÆJSONNode
), 7)

	)

25 
	#MEMPOOL_1
 
	`js⁄PoﬁP¨t
(8, 1)

	)

26 
	#MEMPOOL_2
 
	`js⁄PoﬁP¨t
(16, 1)

	)

27 
	#MEMPOOL_3
 
	`js⁄PoﬁP¨t
(32, 1)

	)

28 
	#MEMPOOL_4
 
	`js⁄PoﬁP¨t
(64, 1)

	)

29 
	#MEMPOOL_5
 
	`js⁄PoﬁP¨t
(128, 3)

	)

30 
	#MEMPOOL_6
 
	`js⁄PoﬁP¨t
(256, 3)

	)

31 
	#MEMPOOL_7
 
	`js⁄PoﬁP¨t
(512, 5)

	)

32 
	#MEMPOOL_8
 
	`js⁄PoﬁP¨t
(4096, 8)

	)

	@libjson/_internal/Source/JSONNode.cpp

1 
	~"JSONNode.h
"

3 
	#IMPLEMENT_CTOR
(
ty≥
)\

4 
JSONNode
::
	`JSONNode
(c⁄° 
js⁄_°rög
 & 
«me_t
, 
ty≥
 
vÆue_t
Ë
js⁄_nŸhrow
 : 
	`öã∫Æ
(
öã∫ÆJSONNode
::
	`√wI¡î«l
()){\

5 
öã∫Æ
 -> 
	`Së
(
vÆue_t
);\

6 
öã∫Æ
 -> 
	`£äame
(
«me_t
);\

7 
LIBJSON_CTOR
;\

8 }

	)

9 
	$IMPLEMENT_FOR_ALL_TYPES
(
IMPLEMENT_CTOR
)

11 #i‚de‡
JSON_LIBRARY


12 
JSONNode
::
	$JSONNode
(c⁄° 
js⁄_°rög
 & 
«me_t
, c⁄° 
js⁄_ch¨
 * 
vÆue_t
Ë
js⁄_nŸhrow
 : 
	`öã∫Æ
(
öã∫ÆJSONNode
::
	$√wI¡î«l
()){

13 
öã∫Æ
 -> 
	`Së
(
	`js⁄_°rög
(
vÆue_t
));

14 
öã∫Æ
 -> 
	`£äame
(
«me_t
);

15 
LIBJSON_CTOR
;

16 
	}
}

19 #i‡(
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
))

20 
	~"JSONW‹kî.h
"

21 
JSONNode
 
	gJSONNode
::
	$°rögTy≥
(c⁄° 
js⁄_°rög
 & 
°r
){

22 
JSONNode
 
ªs
;

23 
ªs
.
	`£t_«me
(
	`js⁄_globÆ
(
EMPTY_JSON_STRING
));

24 #ifde‡
JSON_LESS_MEMORY


25 
ªs
 = 
JSONW‹kî
::
	`FixSåög
(
°r
,Ñes.
öã∫Æ
, 
Ál£
);

27 
ªs
 = 
JSONW‹kî
::
	`FixSåög
(
°r
,Ñes.
öã∫Æ
 -> 
_°rög_ícoded
);

29  
ªs
;

30 
	}
}

32 
	gJSONNode
::
	$£t_«me_
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
 {

33 #ifde‡
JSON_LESS_MEMORY


34 
js⁄_°rög
 
_√w«me
 = 
JSONW‹kî
::
	`FixSåög
(
√w«me
, 
öã∫Æ
, 
åue
);

36 
js⁄_°rög
 
_√w«me
 = 
JSONW‹kî
::
	`FixSåög
(
√w«me
, 
öã∫Æ
 -> 
_«me_ícoded
);

38 
	`£t_«me
(
_√w«me
);

39 
	}
}

42 #ifde‡
JSON_CASTABLE


43 
JSONNode
 
	gJSONNode
::
	$as_node
(Ëc⁄° 
js⁄_nŸhrow
 {

44 
	`JSON_CHECK_INTERNAL
();

45 i‡(
	`ty≥
(Ë=
JSON_NODE
){

46  *
this
;

47 } i‡(
	`ty≥
(Ë=
JSON_ARRAY
){

48 
JSONNode
 
	`ªs
(
	`du∂iˇã
());

49 
ªs
.
öã∫Æ
 -> 
_ty≥
 = 
JSON_NODE
;

50  
ªs
;

52 #ifde‡
JSON_MUTEX_CALLBACKS


53 i‡(
öã∫Æ
 -> 
mylock
 != 0){

54 
JSONNode
 
	`ªs
(
JSON_NODE
);

55 
ªs
.
	`£t_muãx
(
öã∫Æ
 -> 
mylock
);

56  
ªs
;

59  
	`JSONNode
(
JSON_NODE
);

60 
	}
}

62 
JSONNode
 
	gJSONNode
::
	$as_¨øy
(Ëc⁄° 
js⁄_nŸhrow
 {

63 
	`JSON_CHECK_INTERNAL
();

64 i‡(
	`ty≥
(Ë=
JSON_ARRAY
){

65  *
this
;

66 } i‡(
	`ty≥
(Ë=
JSON_NODE
){

67 
JSONNode
 
	`ªs
(
	`du∂iˇã
());

68 
ªs
.
öã∫Æ
 -> 
_ty≥
 = 
JSON_ARRAY
;

69 
	`js⁄_f‹óch
(
ªs
.
öã∫Æ
 -> 
CHILDREN
, 
ru¬î
){

70 (*
ru¬î
Ë-> 
	`˛ór_«me
();

72  
ªs
;

74 #ifde‡
JSON_MUTEX_CALLBACKS


75 i‡(
öã∫Æ
 -> 
mylock
 != 0){

76 
JSONNode
 
	`ªs
(
JSON_ARRAY
);

77 
ªs
.
	`£t_muãx
(
öã∫Æ
 -> 
mylock
);

78  
ªs
;

81  
	`JSONNode
(
JSON_ARRAY
);

82 
	}
}

84 
	gJSONNode
::
	$ˇ°
(
√wty≥
Ë
js⁄_nŸhrow
 {

85 
	`JSON_CHECK_INTERNAL
();

86 i‡(
√wty≥
 =
	`ty≥
()) ;

88 
√wty≥
){

89 
JSON_NULL
:

90 
	`nuŒify
();

92 
JSON_STRING
:

93 *
this
 = 
	`as_°rög
();

95 
JSON_NUMBER
:

96 *
this
 = 
	`as_Êﬂt
();

98 
JSON_BOOL
:

99 *
this
 = 
	`as_boﬁ
();

101 
JSON_ARRAY
:

102 *
this
 = 
	`as_¨øy
();

104 
JSON_NODE
:

105 *
this
 = 
	`as_node
();

108 
	`JSON_FAIL
(
	`JSON_TEXT
("castÅo unknownÅype"));

109 
	}
}

113 #ifde‡
JSON_REF_COUNT


114 
	gJSONNode
::
	$mîge
(
JSONNode
 & 
Ÿhî
Ë
js⁄_nŸhrow
 {

116 
JSONNode
::
	$mîge
(
JSONNode
 &Ë
js⁄_nŸhrow
 {

118 
	`JSON_CHECK_INTERNAL
();

119 #ifde‡
JSON_REF_COUNT


120 i‡(
öã∫Æ
 =
Ÿhî
.internal) ;

121 
	`JSON_ASSERT
(*
this
 =
Ÿhî
, 
	`JSON_TEXT
("mergingÅwoÇodesÅhatáren'tÉqual"));

122 i‡(
öã∫Æ
 -> 
ªfcou¡
 < 
Ÿhî
.internal ->Ñefcount){

123 *
this
 = 
Ÿhî
;

125 
Ÿhî
 = *
this
;

128 
	}
}

130 #ifde‡
JSON_REF_COUNT


131 
	gJSONNode
::
	$mîge
(
JSONNode
 * 
Ÿhî
Ë
js⁄_nŸhrow
 {

132 
	`JSON_CHECK_INTERNAL
();

133 i‡(
öã∫Æ
 =
Ÿhî
 -> internal) ;

134 *
Ÿhî
 = *
this
;

135 
	}
}

138 
	gJSONNode
::
	$mîge
(
num
, ...Ë
js⁄_nŸhrow
 {

140 
JSONNode
::
	$mîge
(, ...Ë
js⁄_nŸhrow
 {

142 
	`JSON_CHECK_INTERNAL
();

143 #ifde‡
JSON_REF_COUNT


144 
va_li°
 
¨gs
;

145 
	`va_°¨t
(
¨gs
, 
num
);

146 
i
 = 0; i < 
num
; ++i){

147 
	`mîge
(
	`va_¨g
(
¨gs
, 
JSONNode
*));

149 
	`va_íd
(
¨gs
);

151 
	}
}

153 
JSONNode
 
	gJSONNode
::
	$du∂iˇã
(Ëc⁄° 
js⁄_nŸhrow
 {

154 
	`JSON_CHECK_INTERNAL
();

155 
JSONNode
 
	`myc›y
(*
this
);

156 #ifde‡
JSON_REF_COUNT


157 
	`JSON_ASSERT
(
öã∫Æ
 =
myc›y
.öã∫Æ, 
	`JSON_TEXT
("copy ctor failedÅoÑef count correctly"));

158 
myc›y
.
	`makeUniqueI¡î«l
();

160 
	`JSON_ASSERT
(
öã∫Æ
 !
myc›y
.öã∫Æ, 
	`JSON_TEXT
("makeUniqueInternal failed"));

161  
myc›y
;

162 
	}
}

164 
	gJSONNode
 & JSONNode::
	$©
(
js⁄_ödex_t
 
pos
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

165 
	`JSON_CHECK_INTERNAL
();

166 i‡(
	`js⁄_u∆ikñy
(
pos
 >
öã∫Æ
 -> 
	`size
())){

167 
	`JSON_FAIL
(
	`JSON_TEXT
("at() out of bounds"));

168 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

170  (*
this
)[
pos
];

171 
	}
}

173 c⁄° 
	gJSONNode
 & JSONNode::
	$©
(
js⁄_ödex_t
 
pos
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
) {

174 
	`JSON_CHECK_INTERNAL
();

175 i‡(
	`js⁄_u∆ikñy
(
pos
 >
öã∫Æ
 -> 
	`size
())){

176 
	`JSON_FAIL
(
	`JSON_TEXT
("at() const out of bounds"));

177 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

179  (*
this
)[
pos
];

180 
	}
}

182 
	gJSONNode
 & JSONNode::
›î©‹
[](
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
 {

183 
JSON_CHECK_INTERNAL
();

184 
JSON_ASSERT
(
pos
 < 
öã∫Æ
 -> 
size
(), 
JSON_TEXT
("[] out of bounds"));

185 
makeUniqueI¡î«l
();

186  *(
	göã∫Æ
 -> 
©
(
pos
));

189 c⁄° 
	gJSONNode
 & JSONNode::
›î©‹
[](
js⁄_ödex_t
 
pos
Ëc⁄° 
js⁄_nŸhrow
 {

190 
JSON_CHECK_INTERNAL
();

191 
JSON_ASSERT
(
pos
 < 
öã∫Æ
 -> 
size
(), 
JSON_TEXT
("[] const out of bounds"));

192  *(
	göã∫Æ
 -> 
©
(
pos
));

195 
	gJSONNode
 & JSONNode::
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

196 
	`JSON_CHECK_INTERNAL
();

197 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("at"));

198 
	`makeUniqueI¡î«l
();

199 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©
(
«me_t
)){

200  *(*
ªs
);

202 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("© couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

203 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

204 
	}
}

206 c⁄° 
	gJSONNode
 & JSONNode::
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
) {

207 
	`JSON_CHECK_INTERNAL
();

208 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("at"));

209 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©
(
«me_t
)){

210  *(*
ªs
);

212 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("© c⁄° couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

213 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

214 
	}
}

216 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


217 
	gJSONNode
 & JSONNode::
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

218 
	`JSON_CHECK_INTERNAL
();

219 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("at_nocase"));

220 
	`makeUniqueI¡î«l
();

221 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©_noˇ£
(
«me_t
)){

222  *(*
ªs
);

224 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("©_noˇ£ couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

225 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

226 
	}
}

228 c⁄° 
	gJSONNode
 & JSONNode::
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
) {

229 
	`JSON_CHECK_INTERNAL
();

230 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("at_nocase"));

231 i‡(
JSONNode
 ** 
ªs
 = 
öã∫Æ
 -> 
	`©_noˇ£
(
«me_t
)){

232  *(*
ªs
);

234 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("©_noˇ£ c⁄° couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

235 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

236 
	}
}

239 #i‚de‡
JSON_LIBRARY


240 
	sauto_dñëe
 {

241 
	mpublic
:

242 
auto_dñëe
(
JSONNode
 * 
node
Ë
js⁄_nŸhrow
 : 
mynode
(node){};

243 ~
auto_dñëe
(Ë
	mjs⁄_nŸhrow
 { 
	mJSONNode
::
dñëeJSONNode
(
mynode
); };

244 
JSONNode
 * 
	mmynode
;

245 
	m¥iv©e
:

246 
auto_dñëe
(constáuto_delete &);

247 
	mauto_dñëe
 & 
	m›î©‹
 = (c⁄° 
auto_dñëe
 &);

251 
JSONNode
 
JSON_PTR_LIB
 
	gJSONNode
::
	$p›_back
(
js⁄_ödex_t
 
pos
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

252 
	`JSON_CHECK_INTERNAL
();

253 i‡(
	`js⁄_u∆ikñy
(
pos
 >
öã∫Æ
 -> 
	`size
())){

254 
	`JSON_FAIL
(
	`JSON_TEXT
("pop_back out of bounds"));

255 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

257 
	`makeUniqueI¡î«l
();

258 #ifde‡
JSON_LIBRARY


259  
öã∫Æ
 -> 
	`p›_back
(
pos
);

261 
auto_dñëe
 
	`ãmp
(
öã∫Æ
 -> 
	`p›_back
(
pos
));

262  *
ãmp
.
mynode
;

264 
	}
}

266 
JSONNode
 
JSON_PTR_LIB
 
	gJSONNode
::
	$p›_back
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

267 
	`JSON_CHECK_INTERNAL
();

268 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("pop_back"));

269 #ifde‡
JSON_LIBRARY


270  
öã∫Æ
 -> 
	`p›_back
(
«me_t
);

272 i‡(
JSONNode
 * 
ªs
 = 
öã∫Æ
 -> 
	`p›_back
(
«me_t
)){

273 
auto_dñëe
 
	`ãmp
(
ªs
);

274  *(
ãmp
.
mynode
);

276 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("p›_back c⁄° couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

277 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

279 
	}
}

281 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


282 
JSONNode
 
JSON_PTR_LIB
 
	gJSONNode
::
	$p›_back_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
) {

283 
	`JSON_CHECK_INTERNAL
();

284 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("pop_back_no_case"));

285 #ifde‡
JSON_LIBRARY


286  
öã∫Æ
 -> 
	`p›_back_noˇ£
(
«me_t
);

288 i‡(
JSONNode
 * 
ªs
 = 
öã∫Æ
 -> 
	`p›_back_noˇ£
(
«me_t
)){

289 
auto_dñëe
 
	`ãmp
(
ªs
);

290  *(
ãmp
.
mynode
);

292 
	`JSON_FAIL
(
	`js⁄_°rög
(
	`JSON_TEXT
("p›_back_noˇ£ couldÇŸ föd chûd byÇame: ")Ë+ 
«me_t
);

293 
	`js⁄_throw
(
°d
::
	`out_of_ønge
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)));

295 
	}
}

298 #ifde‡
JSON_MEMORY_POOL


299 
	~"JSONMem‹yPoﬁ.h
"

300 
	gmem‹y_poﬁ
<
	gNODEPOOL
> 
	gjs⁄_node_mempoﬁ
;

303 
	gJSONNode
::
	$dñëeJSONNode
(
JSONNode
 * 
±r
Ë
js⁄_nŸhrow
 {

304 #ifde‡
JSON_MEMORY_POOL


305 
±r
 -> ~
	`JSONNode
();

306 
js⁄_node_mempoﬁ
.
	`dóŒoˇã
((*)
±r
);

307 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

308 
±r
 -> ~
	`JSONNode
();

309 
libjs⁄_‰ì
<
JSONNode
>(
±r
);

311 
dñëe
 
±r
;

313 
	}
}

315 
ölöe
 
JSONNode
 * 
	$_√wJSONNode
(c⁄° 
JSONNode
 & 
‹ig
) {

316 #ifde‡
JSON_MEMORY_POOL


317  
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
‹ig
);

318 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

319  
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
‹ig
);

321  
√w
 
	`JSONNode
(
‹ig
);

323 
	}
}

325 
JSONNode
 * 
	gJSONNode
::
	$√wJSONNode
(c⁄° 
JSONNode
 & 
‹ig
 
JSON_MUTEX_COPY_DECL
) {

326 #ifde‡
JSON_MUTEX_CALLBACKS


327 i‡(
∑ª¡Muãx
 != 0){

328 
JSONNode
 * 
ãmp
 = 
	`_√wJSONNode
(
‹ig
);

329 
ãmp
 -> 
	`£t_muãx
(
∑ª¡Muãx
);

330  
ãmp
;

333  
	`_√wJSONNode
(
‹ig
);

334 
	}
}

336 
JSONNode
 * 
	gJSONNode
::
	$√wJSONNode
(
öã∫ÆJSONNode
 * 
öã∫Æ_t
) {

337 #ifde‡
JSON_MEMORY_POOL


338  
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
öã∫Æ_t
);

339 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

340  
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
öã∫Æ_t
);

342  
√w
 
	`JSONNode
(
öã∫Æ_t
);

344 
	}
}

346 
JSONNode
 * 
	gJSONNode
::
	$√wJSONNode_ShÆlow
(c⁄° 
JSONNode
 & 
‹ig
) {

347 #ifde‡
JSON_MEMORY_POOL


348  
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
åue
, 
c⁄°_ˇ°
<JSONNodê&>(
‹ig
));

349 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

350  
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
åue
, 
c⁄°_ˇ°
<JSONNodê&>(
‹ig
));

352  
√w
 
	`JSONNode
(
åue
, 
c⁄°_ˇ°
<
JSONNode
 &>(
‹ig
));

354 
	}
}

	@libjson/_internal/Source/JSONNode.h

1 #i‚de‡
JSONNODE_H


2 
	#JSONNODE_H


	)

4 
	~"JSONDebug.h
"

5 
	~"öã∫ÆJSONNode.h
"

6 
	~<°dex˚±
>

7 
	~<c°d¨g
>

9 #ifde‡
JSON_BINARY


10 
	~"JSON_Ba£64.h
"

13 #ifde‡
JSON_LESS_MEMORY


14 #ifde‡
__GNUC__


15 #¥agm®
∑ck
(
push
, 1)

16 #ñi‡
_MSC_VER


17 #¥agm®
∑ck
(
push
, 
JSONNode_∑ck
, 1)

21 #i‚de‡
JSON_REF_COUNT


22 
	#makeUniqueI¡î«l
(Ë()0

	)

25 
	#JSON_CHECK_INTERNAL
(Ë
	`JSON_ASSERT
(
öã∫Æ
 !0, 
	`JSON_TEXT
("nÿöã∫Æ"))

	)

27 #ifde‡
JSON_MUTEX_CALLBACKS


28 
	#JSON_MUTEX_COPY_DECL
 ,* 
∑ª¡Muãx


	)

29 
	#JSON_MUTEX_COPY_DECL2
 ,* 
∑ª¡Muãx
 = 0

	)

31 
	#JSON_MUTEX_COPY_DECL


	)

32 
	#JSON_MUTEX_COPY_DECL2


	)

35 #ifde‡
JSON_LIBRARY


36 
	#JSON_PTR_LIB
 *

	)

37 
	#JSON_NEW
(
x
Ë
JSONNode
::
	`√wJSONNode_ShÆlow
(x)

	)

40 
	#DECLARE_FOR_ALL_TYPES
(
foo
)\

41 
	`foo
(
js⁄_öt_t
)
js⁄_nŸhrow
;\

42 
	`foo
(
js⁄_numbî
Ë
js⁄_nŸhrow
;\

43 
	`foo
(
boﬁ
Ë
js⁄_nŸhrow
;\

44 
	`foo
(c⁄° 
js⁄_°rög
 &Ë
js⁄_nŸhrow
;

	)

46 
	#DECLARE_FOR_ALL_CAST_TYPES_CONST
(
foo
)\

47 
	`foo
(
js⁄_öt_t
Ëc⁄° 
js⁄_nŸhrow
;\

48 
	`foo
(
js⁄_numbî
Ëc⁄° 
js⁄_nŸhrow
;\

49 
	`foo
(
boﬁ
Ëc⁄° 
js⁄_nŸhrow
;\

50 
	`foo
(c⁄° 
js⁄_°rög
 &Ëc⁄° 
js⁄_nŸhrow
;\

51 

	)

52 
	#DECLARE_FOR_ALL_TYPES_CONST
(
foo
)\

53 
	`DECLARE_FOR_ALL_CAST_TYPES_CONST
(
foo
)\

54 
	`foo
(c⁄° 
JSONNode
 &Ëc⁄° 
js⁄_nŸhrow
;

	)

56 
	#IMPLEMENT_FOR_ALL_NUMBERS
(
foo
)\

57 
	`foo
(
js⁄_öt_t
)\

58 
	`foo
(
js⁄_numbî
)

	)

62 
	#JSON_PTR_LIB


	)

63 
	#JSON_NEW
(
x
Ë
	)
x

65 #ifde‡
JSON_ISO_STRICT


66 
	#DECLARE_FOR_LONG_LONG
(
foo
)

	)

67 
	#DECLARE_FOR_LONG_LONG_CONST
(
foo
)

	)

68 
	#IMPLEMENT_FOR_LONG_LONG
(
foo
)

	)

69 
	#DECLARE_FOR_LONG_DOUBLE
(
foo
)

	)

70 
	#DECLARE_FOR_LONG_DOUBLE_CONST
(
foo
)

	)

71 
	#IMPLEMENT_FOR_LONG_DOUBLE
(
foo
)

	)

73 
	#DECLARE_FOR_LONG_LONG
(
foo
Ë
	`foo
(Ë
js⁄_nŸhrow
; foo(Ëjs⁄_nŸhrow;

	)

74 
	#DECLARE_FOR_LONG_LONG_CONST
(
foo
Ë
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo(Ëc⁄° js⁄_nŸhrow;

	)

75 
	#IMPLEMENT_FOR_LONG_LONG
(
foo
Ë
	`foo
(Ëfoo()

	)

76 
	#DECLARE_FOR_LONG_DOUBLE
(
foo
Ë
	`foo
(Ë
js⁄_nŸhrow
;

	)

77 
	#DECLARE_FOR_LONG_DOUBLE_CONST
(
foo
Ë
	`foo
(Ëc⁄° 
js⁄_nŸhrow
;

	)

78 
	#IMPLEMENT_FOR_LONG_DOUBLE
(
foo
Ë
	`foo
()

	)

81 
	#DECLARE_FOR_ALL_TYPES
(
foo
)\

82 
	`foo
(Ë
js⁄_nŸhrow
; foo() json_nothrow;\

83 
	`foo
(Ë
js⁄_nŸhrow
; foo() json_nothrow;\

84 
	`foo
(Ë
js⁄_nŸhrow
; foo() json_nothrow;\

85 
	`foo
(Ë
js⁄_nŸhrow
; foo() json_nothrow;\

86 
	`foo
(Ë
js⁄_nŸhrow
; foo() json_nothrow;\

87 
	`foo
(
boﬁ
Ë
js⁄_nŸhrow
;\

88 
	`foo
(c⁄° 
js⁄_°rög
 &Ë
js⁄_nŸhrow
;\

89 
	`foo
(c⁄° 
js⁄_ch¨
 *Ë
js⁄_nŸhrow
;\

90 
	`DECLARE_FOR_LONG_LONG
(
foo
)\

91 
	`DECLARE_FOR_LONG_DOUBLE
(
foo
)

	)

93 
	#DECLARE_FOR_ALL_CAST_TYPES_CONST
(
foo
)\

94 
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo() const json_nothrow;\

95 
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo() const json_nothrow;\

96 
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo() const json_nothrow;\

97 
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo() const json_nothrow;\

98 
	`foo
(Ëc⁄° 
js⁄_nŸhrow
; foo() const json_nothrow;\

99 
	`foo
(
boﬁ
Ëc⁄° 
js⁄_nŸhrow
;\

100 
	`foo
(c⁄° 
js⁄_°rög
 &Ëc⁄° 
js⁄_nŸhrow
;\

101 
	`DECLARE_FOR_LONG_LONG_CONST
(
foo
)\

102 
	`DECLARE_FOR_LONG_DOUBLE_CONST
(
foo
)

	)

104 
	#DECLARE_FOR_ALL_TYPES_CONST
(
foo
)\

105 
	`DECLARE_FOR_ALL_CAST_TYPES_CONST
(
foo
)\

106 
	`foo
(c⁄° 
JSONNode
 &Ëc⁄° 
js⁄_nŸhrow
;\

107 
	`foo
(c⁄° 
js⁄_ch¨
 *Ëc⁄° 
js⁄_nŸhrow
;

	)

109 
	#IMPLEMENT_FOR_ALL_NUMBERS
(
foo
)\

110 
	`foo
() foo()\

111 
	`foo
() foo()\

112 
	`foo
() foo()\

113 
	`foo
() foo()\

114 
	`foo
() foo()\

115 
	`IMPLEMENT_FOR_LONG_LONG
(
foo
)\

116 
	`IMPLEMENT_FOR_LONG_DOUBLE
(
foo
)

	)

120 
	#IMPLEMENT_FOR_ALL_TYPES
(
foo
)\

121 
	`IMPLEMENT_FOR_ALL_NUMBERS
(
foo
)\

122 
	`foo
(c⁄° 
js⁄_°rög
 &)\

123 
	`foo
(
boﬁ
)

	)

132 ˛as†
	cJSONNode
 {

133 
	mpublic
:

134 
LIBJSON_OBJECT
(
JSONNode
);

135 
ex∂icô
 
	$JSONNode
(
myty≥
 = 
JSON_NODE
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

136 
	#DECLARE_CTOR
(
ty≥
Ë
ex∂icô
 
	$JSONNode
(c⁄° 
js⁄_°rög
 & 
«me_t
, 
ty≥
 
vÆue_t
)

	)

137 
	$DECLARE_FOR_ALL_TYPES
(
DECLARE_CTOR
)

139 
	$JSONNode
(c⁄° 
JSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

140 ~
	$JSONNode
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

142 #i‡(
	`deföed
(
JSON_PREPARSE
Ë&& 
	$deföed
(
JSON_READ_PRIORITY
))

143 
JSONNode
 
	`°rögTy≥
(c⁄° 
js⁄_°rög
 & 
°r
);

144 
	$£t_«me_
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

147 
js⁄_ödex_t
 
	$size
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

148 
boﬁ
 
	$em±y
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

149 
	$˛ór
(Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

150 
	$ty≥
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

152 
js⁄_°rög
 
	$«me
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

153 
	$£t_«me
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

154 #ifde‡
JSON_COMMENTS


155 
	$£t_commít
(c⁄° 
js⁄_°rög
 & 
commít
Ë
js⁄_nŸhrow
;

156 
js⁄_°rög
 
	$gë_commít
(Ëc⁄° 
js⁄_nŸhrow
;

158 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& 
	$deföed
(
JSON_READ_PRIORITY
)

159 
	$¥ï¨£
(Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

163 
js⁄_°rög
 
	$as_°rög
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

164 
js⁄_öt_t
 
	$as_öt
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

165 
js⁄_numbî
 
	$as_Êﬂt
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

166 
boﬁ
 
	$as_boﬁ
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

168 #ifde‡
JSON_CASTABLE


169 
JSONNode
 
	$as_node
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

170 
JSONNode
 
	$as_¨øy
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

171 
	$ˇ°
(
√wty≥
Ë
js⁄_nŸhrow
;

174 #ifde‡
JSON_BINARY


175 
°d
::
°rög
 
	$as_bö¨y
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_cﬁd
;

176 
	$£t_bö¨y
(c⁄° * 
bö
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

179 
JSONNode
 & 
	$©
(
js⁄_ödex_t
 
pos
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

180 c⁄° 
JSONNode
 & 
	$©
(
js⁄_ödex_t
 
pos
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
);

182 
JSONNode
 & 
›î©‹
[](
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
;

183 c⁄° 
JSONNode
 & 
›î©‹
[](
js⁄_ödex_t
 
pos
Ëc⁄° 
js⁄_nŸhrow
;

185 
JSONNode
 & 
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

186 c⁄° 
JSONNode
 & 
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
);

187 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


188 
JSONNode
 & 
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

189 c⁄° 
JSONNode
 & 
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
	`js⁄_throws
(
°d
::
out_of_ønge
);

191 
JSONNode
 & 
›î©‹
[](c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

192 c⁄° 
JSONNode
 & 
›î©‹
[](c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
;

194 #ifde‡
JSON_LIBRARY


195 
	$push_back
(
JSONNode
 * 
node
Ë
js⁄_nŸhrow
;

197 
	$push_back
(c⁄° 
JSONNode
 & 
node
Ë
js⁄_nŸhrow
;

199 
	$ª£rve
(
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow
;

200 
JSONNode
 
JSON_PTR_LIB
 
	$p›_back
(
js⁄_ödex_t
 
pos
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

201 
JSONNode
 
JSON_PTR_LIB
 
	$p›_back
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

202 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


203 
JSONNode
 
JSON_PTR_LIB
 
	$p›_back_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
	`js⁄_throws
(
°d
::
out_of_ønge
);

206 
	$DECLARE_FOR_ALL_TYPES
(
JSONNode
 & 
›î©‹
 =)

207 
JSONNode
 & 
›î©‹
 = (c⁄° JSONNodê&Ë
js⁄_nŸhrow
;

209 
	$DECLARE_FOR_ALL_TYPES_CONST
(
boﬁ
 
›î©‹
 ==)

210 
	`DECLARE_FOR_ALL_TYPES_CONST
(
boﬁ
 
›î©‹
 !=)

213 
	$nuŒify
(Ë
js⁄_nŸhrow
;

214 
	$sw≠
(
JSONNode
 & 
Ÿhî
Ë
js⁄_nŸhrow
;

215 
	$mîge
(
JSONNode
 & 
Ÿhî
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

216 
	$mîge
(
num
, ...Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

217 
JSONNode
 
	$du∂iˇã
(Ëc⁄° 
js⁄_nŸhrow
;

221 #ifde‡
JSON_ITERATORS


222 #i‚de‡
JSON_LIBRARY


223 
	#js⁄_ôî©‹_±r
(
ôî
Ëôî.
ô


	)

224 
	#±r_to_js⁄_ôî©‹
(
ôî
Ë
	$js⁄_ôî©‹
(
ôî
)

	)

226 
ôî©‹
;

227 
	sc⁄°_ôî©‹
 {

228 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 ++(Ë
js⁄_nŸhrow
 { ++
ô
;  *
this
; }

229 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 --(Ë
js⁄_nŸhrow
 { --
ô
;  *
this
; }

230 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 +=(
i
Ë
js⁄_nŸhrow
 { 
ô
 +i;  *
this
; }

231 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 -=(
i
Ë
js⁄_nŸhrow
 { 
ô
 -i;  *
this
; }

232 
ölöe
 
c⁄°_ôî©‹
 
›î©‹
 ++(Ë
js⁄_nŸhrow
 {

233 
c⁄°_ôî©‹
 
	`ªsu…
(*
this
);

234 ++
ô
;

235  
ªsu…
;

237 
ölöe
 
c⁄°_ôî©‹
 
›î©‹
 --(Ë
js⁄_nŸhrow
 {

238 
c⁄°_ôî©‹
 
	`ªsu…
(*
this
);

239 --
ô
;

240  
ªsu…
;

242 
ölöe
 
c⁄°_ôî©‹
 
›î©‹
 +(
i
Ëc⁄° 
js⁄_nŸhrow
 {

243 
c⁄°_ôî©‹
 
	`ªsu…
(*
this
);

244 
ªsu…
.
ô
 +
i
;

245  
ªsu…
;

247 
ölöe
 
c⁄°_ôî©‹
 
›î©‹
 -(
i
Ëc⁄° 
js⁄_nŸhrow
 {

248 
c⁄°_ôî©‹
 
	`ªsu…
(*
this
);

249 
ªsu…
.
ô
 -
i
;

250  
ªsu…
;

252 
ölöe
 c⁄° 
JSONNode
& 
›î©‹
 [](
size_t
 
pos
Ëc⁄° 
js⁄_nŸhrow
 {  
c⁄°_ˇ°
<c⁄° JSONNode&>(*
ô
[pos]); };

253 
ölöe
 c⁄° 
JSONNode
& 
›î©‹
 *(Ëc⁄° 
js⁄_nŸhrow
 {  
c⁄°_ˇ°
<c⁄° JSONNode&>(*(*
ô
)); }

254 
ölöe
 c⁄° 
JSONNode
* 
›î©‹
 ->(Ëc⁄° 
js⁄_nŸhrow
 {  
c⁄°_ˇ°
<c⁄° JSONNode*>(*
ô
); }

255 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

256 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

257 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

258 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

259 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

260 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

262 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

263 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

264 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

265 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

266 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

267 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

269 
ölöe
 
c⁄°_ôî©‹
 & 
›î©‹
 =(c⁄° c⁄°_ôî©‹ & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
this
; }

270 
	`c⁄°_ôî©‹
 (c⁄° 
c⁄°_ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`ô
(‹ig.
ô
) {}

271 
¥iv©e
:

272 
JSONNode
 ** 
ô
;

273 
	`c⁄°_ôî©‹
(
JSONNode
 ** 
°¨ãr
Ë: 
	`ô
(starter) {}

274 
‰õnd
 
˛ass
 
JSONNode
;

275 
‰õnd
 
ôî©‹
;

277 
c⁄°_ôî©‹
 
	$begö
(Ëc⁄° 
js⁄_nŸhrow
;

278 
c⁄°_ôî©‹
 
	$íd
(Ëc⁄° 
js⁄_nŸhrow
;

280 
	sôî©‹
 {

281 
ölöe
 
ôî©‹
& 
›î©‹
 ++(Ë
js⁄_nŸhrow
 { ++
ô
;  *
this
; }

282 
ölöe
 
ôî©‹
& 
›î©‹
 --(Ë
js⁄_nŸhrow
 { --
ô
;  *
this
; }

283 
ölöe
 
ôî©‹
& 
›î©‹
 +=(
i
Ë
js⁄_nŸhrow
 { 
ô
 +i;  *
this
; }

284 
ölöe
 
ôî©‹
& 
›î©‹
 -=(
i
Ë
js⁄_nŸhrow
 { 
ô
 -i;  *
this
; }

285 
ölöe
 
ôî©‹
 
›î©‹
 ++(Ë
js⁄_nŸhrow
 {

286 
ôî©‹
 
	`ªsu…
(*
this
);

287 ++
ô
;

288  
ªsu…
;

290 
ölöe
 
ôî©‹
 
›î©‹
 --(Ë
js⁄_nŸhrow
 {

291 
ôî©‹
 
	`ªsu…
(*
this
);

292 --
ô
;

293  
ªsu…
;

295 
ölöe
 
ôî©‹
 
›î©‹
 +(
i
Ëc⁄° 
js⁄_nŸhrow
 {

296 
ôî©‹
 
	`ªsu…
(*
this
);

297 
ªsu…
.
ô
 +
i
;

298  
ªsu…
;

300 
ölöe
 
ôî©‹
 
›î©‹
 -(
i
Ëc⁄° 
js⁄_nŸhrow
 {

301 
ôî©‹
 
	`ªsu…
(*
this
);

302 
ªsu…
.
ô
 -
i
;

303  
ªsu…
;

305 
ölöe
 
JSONNode
& 
›î©‹
 [](
size_t
 
pos
Ëc⁄° 
js⁄_nŸhrow
 {  *
ô
[pos]; };

306 
ölöe
 
JSONNode
& 
›î©‹
 *(Ëc⁄° 
js⁄_nŸhrow
 {  *(*
ô
); }

307 
ölöe
 
JSONNode
* 
›î©‹
 ->(Ëc⁄° 
js⁄_nŸhrow
 {  *
ô
; }

308 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

309 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

310 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

311 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

312 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

313 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

314 
ölöe
 
ôî©‹
 & 
›î©‹
 = (c⁄° iãøt‹ & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
this
; }

316 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

317 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

318 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

319 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

320 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

321 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

322 
ölöe
 
ôî©‹
 & 
›î©‹
 = (c⁄° 
c⁄°_ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
this
; }

324 
	`ôî©‹
 (c⁄° 
ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`ô
(‹ig.
ô
) {}

325 
ölöe
 
›î©‹
 
	`c⁄°_ôî©‹
(Ëc⁄° 
js⁄_nŸhrow
 {  c⁄°_ôî©‹(
ô
); }

326 
¥iv©e
:

327 
JSONNode
 ** 
ô
;

328 
	`ôî©‹
(
JSONNode
 ** 
°¨ãr
Ë
js⁄_nŸhrow
 : 
	`ô
(starter) {}

329 
‰õnd
 
˛ass
 
JSONNode
;

330 
‰õnd
 
c⁄°_ôî©‹
;

331 
	}
};

332 
ôî©‹
 
	tjs⁄_ôî©‹
;

334 
	gªvî£_ôî©‹
;

335 
	sªvî£_c⁄°_ôî©‹
 {

336 
ölöe
 
	gªvî£_c⁄°_ôî©‹
& 
	g›î©‹
 ++(Ë
	gjs⁄_nŸhrow
{ --
	gô
;  *
	gthis
; }

337 
ölöe
 
	gªvî£_c⁄°_ôî©‹
& 
	g›î©‹
 --(Ë
	gjs⁄_nŸhrow
{ ++
	gô
;  *
	gthis
; }

338 
ölöe
 
	gªvî£_c⁄°_ôî©‹
& 
	g›î©‹
 +=(
i
Ë
js⁄_nŸhrow
{ 
ô
 -i;  *
	gthis
; }

339 
ölöe
 
	gªvî£_c⁄°_ôî©‹
& 
	g›î©‹
 -=(
i
Ë
js⁄_nŸhrow
{ 
ô
 +i;  *
	gthis
; }

340 
ölöe
 
ªvî£_c⁄°_ôî©‹
 
	g›î©‹
 ++(Ë
	gjs⁄_nŸhrow
{

341 
ªvî£_c⁄°_ôî©‹
 
ªsu…
(*
this
);

342 --
	gô
;

343  
	gªsu…
;

345 
ölöe
 
ªvî£_c⁄°_ôî©‹
 
	g›î©‹
 --(Ë
	gjs⁄_nŸhrow
{

346 
ªvî£_c⁄°_ôî©‹
 
ªsu…
(*
this
);

347 ++
	gô
;

348  
	gªsu…
;

350 
ölöe
 
ªvî£_c⁄°_ôî©‹
 
	g›î©‹
 +(
	gi
Ëc⁄° 
	gjs⁄_nŸhrow
 {

351 
ªvî£_c⁄°_ôî©‹
 
ªsu…
(*
this
);

352 
	gªsu…
.
	gô
 -
i
;

353  
	gªsu…
;

355 
ölöe
 
ªvî£_c⁄°_ôî©‹
 
	g›î©‹
 -(
	gi
Ëc⁄° 
	gjs⁄_nŸhrow
 {

356 
ªvî£_c⁄°_ôî©‹
 
ªsu…
(*
this
);

357 
	gªsu…
.
	gô
 +
i
;

358  
	gªsu…
;

360 
ölöe
 c⁄° 
	gJSONNode
& 
	g›î©‹
 [](
size_t
 
	gpos
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gc⁄°_ˇ°
<c⁄° JSONNode&>(*
	gô
[
pos
]); };

361 
ölöe
 c⁄° 
	gJSONNode
& 
	g›î©‹
 *(Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gc⁄°_ˇ°
<c⁄° JSONNode&>(*(*
	gô
)); }

362 
ölöe
 c⁄° 
JSONNode
* 
	g›î©‹
 ->(Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gc⁄°_ˇ°
<c⁄° 
	gJSONNode
*>(*
	gô
); }

363 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

364 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

365 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gªvî£_c⁄°_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 > other.it; }

366 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

367 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gªvî£_c⁄°_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 < other.it; }

368 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

370 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

371 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

372 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gªvî£_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 > other.it; }

373 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

374 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gªvî£_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 < other.it; }

375 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

377 
ölöe
 
	gªvî£_c⁄°_ôî©‹
 & 
	g›î©‹
 = (c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
	gthis
; }

378 
ªvî£_c⁄°_ôî©‹
 (c⁄°Ñevî£_c⁄°_ôî©‹ & 
‹ig
Ë
	gjs⁄_nŸhrow
 : 
ô
(orig.it) {}

379 
¥iv©e
:

380 
JSONNode
 ** 
ô
;

381 
ªvî£_c⁄°_ôî©‹
(
JSONNode
 ** 
°¨ãr
Ë
	gjs⁄_nŸhrow
 : 
ô
(starter) {}

382 
‰õnd
 
˛ass
 
JSONNode
;

383 
‰õnd
 
	gªvî£_ôî©‹
;

385 
ªvî£_c⁄°_ôî©‹
 
	$rbegö
(Ëc⁄° 
js⁄_nŸhrow
;

386 
ªvî£_c⁄°_ôî©‹
 
	$ªnd
(Ëc⁄° 
js⁄_nŸhrow
;

388 
	sªvî£_ôî©‹
 {

389 
ölöe
 
ªvî£_ôî©‹
& 
›î©‹
 ++(Ë
js⁄_nŸhrow
 { --
ô
;  *
this
; }

390 
ölöe
 
ªvî£_ôî©‹
& 
›î©‹
 --(Ë
js⁄_nŸhrow
 { ++
ô
;  *
this
; }

391 
ölöe
 
ªvî£_ôî©‹
& 
›î©‹
 +=(
i
Ë
js⁄_nŸhrow
 { 
ô
 -i;  *
this
; }

392 
ölöe
 
ªvî£_ôî©‹
& 
›î©‹
 -=(
i
Ë
js⁄_nŸhrow
 { 
ô
 +i;  *
this
; }

393 
ölöe
 
ªvî£_ôî©‹
 
›î©‹
 ++(Ë
js⁄_nŸhrow
 {

394 
ªvî£_ôî©‹
 
	`ªsu…
(*
this
);

395 --
ô
;

396  
ªsu…
;

398 
ölöe
 
ªvî£_ôî©‹
 
›î©‹
 --(Ë
js⁄_nŸhrow
 {

399 
ªvî£_ôî©‹
 
	`ªsu…
(*
this
);

400 ++
ô
;

401  
ªsu…
;

403 
ölöe
 
ªvî£_ôî©‹
 
›î©‹
 +(
i
Ëc⁄° 
js⁄_nŸhrow
 {

404 
ªvî£_ôî©‹
 
	`ªsu…
(*
this
);

405 
ªsu…
.
ô
 -
i
;

406  
ªsu…
;

408 
ölöe
 
ªvî£_ôî©‹
 
›î©‹
 -(
i
Ëc⁄° 
js⁄_nŸhrow
 {

409 
ªvî£_ôî©‹
 
	`ªsu…
(*
this
);

410 
ªsu…
.
ô
 +
i
;

411  
ªsu…
;

413 
ölöe
 
JSONNode
& 
›î©‹
 [](
size_t
 
pos
Ëc⁄° 
js⁄_nŸhrow
 {  *
ô
[pos]; };

414 
ölöe
 
JSONNode
& 
›î©‹
 *(Ëc⁄° 
js⁄_nŸhrow
 {  *(*
ô
); }

415 
ölöe
 
JSONNode
* 
›î©‹
 ->(Ëc⁄° 
js⁄_nŸhrow
 {  *
ô
; }

416 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

417 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

418 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

419 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

420 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

421 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
ªvî£_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

423 
ölöe
 
boﬁ
 
›î©‹
 =(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

424 
ölöe
 
boﬁ
 
›î©‹
 !(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

425 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 > other.it; }

426 
ölöe
 
boﬁ
 
›î©‹
 <(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

427 
ölöe
 
boﬁ
 
›î©‹
 > (c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 < other.it; }

428 
ölöe
 
boﬁ
 
›î©‹
 >(c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

430 
ölöe
 
ªvî£_ôî©‹
 & 
›î©‹
 = (c⁄°Ñevî£_ôî©‹ & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
this
; }

431 
	`ªvî£_ôî©‹
 (c⁄° 
ªvî£_ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`ô
(‹ig.
ô
) {}

432 
ölöe
 
›î©‹
 
	`ªvî£_c⁄°_ôî©‹
(Ëc⁄° 
js⁄_nŸhrow
 { Ñevî£_c⁄°_ôî©‹(
ô
); }

433 
¥iv©e
:

434 
JSONNode
 ** 
ô
;

435 
	`ªvî£_ôî©‹
(
JSONNode
 ** 
°¨ãr
Ë
js⁄_nŸhrow
 : 
	`ô
(starter) {}

436 
‰õnd
 
˛ass
 
JSONNode
;

437 
‰õnd
 
ªvî£_c⁄°_ôî©‹
;

438 
	}
};

439 
ªvî£_ôî©‹
 
	$rbegö
(Ë
js⁄_nŸhrow
;

440 
ªvî£_ôî©‹
 
	$ªnd
(Ë
js⁄_nŸhrow
;

442 
c⁄°_ôî©‹
 
	$föd
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
;

443 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


444 
c⁄°_ôî©‹
 
	$föd_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
;

447 
ªvî£_ôî©‹
 
	$îa£
(
ªvî£_ôî©‹
 
pos
Ë
js⁄_nŸhrow
;

448 
ªvî£_ôî©‹
 
	$îa£
(
ªvî£_ôî©‹
 
°¨t
, c⁄°Ñevî£_ôî©‹ & 
íd
Ë
js⁄_nŸhrow
;

450 
ôî©‹
 
	$ö£π
(
ôî©‹
 
pos
, c⁄° 
JSONNode
 & 
x
Ë
js⁄_nŸhrow
;

451 
ªvî£_ôî©‹
 
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
JSONNode
 & 
x
Ë
js⁄_nŸhrow
;

452 
ôî©‹
 
	$ö£π
(
ôî©‹
 
pos
, c⁄° 
ªvî£_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

453 
ªvî£_ôî©‹
 
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
ôî©‹
 & 
_°¨t
, c⁄° iãøt‹ & 
_íd
Ë
js⁄_nŸhrow
;

454 
ªvî£_ôî©‹
 
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄°Ñevî£_ôî©‹ & 
_°¨t
, c⁄°Ñevî£_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

456 
js⁄_ôî©‹
 
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° 
c⁄°_ôî©‹
 & 
_°¨t
, c⁄° c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

457 
ªvî£_ôî©‹
 
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
c⁄°_ôî©‹
 & 
_°¨t
, c⁄° c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

458 
js⁄_ôî©‹
 
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

459 
ªvî£_ôî©‹
 
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

461 
JSONNode
** 
	tjs⁄_ôî©‹
;

462 
	#js⁄_ôî©‹_±r
(
ôî
Ë
	)
iter

463 
	#±r_to_js⁄_ôî©‹
(
ôî
Ë
	)
iter

464 
js⁄_ôî©‹
 
	$ö£π
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 * 
x
Ë
js⁄_nŸhrow
;

467 
js⁄_ôî©‹
 
	$begö
(Ë
js⁄_nŸhrow
;

468 
js⁄_ôî©‹
 
	$íd
(Ë
js⁄_nŸhrow
;

470 
js⁄_ôî©‹
 
	$föd
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

471 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


472 
js⁄_ôî©‹
 
	$föd_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

474 
js⁄_ôî©‹
 
	$îa£
(
js⁄_ôî©‹
 
pos
Ë
js⁄_nŸhrow
;

475 
js⁄_ôî©‹
 
	$îa£
(
js⁄_ôî©‹
 
°¨t
, c⁄° js⁄_ôî©‹ & 
íd
Ë
js⁄_nŸhrow
;

476 
js⁄_ôî©‹
 
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° js⁄_ôî©‹ & 
_°¨t
, c⁄° js⁄_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
;

480 #ifde‡
JSON_MUTEX_CALLBACKS


481 
	$ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

482 #ifde‡
JSON_MUTEX_MANAGE


483 
	$ªgi°î_muãx_de°ru˘‹
(
js⁄_muãx_ˇŒback_t
 
de°roy
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

485 
	$£t_globÆ_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

486 
	$£t_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

487 
	$lock
(
thªad
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

488 
	$u∆ock
(
thªad
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

489 
	sauto_lock
 {

490 
public
:

491 
	`auto_lock
(
JSONNode
 & 
node
, 
thªad
Ë
js⁄_nŸhrow
: 
	`mynode
(&node), 
	`mythªad
(thread){

492 
mynode
 -> 
	`lock
(
mythªad
);

494 
	`auto_lock
(
JSONNode
 * 
node
, 
thªad
Ë
js⁄_nŸhrow
: 
	`mynode
“ode), 
	`mythªad
(thread){

495 
mynode
 -> 
	`lock
(
mythªad
);

497 ~
	`auto_lock
(Ë
js⁄_nŸhrow
{

498 
mynode
 -> 
	`u∆ock
(
mythªad
);

500 
¥iv©e
:

501 
auto_lock
 & 
›î©‹
 = (constáuto_lock &);

502 
	`auto_lock
(c⁄° 
auto_lock
 &);

503 
JSONNode
 * 
mynode
;

504 
mythªad
;

505 
	}
};

506 * 
	$gëThisLock
(
JSONNode
 * 
±his
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

509 #ifde‡
JSON_WRITE_PRIORITY


510 #ifde‡
JSON_LESS_MEMORY


511 
	#DEFAULT_APPROX_SIZE
 8

	)

512 
	#DEFAULT_APPROX_SIZE_FORMATTED
 16

	)

514 
	#DEFAULT_APPROX_SIZE
 1024

	)

515 
	#DEFAULT_APPROX_SIZE_FORMATTED
 2048

	)

517 
js⁄_°rög
 
	$wrôe
(
size_t
 
≠¥oxsize
 = 
DEFAULT_APPROX_SIZE
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

518 
js⁄_°rög
 
	$wrôe_f‹m©ãd
(
size_t
 
≠¥oxsize
 = 
DEFAULT_APPROX_SIZE_FORMATTED
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

521 #ifde‡
JSON_DEBUG


522 #i‚de‡
JSON_LIBRARY


523 
JSONNode
 
	$dump
(Ëc⁄° 
js⁄_nŸhrow
;

526 
	$dñëeJSONNode
(
JSONNode
 * 
±r
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

527 
JSONNode
 * 
	$√wJSONNode_ShÆlow
(c⁄° 
JSONNode
 & 
‹ig
Ë
js⁄_hŸ
;

529 
	#DECLARE_CAST_OP
(
ty≥
Ë
›î©‹
 
	$ty≥
()

	)

531 
JSON_PRIVATE


532 
JSONNode
 * 
	$√wJSONNode
(c⁄° 
JSONNode
 & 
‹ig
 
JSON_MUTEX_COPY_DECL2
Ë
js⁄_hŸ
;

533 
JSONNode
 * 
	$√wJSONNode
(
öã∫ÆJSONNode
 * 
öã∫Æ_t
Ë
js⁄_hŸ
;

534 #ifde‡
JSON_READ_PRIORITY


536 
	$JSONNode
(c⁄° 
js⁄_°rög
 & 
u≈¨£d
Ë
js⁄_nŸhrow
 : 
	`öã∫Æ
(
öã∫ÆJSONNode
::
	$√wI¡î«l
(
u≈¨£d
)){

537 
LIBJSON_CTOR
;

538 
	}
}

540 
	$JSONNode
(
öã∫ÆJSONNode
 * 
öã∫Æ_t
Ë
js⁄_nŸhrow
 : 
	$öã∫Æ
(
öã∫Æ_t
){

541 
LIBJSON_CTOR
;

542 
	}
}

543 
	$JSONNode
(
boﬁ
, 
JSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

545 
	$decRef
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

546 #ifde‡
JSON_REF_COUNT


547 
	$makeUniqueI¡î«l
(Ë
js⁄_nŸhrow
;

548 
	$mîge
(
JSONNode
 * 
Ÿhî
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

551 #ifde‡
JSON_DEBUG


552 #i‚de‡
JSON_LIBRARY


553 
JSONNode
 
	$dump
(
size_t
 & 
tŸÆmem‹y
Ë
js⁄_nŸhrow
;

557 #ifde‡
JSON_ITERATORS


558 #i‚de‡
JSON_LIBRARY


559 
js⁄_ôî©‹
 
	$ö£πFRR
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
;

560 
ªvî£_ôî©‹
 
	$ö£πRRR
(
ªvî£_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
;

561 
ªvî£_ôî©‹
 
	$ö£πRFF
(
ªvî£_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
;

563 
js⁄_ôî©‹
 
	$ö£πFFF
(
js⁄_ôî©‹
 
pos
, 
JSONNode
 ** c⁄° 
_°¨t
, JSONNodê** c⁄° 
_íd
Ë
js⁄_nŸhrow
;

566 
ölöe
 
	$˛ór_«me
(Ë
js⁄_nŸhrow
 {

567 
	`JSON_CHECK_INTERNAL
();

568 
	`makeUniqueI¡î«l
();

569 
öã∫Æ
 -> 
	`˛ó∫ame
();

570 
	}
}

572 
muèbÀ
 
öã∫ÆJSONNode
 * 
	göã∫Æ
;

573 
‰õnd
 
˛ass
 
	gJSONW‹kî
;

574 
‰õnd
 
˛ass
 
	göã∫ÆJSONNode
;

584 
	#CAST_OP
(
ty≥
)\

585 
ölöe
 
JSONNode
::
›î©‹
 
	`ty≥
(Ëc⁄° 
js⁄_nŸhrow
 {\

586  
°©ic_ˇ°
<
ty≥
>(*
öã∫Æ
);\

587 }

	)

591 
ölöe
 
	gJSONNode
::
	$JSONNode
(
myty≥
Ë
js⁄_nŸhrow
 : 
	`öã∫Æ
(
öã∫ÆJSONNode
::
	$√wI¡î«l
(
myty≥
)){

592 
	`JSON_ASSERT
((
myty≥
 =
JSON_NULL
) ||

593 (
myty≥
 =
JSON_STRING
) ||

594 (
myty≥
 =
JSON_NUMBER
) ||

595 (
myty≥
 =
JSON_BOOL
) ||

596 (
myty≥
 =
JSON_ARRAY
) ||

597 (
myty≥
 =
JSON_NODE
), 
	`JSON_TEXT
("NotáÖroper JSONÅype"));

598 
LIBJSON_CTOR
;

599 
	}
}

601 
ölöe
 
	gJSONNode
::
	$JSONNode
(c⁄° 
JSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`öã∫Æ
(‹ig.
öã∫Æ
 -> 
	$öcRef
()){

602 
LIBJSON_COPY_CTOR
;

603 
	}
}

606 
ölöe
 
	gJSONNode
::
	$JSONNode
(
boﬁ
, 
JSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	$öã∫Æ
(
‹ig
.
öã∫Æ
){

607 
‹ig
.
öã∫Æ
 = 0;

608 
LIBJSON_CTOR
;

609 
	}
}

611 
ölöe
 
	gJSONNode
::~
	$JSONNode
(Ë
js⁄_nŸhrow
{

612 i‡(
öã∫Æ
 !0Ë
	`decRef
();

613 
LIBJSON_DTOR
;

614 
	}
}

616 
ölöe
 
js⁄_ödex_t
 
	gJSONNode
::
	$size
(Ëc⁄° 
js⁄_nŸhrow
 {

617 
	`JSON_CHECK_INTERNAL
();

618  
öã∫Æ
 -> 
	`size
();

619 
	}
}

621 
ölöe
 
boﬁ
 
	gJSONNode
::
	$em±y
(Ëc⁄° 
js⁄_nŸhrow
 {

622 
	`JSON_CHECK_INTERNAL
();

623  
öã∫Æ
 -> 
	`em±y
();

624 
	}
}

626 
ölöe
 
	gJSONNode
::
	$˛ór
(Ë
js⁄_nŸhrow
 {

627 
	`JSON_CHECK_INTERNAL
();

628 i‡(!
	`em±y
()){

629 
	`makeUniqueI¡î«l
();

630 
öã∫Æ
 -> 
CHILDREN
 -> 
	`˛ór
();

632 
	}
}

634 
ölöe
 
	gJSONNode
::
	$ty≥
(Ëc⁄° 
js⁄_nŸhrow
 {

635 
	`JSON_CHECK_INTERNAL
();

636  
öã∫Æ
 -> 
	`ty≥
();

637 
	}
}

639 
ölöe
 
js⁄_°rög
 
	gJSONNode
::
	$«me
(Ëc⁄° 
js⁄_nŸhrow
 {

640 
	`JSON_CHECK_INTERNAL
();

641  
öã∫Æ
 -> 
	`«me
();

642 
	}
}

644 
ölöe
 
	gJSONNode
::
	$£t_«me
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
{

645 
	`JSON_CHECK_INTERNAL
();

646 
	`makeUniqueI¡î«l
();

647 
öã∫Æ
 -> 
	`£äame
(
√w«me
);

648 
	}
}

650 #ifde‡
JSON_COMMENTS


651 
ölöe
 
	gJSONNode
::
	$£t_commít
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
{

652 
	`JSON_CHECK_INTERNAL
();

653 
	`makeUniqueI¡î«l
();

654 
öã∫Æ
 -> 
	`£tcommít
(
√w«me
);

655 
	}
}

657 
ölöe
 
js⁄_°rög
 
	gJSONNode
::
	$gë_commít
(Ëc⁄° 
js⁄_nŸhrow
 {

658 
	`JSON_CHECK_INTERNAL
();

659  
öã∫Æ
 -> 
	`gëcommít
();

660 
	}
}

664 
ölöe
 
js⁄_°rög
 
	gJSONNode
::
	$as_°rög
(Ëc⁄° 
js⁄_nŸhrow
 {

665 
	`JSON_CHECK_INTERNAL
();

666  
°©ic_ˇ°
<
js⁄_°rög
>(*
öã∫Æ
);

667 
	}
}

669 
ölöe
 
js⁄_öt_t
 
	gJSONNode
::
	$as_öt
(Ëc⁄° 
js⁄_nŸhrow
 {

670 
	`JSON_CHECK_INTERNAL
();

671  
°©ic_ˇ°
<
js⁄_öt_t
>(*
öã∫Æ
);

672 
	}
}

674 
ölöe
 
js⁄_numbî
 
	gJSONNode
::
	$as_Êﬂt
(Ëc⁄° 
js⁄_nŸhrow
 {

675 
	`JSON_CHECK_INTERNAL
();

676  
°©ic_ˇ°
<
js⁄_numbî
>(*
öã∫Æ
);

677 
	}
}

679 
ölöe
 
boﬁ
 
	gJSONNode
::
	$as_boﬁ
(Ëc⁄° 
js⁄_nŸhrow
 {

680 
	`JSON_CHECK_INTERNAL
();

681  
°©ic_ˇ°
<
boﬁ
>(*
öã∫Æ
);

682 
	}
}

685 #ifde‡
JSON_BINARY


686 
ölöe
 
	gJSONNode
::
	$£t_bö¨y
(c⁄° * 
bö
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
{

687 
	`JSON_CHECK_INTERNAL
();

688 *
this
 = 
JSONBa£64
::
	`js⁄_ícode64
(
bö
, 
byãs
);

689 
	}
}

691 
ölöe
 
	g°d
::
°rög
 
JSONNode
::
	$as_bö¨y
(Ëc⁄° 
js⁄_nŸhrow
 {

692 
	`JSON_ASSERT_SAFE
(
	`ty≥
(Ë=
JSON_STRING
, 
	`JSON_TEXT
("usögás_bö¨y f‹áÇ⁄-°rögÅy≥"),  
	`js⁄_globÆ
(
EMPTY_STD_STRING
););

693 
	`JSON_CHECK_INTERNAL
();

694  
JSONBa£64
::
	`js⁄_decode64
(
	`as_°rög
());

695 
	}
}

698 
ölöe
 
	gJSONNode
 & JSONNode::
›î©‹
[](c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

699 
JSON_CHECK_INTERNAL
();

700 
makeUniqueI¡î«l
();

701  *(*(
	göã∫Æ
 -> 
©
(
«me_t
)));

704 
ölöe
 c⁄° 
	gJSONNode
 & JSONNode::
›î©‹
[](c⁄° 
js⁄_°rög
 & 
«me_t
Ëc⁄° 
js⁄_nŸhrow
 {

705 
JSON_CHECK_INTERNAL
();

706  *(*(
	göã∫Æ
 -> 
©
(
«me_t
)));

709 #ifde‡
JSON_LIBRARY


710 
ölöe
 
	gJSONNode
::
	$push_back
(
JSONNode
 * 
chûd
Ë
js⁄_nŸhrow
{

712 
ölöe
 
JSONNode
::
	$push_back
(c⁄° 
JSONNode
 & 
chûd
Ë
js⁄_nŸhrow
{

714 
	`JSON_CHECK_INTERNAL
();

715 
	`makeUniqueI¡î«l
();

716 
öã∫Æ
 -> 
	`push_back
(
chûd
);

717 
	}
}

719 
ölöe
 
	gJSONNode
::
	$ª£rve
(
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow
{

720 
	`makeUniqueI¡î«l
();

721 
öã∫Æ
 -> 
	`ª£rve
(
siz
);

722 
	}
}

724 
ölöe
 
	gJSONNode
 & JSONNode::
›î©‹
 = (c⁄° 
JSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 {

725 
JSON_CHECK_INTERNAL
();

726 #ifde‡
JSON_REF_COUNT


727 i‡(
	göã∫Æ
 =
‹ig
.
öã∫Æ
Ë *
this
;

729 
decRef
();

730 
	göã∫Æ
 = 
‹ig
.
öã∫Æ
 -> 
öcRef
();

731  *
	gthis
;

734 #i‚de‡
JSON_LIBRARY


735 
ölöe
 
	gJSONNode
 & JSONNode::
›î©‹
 = (c⁄° 
js⁄_ch¨
 * 
vÆ
Ë
js⁄_nŸhrow
 {

736 
JSON_CHECK_INTERNAL
();

737 *
	gthis
 = 
js⁄_°rög
(
vÆ
);

738  *
	gthis
;

742 
	#NODE_SET_TYPED
(
ty≥
)\

743 
ölöe
 
JSONNode
 & JSONNode::
›î©‹
 = (
ty≥
 
vÆ
Ë
js⁄_nŸhrow
 {\

744 
LIBJSON_ASSIGNMENT
;\

745 
	`JSON_CHECK_INTERNAL
();\

746 
	`makeUniqueI¡î«l
();\

747 
öã∫Æ
 -> 
	`Së
(
vÆ
);\

748  *
this
;\

749 }

	)

750 
	$IMPLEMENT_FOR_ALL_TYPES
(
NODE_SET_TYPED
)

757 
	#NODE_CHECK_EQUALITY
(
ty≥
)\

758 
ölöe
 
boﬁ
 
JSONNode
::
›î©‹
 =(
ty≥
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {\

759 
	`JSON_CHECK_INTERNAL
();\

760  
öã∫Æ
 -> 
IsEquÆToNum
<
ty≥
>(
vÆ
);\

761 
	}

	)
}

763 
	$IMPLEMENT_FOR_ALL_NUMBERS
(
NODE_CHECK_EQUALITY
)

765 
ölöe
 
boﬁ
 
JSONNode
::
›î©‹
 =(c⁄° 
js⁄_°rög
 & 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

766 
	`JSON_CHECK_INTERNAL
();

767  
öã∫Æ
 -> 
	`IsEquÆTo
(
vÆ
);

768 
	}
}

770 #i‚de‡
JSON_LIBRARY


771 
ölöe
 
boﬁ
 
	gJSONNode
::
›î©‹
 =(c⁄° 
js⁄_ch¨
 * 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

772 
JSON_CHECK_INTERNAL
();

773  *
	gthis
 =
js⁄_°rög
(
vÆ
);

777 
ölöe
 
boﬁ
 
	gJSONNode
::
›î©‹
 =(boﬁ 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

778 
JSON_CHECK_INTERNAL
();

779  
	göã∫Æ
 -> 
IsEquÆTo
(
vÆ
);

781 
ölöe
 
boﬁ
 
	gJSONNode
::
›î©‹
 =(c⁄° 
JSONNode
 & 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

782 
JSON_CHECK_INTERNAL
();

783  
	göã∫Æ
 -> 
IsEquÆTo
(
vÆ
.
öã∫Æ
);

792 
	#NODE_CHECK_INEQUALITY
(
ty≥
)\

793 
ölöe
 
boﬁ
 
JSONNode
::
›î©‹
 !(
ty≥
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {\

794 
	`JSON_CHECK_INTERNAL
();\

795  !(*
this
 =
vÆ
);\

796 }

	)

798 
	$IMPLEMENT_FOR_ALL_TYPES
(
NODE_CHECK_INEQUALITY
)

799 
	$NODE_CHECK_INEQUALITY
(c⁄° 
JSONNode
 &)

800 #i‚de‡
JSON_LIBRARY


801 
	$NODE_CHECK_INEQUALITY
(c⁄° 
js⁄_ch¨
 * )

804 
ölöe
 
JSONNode
::
	$nuŒify
(Ë
js⁄_nŸhrow
 {

805 
	`JSON_CHECK_INTERNAL
();

806 
	`makeUniqueI¡î«l
();

807 
öã∫Æ
 -> 
	`NuŒify
();

808 
	}
}

810 
ölöe
 
	gJSONNode
::
	$sw≠
(
JSONNode
 & 
Ÿhî
Ë
js⁄_nŸhrow
 {

811 
	`JSON_CHECK_INTERNAL
();

812 
öã∫ÆJSONNode
 * 
ãmp
 = 
Ÿhî
.
öã∫Æ
;

813 
Ÿhî
.
öã∫Æ
 = internal;

814 
öã∫Æ
 = 
ãmp
;

815 
	`JSON_CHECK_INTERNAL
();

816 
	}
}

818 
ölöe
 
	gJSONNode
::
	$decRef
(Ë
js⁄_nŸhrow
 {

819 
	`JSON_CHECK_INTERNAL
();

820 #ifde‡
JSON_REF_COUNT


821 
öã∫Æ
 -> 
	`decRef
();

822 i‡(
öã∫Æ
 -> 
	`hasNoRe„ªn˚s
()){

823 
öã∫ÆJSONNode
::
	`dñëeI¡î«l
(
öã∫Æ
);

826 
öã∫ÆJSONNode
::
	`dñëeI¡î«l
(
öã∫Æ
);

828 
	}
}

830 #ifde‡
JSON_REF_COUNT


831 
ölöe
 
	gJSONNode
::
	$makeUniqueI¡î«l
(Ë
js⁄_nŸhrow
 {

832 
	`JSON_CHECK_INTERNAL
();

833 
öã∫Æ
 = i¡î«»-> 
	`makeUnique
();

834 
	}
}

837 #ifde‡
JSON_ITERATORS


838 
ölöe
 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$begö
(Ë
js⁄_nŸhrow
 {

839 
	`JSON_CHECK_INTERNAL
();

840 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("begin"));

841 
	`makeUniqueI¡î«l
();

842  
	`js⁄_ôî©‹
(
öã∫Æ
 -> 
	`begö
());

843 
	}
}

845 
ölöe
 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$íd
(Ë
js⁄_nŸhrow
 {

846 
	`JSON_CHECK_INTERNAL
();

847 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("end"));

848 
	`makeUniqueI¡î«l
();

849  
	`js⁄_ôî©‹
(
öã∫Æ
 -> 
	`íd
());

850 
	}
}

852 #i‚de‡
JSON_LIBRARY


853 
ölöe
 
	gJSONNode
::
c⁄°_ôî©‹
 
JSONNode
::
	$begö
(Ëc⁄° 
js⁄_nŸhrow
 {

854 
	`JSON_CHECK_INTERNAL
();

855 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("begin"));

856  
JSONNode
::
	`c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`begö
());

857 
	}
}

859 
ölöe
 
	gJSONNode
::
c⁄°_ôî©‹
 
JSONNode
::
	$íd
(Ëc⁄° 
js⁄_nŸhrow
 {

860 
	`JSON_CHECK_INTERNAL
();

861 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("end"));

862  
JSONNode
::
	`c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`íd
());

863 
	}
}

865 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$rbegö
(Ë
js⁄_nŸhrow
 {

866 
	`JSON_CHECK_INTERNAL
();

867 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("rbegin"));

868 
	`makeUniqueI¡î«l
();

869  
JSONNode
::
	`ªvî£_ôî©‹
(
öã∫Æ
 -> 
	`íd
() - 1);

870 
	}
}

872 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ªnd
(Ë
js⁄_nŸhrow
 {

873 
	`JSON_CHECK_INTERNAL
();

874 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("rend"));

875 
	`makeUniqueI¡î«l
();

876  
JSONNode
::
	`ªvî£_ôî©‹
(
öã∫Æ
 -> 
	`begö
() - 1);

877 
	}
}

879 
ölöe
 
	gJSONNode
::
ªvî£_c⁄°_ôî©‹
 
JSONNode
::
	$rbegö
(Ëc⁄° 
js⁄_nŸhrow
 {

880 
	`JSON_CHECK_INTERNAL
();

881 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("rbegin"));

882  
JSONNode
::
	`ªvî£_c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`íd
() - 1);

883 
	}
}

885 
ölöe
 
	gJSONNode
::
ªvî£_c⁄°_ôî©‹
 
JSONNode
::
	$ªnd
(Ëc⁄° 
js⁄_nŸhrow
 {

886 
	`JSON_CHECK_INTERNAL
();

887 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`js⁄_globÆ
(
ERROR_NON_ITERATABLE
Ë+ 
	`JSON_TEXT
("rend"));

888  
JSONNode
::
	`ªvî£_c⁄°_ôî©‹
(
öã∫Æ
 -> 
	`begö
() - 1);

889 
	}
}

891 
ölöe
 
	gJSONNode
::
ôî©‹
 
JSONNode
::
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° 
c⁄°_ôî©‹
 & 
_°¨t
, c⁄° c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

892  
	`ö£πFFF
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

893 
	}
}

895 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
c⁄°_ôî©‹
 & 
_°¨t
, c⁄° c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

896  
	`ö£πRFF
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

897 
	}
}

899 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
ôî©‹
 & 
_°¨t
, c⁄° iãøt‹ & 
_íd
Ë
js⁄_nŸhrow
 {

900  
	`ö£πRFF
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

901 
	}
}

903 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

904  
	`ö£πRRR
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

905 
	}
}

907 
ölöe
 
	gJSONNode
::
ªvî£_ôî©‹
 
JSONNode
::
	$ö£π
(
ªvî£_ôî©‹
 
pos
, c⁄°Ñevî£_ôî©‹ & 
_°¨t
, c⁄°Ñevî£_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

908  
	`ö£πRRR
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

909 
	}
}

911 
ölöe
 
	gJSONNode
::
ôî©‹
 
JSONNode
::
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° 
ªvî£_c⁄°_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_c⁄°_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

912  
	`ö£πFRR
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

913 
	}
}

915 
ölöe
 
	gJSONNode
::
ôî©‹
 
JSONNode
::
	$ö£π
(
ôî©‹
 
pos
, c⁄° 
ªvî£_ôî©‹
 & 
_°¨t
, c⁄°Ñevî£_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

916  
	`ö£πFRR
(
pos
, 
_°¨t
.
ô
, 
_íd
.it);

917 
	}
}

920 
ölöe
 
	gJSONNode
::
js⁄_ôî©‹
 
JSONNode
::
	$ö£π
(
js⁄_ôî©‹
 
pos
, c⁄° js⁄_ôî©‹ & 
_°¨t
, c⁄° js⁄_ôî©‹ & 
_íd
Ë
js⁄_nŸhrow
 {

921  
	`ö£πFFF
(
pos
, 
	`js⁄_ôî©‹_±r
(
_°¨t
), js⁄_ôî©‹_±r(
_íd
));

922 
	}
}

925 #ifde‡
JSON_WRITE_PRIORITY


926 
ölöe
 
js⁄_°rög
 
	gJSONNode
::
	$wrôe
(
size_t
 
≠¥oxsize
Ëc⁄° 
js⁄_nŸhrow
 {

927 
	`JSON_CHECK_INTERNAL
();

928 
	`JSON_ASSERT_SAFE
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`JSON_TEXT
("WrôögáÇ⁄-wrôabÀÇode"),  
	`js⁄_globÆ
(
EMPTY_JSON_STRING
););

929 
js⁄_°rög
 
ªsu…
;

930 
ªsu…
.
	`ª£rve
(
≠¥oxsize
);

931 
öã∫Æ
 -> 
	`Wrôe
(0xFFFFFFFF, 
åue
, 
ªsu…
);

932  
ªsu…
;

933 
	}
}

935 
ölöe
 
js⁄_°rög
 
	gJSONNode
::
	$wrôe_f‹m©ãd
(
size_t
 
≠¥oxsize
Ëc⁄° 
js⁄_nŸhrow
 {

936 
	`JSON_CHECK_INTERNAL
();

937 
	`JSON_ASSERT_SAFE
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`JSON_TEXT
("WrôögáÇ⁄-wrôabÀÇode"),  
	`js⁄_globÆ
(
EMPTY_JSON_STRING
););

938 
js⁄_°rög
 
ªsu…
;

939 
ªsu…
.
	`ª£rve
(
≠¥oxsize
);

940 
öã∫Æ
 -> 
	`Wrôe
(0, 
åue
, 
ªsu…
);

941  
ªsu…
;

942 
	}
}

946 #i‡!
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

947 
ölöe
 
	gJSONNode
::
	$¥ï¨£
(Ë
js⁄_nŸhrow
 {

948 
	`JSON_CHECK_INTERNAL
();

949 
öã∫Æ
 -> 
	`¥ï¨£
();

950 
	}
}

953 #ifde‡
JSON_DEBUG


954 #i‚de‡
JSON_LIBRARY


955 
ölöe
 
JSONNode
 
	gJSONNode
::
	$dump
(Ëc⁄° 
js⁄_nŸhrow
 {

956 
	`JSON_CHECK_INTERNAL
();

957 
JSONNode
 
	`dum∑ge
(
JSON_NODE
);

958 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("this"), ()
this
)));

959 
size_t
 
tŸÆ
 = 0;

960 
JSONNode
 
	`node
(
öã∫Æ
 -> 
	`Dump
(
tŸÆ
));

961 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("tŸÆ byã†u£d"), 
tŸÆ
)));

962 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("byã†u£d"), (
JSONNode
))));

963 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
node
));

964  
dum∑ge
;

965 
	}
}

967 
ölöe
 
JSONNode
 
	gJSONNode
::
	$dump
(
size_t
 & 
tŸÆmem‹y
Ë
js⁄_nŸhrow
 {

968 
	`JSON_CHECK_INTERNAL
();

969 
JSONNode
 
	`dum∑ge
(
JSON_NODE
);

970 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("this"), ()
this
)));

971 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("byã†u£d"), (
JSONNode
))));

972 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
öã∫Æ
 -> 
	`Dump
(
tŸÆmem‹y
)));

973  
dum∑ge
;

974 
	}
}

978 #ifde‡
JSON_LESS_MEMORY


979 #ifde‡
__GNUC__


980 #¥agm®
∑ck
(
p›
)

981 #ñi‡
_MSC_VER


982 #¥agm®
∑ck
(
p›
, 
JSONNode_∑ck
)

	@libjson/_internal/Source/JSONNode_Mutex.cpp

1 
	~"JSONNode.h
"

2 
	~"JSONGlobÆs.h
"

4 #ifde‡
JSON_MUTEX_CALLBACKS


6 
js⁄_muãx_ˇŒback_t
 
	gjs⁄_lock_ˇŒback
 = 0;

7 
js⁄_muãx_ˇŒback_t
 
	gjs⁄_u∆ock_ˇŒback
 = 0;

8 * 
	gglobÆ_muãx
 = 0;

9 * 
	gm™agî_muãx
 = 0;

11 
	sAutoLock
 {

12 
	mpublic
:

13 
LIBJSON_OBJECT
(
AutoLock
);

14 
AutoLock
(Ë
	mjs⁄_nŸhrow
 {

15 
	mLIBJSON_CTOR
;

16 
js⁄_lock_ˇŒback
(
m™agî_muãx
);

18 ~
AutoLock
(Ë
	mjs⁄_nŸhrow
 {

19 
	mLIBJSON_DTOR
;

20 
js⁄_u∆ock_ˇŒback
(
m™agî_muãx
);

22 
	m¥iv©e
:

23 
AutoLock
(const AutoLock &);

24 
	mAutoLock
 & 
	m›î©‹
 = (c⁄° 
AutoLock
 &);

27 #ifde‡
JSON_MUTEX_MANAGE


28 
js⁄_muãx_ˇŒback_t
 
	gjs⁄_de°roy
 = 0;

31 
	sauto_globÆ
 {

32 
	mpublic
:

33 
LIBJSON_OBJECT
(
auto_globÆ
;)

34 
auto_globÆ
(Ë
	mjs⁄_nŸhrow
 { 
	mLIBJSON_CTOR
; }

35 ~
auto_globÆ
(Ë
	mjs⁄_nŸhrow
 {

36 
	mLIBJSON_DTOR
;

37 i‡(
	mglobÆ_muãx
){

38 
JSON_ASSERT_SAFE
(
js⁄_de°roy
 !0, 
JSON_TEXT
("No json_destroy in mutex managed mode"), ;);

39 
js⁄_de°roy
(
globÆ_muãx
);

42 
	m¥iv©e
:

43 
auto_globÆ
(constáuto_global &);

44 
	mauto_globÆ
 & 
	m›î©‹
 = (c⁄° 
auto_globÆ
 &);

46 
auto_globÆ
 
	g˛ónupGlobÆ
;

49 
	gJSONNode
::
	$ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 {

50 
js⁄_lock_ˇŒback
 = 
lock
;

51 
js⁄_u∆ock_ˇŒback
 = 
u∆ock
;

52 
m™agî_muãx
 = 
m™agî_lock
;

53 
	}
}

55 
	gJSONNode
::
	$£t_globÆ_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 {

56 
globÆ_muãx
 = 
muãx
;

57 
	}
}

59 
	gJSONNode
::
	$£t_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 {

60 
	`makeUniqueI¡î«l
();

61 
öã∫Æ
 -> 
	`_£t_muãx
(
muãx
);

62 
	}
}

64 * 
	gJSONNode
::
	$gëThisLock
(
JSONNode
 * 
±his
Ë
js⁄_nŸhrow
 {

65 i‡(
±his
 -> 
öã∫Æ
 -> 
mylock
 != 0){

66  
±his
 -> 
öã∫Æ
 -> 
mylock
;

68 
	`JSON_ASSERT
(
globÆ_muãx
 !0, 
	`JSON_TEXT
("No global_mutex"));

69  
globÆ_muãx
;

70 
	}
}

72 
	gJSONNode
::
	$lock
(
thªad
Ë
js⁄_nŸhrow
 {

73 
	`JSON_ASSERT_SAFE
(
js⁄_lock_ˇŒback
 !0, 
	`JSON_TEXT
("NoÜocking callback"), ;);

75 
AutoLock
 
lockC⁄åﬁ
;

78 * 
thi¶ock
 = 
	`gëThisLock
(
this
);

79 #ifde‡
JSON_SAFE


80 i‡(
	`js⁄_u∆ikñy
(
thi¶ock
 == 0)) ;

84 
	`JSON_MAP
(, JSON_MAP(*, Ë)::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
THREAD_LOCKS
).
	`föd
(
thªad
);

85 i‡(
ô
 =
	`js⁄_globÆ
(
THREAD_LOCKS
).
	`íd
()){

86 
	`JSON_MAP
(*, Ë
√wthªad
;

87 
√wthªad
[
thi¶ock
] = 1;

88 
	`js⁄_globÆ
(
THREAD_LOCKS
).
	`ö£π
(
°d
::
∑ú
<, 
	`JSON_MAP
(*, Ë>(
thªad
, 
√wthªad
));

90 
	`JSON_MAP
(*, Ë& 
√wthªad
 = 
ô
 -> 
£c⁄d
;

91 
	`JSON_MAP
(*, )::
ôî©‹
 
	`lockî
(
√wthªad
.
	`föd
(
thi¶ock
));

92 i‡(
lockî
 =
√wthªad
.
	`íd
()){

93 
√wthªad
.
	`ö£π
(
°d
::
∑ú
<*, >(
thi¶ock
, 1));

95 ++(
lockî
 -> 
£c⁄d
);

101 
	`js⁄_lock_ˇŒback
(
thi¶ock
);

102 
	}
}

104 
	gJSONNode
::
	$u∆ock
(
thªad
Ë
js⁄_nŸhrow
{

105 
	`JSON_ASSERT_SAFE
(
js⁄_u∆ock_ˇŒback
 !0, 
	`JSON_TEXT
("No unlocking callback"), ;);

107 
AutoLock
 
lockC⁄åﬁ
;

110 * 
thi¶ock
 = 
	`gëThisLock
(
this
);

111 #ifde‡
JSON_SAFE


112 i‡(
thi¶ock
 == 0) ;

116 
	`JSON_MAP
(, JSON_MAP(*, Ë)::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
THREAD_LOCKS
).
	`föd
(
thªad
);

117 
	`JSON_ASSERT_SAFE
(
ô
 !
	`js⁄_globÆ
(
THREAD_LOCKS
).
	`íd
(), 
	`JSON_TEXT
("thread unlocking something it didn'tÜock"), ;);

120 
	`JSON_MAP
(*, Ë& 
√wthªad
 = 
ô
 -> 
£c⁄d
;

121 
	`JSON_MAP
(*, )::
ôî©‹
 
lockî
 = 
√wthªad
.
	`föd
(
thi¶ock
);

122 
	`JSON_ASSERT_SAFE
(
lockî
 !
√wthªad
.
	`íd
(), 
	`JSON_TEXT
("thread unlocking mutex it didn'tÜock"), ;);

125 i‡(--(
lockî
 -> 
£c⁄d
)) ;

128 
√wthªad
.
	`îa£
(
lockî
);

129 
	`js⁄_u∆ock_ˇŒback
(
thi¶ock
);

131 
	}
}

133 #ifde‡
JSON_MUTEX_MANAGE


134 
	gJSONNode
::
	$ªgi°î_muãx_de°ru˘‹
(
js⁄_muãx_ˇŒback_t
 
de°roy
Ë
js⁄_nŸhrow
 {

135 
js⁄_de°roy
 = 
de°roy
;

136 
	}
}

140 
	göã∫ÆJSONNode
::
	$_£t_muãx
(* 
muãx
, 
boﬁ
 
un£t
Ë
js⁄_nŸhrow
 {

141 i‡(
un£t
Ë
	`_un£t_muãx
();

142 
mylock
 = 
muãx
;

143 i‡(
muãx
 != 0){

144 #ifde‡
JSON_MUTEX_MANAGE


145 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
(
muãx
);

146 i‡(
ô
 =
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
()){

147 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`ö£π
(
°d
::
∑ú
<*, >(
muãx
, 1));

149 ++
ô
 -> 
£c⁄d
;

152 i‡(
	`isC⁄èöî
()){

153 
	`js⁄_f‹óch
(
CHILDREN
, 
myru¬î
){

154 (*
myru¬î
Ë-> 
	`£t_muãx
(
muãx
);

158 
	}
}

160 
	göã∫ÆJSONNode
::
	$_un£t_muãx
(Ë
js⁄_nŸhrow
 {

161 #ifde‡
JSON_MUTEX_MANAGE


162 i‡(
mylock
 != 0){

163 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
(
mylock
);

164 
	`JSON_ASSERT_SAFE
(
ô
 !
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
(), 
	`JSON_TEXT
("MutexÇot managed"), ;);

165 --
ô
 -> 
£c⁄d
;

166 i‡(
ô
 -> 
£c⁄d
 == 0){

167 
	`JSON_ASSERT_SAFE
(
js⁄_de°roy
, 
	`JSON_TEXT
("You didn'tÑegisterá destructor for mutexes"), ;);

168 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`îa£
(
ô
);

172 
	}
}

174 #ifde‡
JSON_DEBUG


175 #i‚de‡
JSON_LIBRARY


176 
JSONNode
 
	göã∫ÆJSONNode
::
	$DumpMuãx
(Ëc⁄° 
js⁄_nŸhrow
 {

177 
JSONNode
 
	`mut
(
JSON_NODE
);

178 
mut
.
	`£t_«me
(
	`JSON_TEXT
("mylock"));

179 #ifde‡
JSON_MUTEX_MANAGE


180 i‡(
mylock
 != 0){

181 
mut
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("this"), ()
mylock
)));

182 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
(
mylock
);

183 i‡(
ô
 =
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
()){

184 
mut
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("references"), JSON_TEXT("error"))));

186 
mut
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ª„ªn˚s"), 
ô
 -> 
£c⁄d
)));

189 
mut
 = ()
mylock
;

192 
mut
 = ()
mylock
;

194  
mut
;

195 
	}
}

200 #ifde‡
JSON_MUTEX_MANAGE


201 #îr‹ 
You
 
ˇn
 
nŸ
 
have
 
JSON_MUTEX_MANAGE
 
⁄
 
wôhout
 
JSON_MUTEX_CALLBACKS


	@libjson/_internal/Source/JSONPreparse.cpp

10 
	~"JSONPª∑r£.h
"

12 #i‡(
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
))

14 #ifde‡
JSON_COMMENTS


15 
js⁄_°rög
 
exåa˘Commít
(js⁄_°rög::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
);

16 
js⁄_°rög
 
exåa˘Commít
(js⁄_°rög::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
){

17 
js⁄_°rög
::
c⁄°_ôî©‹
 
°¨t
;

18 
js⁄_°rög
 
	gªsu…
;

19 
	glo›œbñ
:

20 i‡(
js⁄_u∆ikñy
(((
±r
 !
íd
Ë&& (*±∏=
JSON_TEMP_COMMENT_IDENTIFIER
)))){

21 
°¨t
 = ++
±r
;

22 ; (
	g±r
 !
íd
Ë&& (*(
±r
Ë!
JSON_TEMP_COMMENT_IDENTIFIER
); ++ptr){}

23 
	gªsu…
 +
js⁄_°rög
(
°¨t
, 
±r
);

24 i‡(
js⁄_u∆ikñy
(
±r
 =
íd
)Ë 
ªsu…
;

25 ++
	g±r
;

26 i‡(
js⁄_u∆ikñy
(((
±r
 !
íd
Ë&& (*±∏=
JSON_TEMP_COMMENT_IDENTIFIER
)))){

27 
ªsu…
 +
JSON_TEXT
('\n');

28 
	glo›œbñ
;

31  
	gªsu…
;

33 
	#GET_COMMENT
(
x
, 
y
, 
«me
Ë
js⁄_°rög
Çamê
	`exåa˘Commít
(x, y)

	)

34 
	#RETURN_NODE
(
node
, 
«me
){\

35 
JSONNode
 
ªs
 = 
node
;\

36 
ªs
.
	`£t_commít
(
«me
);\

37  
ªs
;\

38 }

	)

39 
	#RETURN_NODE_NOCOPY
(
node
, 
«me
){\

40 
node
.
	`£t_commít
(
«me
);\

41  
node
;\

42 }

	)

43 
	#SET_COMMENT
(
node
, 
«me
Ënode.
	`£t_commít
“ame)

	)

44 
	#COMMENT_ARG
(
«me
Ë,
	)
name

46 
	#GET_COMMENT
(
x
, 
y
, 
«me
Ë()0

	)

47 
	#RETURN_NODE
(
node
, 
«me
Ë 
	)
node

48 
	#RETURN_NODE_NOCOPY
(
node
, 
«me
Ë 
	)
node

49 
	#SET_COMMENT
(
node
, 
«me
Ë()0

	)

50 
	#COMMENT_ARG
(
«me
)

	)

53 
ölöe
 
boﬁ
 
	$isHex
(
js⁄_ch¨
 
c
Ë
js⁄_puª
;

54 
ölöe
 
boﬁ
 
	$isHex
(
js⁄_ch¨
 
c
Ë
js⁄_nŸhrow
 {

55  (((
c
 >
	`JSON_TEXT
('0')) && (c <= JSON_TEXT('9'))) ||

56 ((
c
 >
	`JSON_TEXT
('A')) && (c <= JSON_TEXT('F'))) ||

57 ((
c
 >
	`JSON_TEXT
('a')) && (c <= JSON_TEXT('f'))));

58 
	}
}

60 #ifde‡
JSON_STRICT


61 
	~"NumbîToSåög.h
"

64 
js⁄_numbî
 
	$FëchNumbî
(c⁄° 
js⁄_°rög
 & 
_°rög
Ë
js⁄_nŸhrow
;

65 
js⁄_numbî
 
	$FëchNumbî
(c⁄° 
js⁄_°rög
 & 
_°rög
Ë
js⁄_nŸhrow
 {

66 #ifde‡
JSON_STRICT


67  
NumbîToSåög
::
	`_©of
(
_°rög
.
	`c_°r
());

69 #ifde‡
JSON_UNICODE


70 c⁄° 
size_t
 
Àn
 = 
_°rög
.
	`Àngth
();

71 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
JSON_SAFE
)

72 c⁄° 
size_t
 
byãs
 = (
Àn
 * ((
js⁄_ch¨
) / ())) + 1;

73 
js⁄_auto
<> 
	`ãmp
(
byãs
);

74 
size_t
 
ªs
;

75 
î∫o_t
 
îr
 = 
°d
::
	`wc°ombs_s
(&
ªs
, 
ãmp
.
±r
, 
byãs
, 
_°rög
.
	`c_°r
(), 
Àn
);

76 i‡(
îr
 != 0){

77  (
js⁄_numbî
)0.0;

79 #ñi‡
	`deföed
(
JSON_SAFE
)

80 c⁄° 
size_t
 
byãs
 = (
Àn
 * ((
js⁄_ch¨
) / ())) + 1;

81 
js⁄_auto
<> 
	`ãmp
(
byãs
);

82 
size_t
 
ªs
 = 
°d
::
	`wc°ombs
(
ãmp
.
±r
, 
_°rög
.
	`c_°r
(), 
Àn
);

83 i‡(
ªs
 =(
size_t
)-1){

84  (
js⁄_numbî
)0.0;

87 
js⁄_auto
<> 
	`ãmp
(
Àn
 + 1);

88 
size_t
 
ªs
 = 
°d
::
	`wc°ombs
(
ãmp
.
±r
, 
_°rög
.
	`c_°r
(), 
Àn
);

90 
ãmp
.
±r
[
ªs
] = 
	`JSON_TEXT
('\0');

91  (
js⁄_numbî
)
°d
::
	`©of
(
ãmp
.
±r
);

93  (
js⁄_numbî
)
°d
::
	`©of
(
_°rög
.
	`c_°r
());

96 
	}
}

98 
JSONNode
 
	gJSONPª∑r£
::
isVÆidNumbî
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
){

101 
js⁄_°rög
::
c⁄°_ôî©‹
 
°¨t
 = 
±r
;

102 
boﬁ
 
	gdecimÆ
 = 
Ál£
;

103 
boﬁ
 
	gscõ¡ific
 = 
Ál£
;

106 *
	g±r
){

107 #i‚de‡
JSON_STRICT


108 
JSON_TEXT
('.'):

109 
decimÆ
 = 
åue
;

111 
JSON_TEXT
('+'):

114 
JSON_TEXT
('-'):

115 
JSON_TEXT
('1'):

116 
JSON_TEXT
('2'):

117 
JSON_TEXT
('3'):

118 
JSON_TEXT
('4'):

119 
JSON_TEXT
('5'):

120 
JSON_TEXT
('6'):

121 
JSON_TEXT
('7'):

122 
JSON_TEXT
('8'):

123 
JSON_TEXT
('9'):

125 
JSON_TEXT
('0'):

126 ++
±r
;

127 *
	g±r
){

128 
JSON_TEXT
('.'):

129 
decimÆ
 = 
åue
;

131 
JSON_TEXT
('e'):

132 
JSON_TEXT
('E'):

133 
scõ¡ific
 = 
åue
;

134 ++
	g±r
;

135 i‡(
	g±r
 =
íd
Ë
throw
 
Ál£
;

136 *
	g±r
){

137 
JSON_TEXT
('-'):

138 
JSON_TEXT
('+'):

139 
JSON_TEXT
('0'):

140 
JSON_TEXT
('1'):

141 
JSON_TEXT
('2'):

142 
JSON_TEXT
('3'):

143 
JSON_TEXT
('4'):

144 
JSON_TEXT
('5'):

145 
JSON_TEXT
('6'):

146 
JSON_TEXT
('7'):

147 
JSON_TEXT
('8'):

148 
JSON_TEXT
('9'):

151 
throw
 
Ál£
;

155 #i‚de‡
JSON_STRICT


156 
JSON_TEXT
('x'):

157 
isHex
(*++
±r
)){};

158  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
FëchNumbî
(
js⁄_°rög
(
°¨t
, 
íd
 - 1)));

159 #ifde‡
JSON_OCTAL


160 #ifde‡
__GNUC__


161 
JSON_TEXT
('0') ... JSON_TEXT('7'):

163 
JSON_TEXT
('0'):

164 
JSON_TEXT
('1'):

165 
JSON_TEXT
('2'):

166 
JSON_TEXT
('3'):

167 
JSON_TEXT
('4'):

168 
JSON_TEXT
('5'):

169 
JSON_TEXT
('6'):

170 
JSON_TEXT
('7'):

172 (*++
±r
 >
JSON_TEXT
('0')) && (*ptr <= JSON_TEXT('7'))){};

173 i‡((*
	g±r
 !
JSON_TEXT
('8')Ë&& (*
±r
 != JSON_TEXT('9'))){

174  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
FëchNumbî
(
js⁄_°rög
(
°¨t
, 
±r
 - 1)));

176 
throw
 
	gÁl£
;

177 
JSON_TEXT
('8'):

178 
JSON_TEXT
('9'):

181 #ifde‡
__GNUC__


182 
JSON_TEXT
('0') ... JSON_TEXT('9'):

184 
JSON_TEXT
('0'):

185 
JSON_TEXT
('1'):

186 
JSON_TEXT
('2'):

187 
JSON_TEXT
('3'):

188 
JSON_TEXT
('4'):

189 
JSON_TEXT
('5'):

190 
JSON_TEXT
('6'):

191 
JSON_TEXT
('7'):

192 
JSON_TEXT
('8'):

193 
JSON_TEXT
('9'):

198 #ifde‡
__GNUC__


199 
JSON_TEXT
('0') ... JSON_TEXT('9'):

201 
JSON_TEXT
('0'):

202 
JSON_TEXT
('1'):

203 
JSON_TEXT
('2'):

204 
JSON_TEXT
('3'):

205 
JSON_TEXT
('4'):

206 
JSON_TEXT
('5'):

207 
JSON_TEXT
('6'):

208 
JSON_TEXT
('7'):

209 
JSON_TEXT
('8'):

210 
JSON_TEXT
('9'):

215  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
FëchNumbî
(
js⁄_°rög
(
°¨t
, 
±r
 - 1)));;

219 
throw
 
Ál£
;

221 ++
	g±r
;

224 
	gåue
){

225 *
	g±r
){

226 
JSON_TEXT
('.'):

227 i‡(
js⁄_u∆ikñy
(
decimÆ
)Ë
throw
 
Ál£
;

228 i‡(
js⁄_u∆ikñy
(
scõ¡ific
)Ë
throw
 
	gÁl£
;

229 
	gdecimÆ
 = 
åue
;

231 
JSON_TEXT
('e'):

232 
JSON_TEXT
('E'):

233 i‡(
js⁄_likñy
(
scõ¡ific
)Ë
throw
 
Ál£
;

234 
	gscõ¡ific
 = 
åue
;

235 ++
	g±r
;

236 *
	g±r
){

237 
JSON_TEXT
('-'):

238 
JSON_TEXT
('+'):

239 #ifde‡
__GNUC__


240 
JSON_TEXT
('0') ... JSON_TEXT('9'):

242 
JSON_TEXT
('0'):

243 
JSON_TEXT
('1'):

244 
JSON_TEXT
('2'):

245 
JSON_TEXT
('3'):

246 
JSON_TEXT
('4'):

247 
JSON_TEXT
('5'):

248 
JSON_TEXT
('6'):

249 
JSON_TEXT
('7'):

250 
JSON_TEXT
('8'):

251 
JSON_TEXT
('9'):

255 
throw
 
Ál£
;

258 #ifde‡
__GNUC__


259 
JSON_TEXT
('0') ... JSON_TEXT('9'):

261 
JSON_TEXT
('0'):

262 
JSON_TEXT
('1'):

263 
JSON_TEXT
('2'):

264 
JSON_TEXT
('3'):

265 
JSON_TEXT
('4'):

266 
JSON_TEXT
('5'):

267 
JSON_TEXT
('6'):

268 
JSON_TEXT
('7'):

269 
JSON_TEXT
('8'):

270 
JSON_TEXT
('9'):

274  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
FëchNumbî
(
js⁄_°rög
(
°¨t
, 
±r
)));;

276 ++
	g±r
;

278 
throw
 
	gÁl£
;

281 #i‚de‡
JSON_STRICT


282 
	#LETTERCASE
(
x
, 
y
)\

283 
	`JSON_TEXT
(
x
):\

284 
	`JSON_TEXT
(
y
)

	)

285 
	#LETTERCHECK
(
x
, 
y
)\

286 i‡(
	`js⁄_u∆ikñy
((*++
±r
 !
	`JSON_TEXT
(
x
)Ë&& (*±∏!JSON_TEXT(
y
)))Ë
throw
 
Ál£


	)

288 
	#LETTERCASE
(
x
, 
y
)\

289 
	`JSON_TEXT
(
x
)

	)

290 
	#LETTERCHECK
(
x
, 
y
)\

291 i‡(
	`js⁄_u∆ikñy
(*++
±r
 !
	`JSON_TEXT
(
x
))Ë
throw
 
Ál£


	)

293 
JSONNode
 
	gJSONPª∑r£
::
isVÆidMembî
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
){

296 i‡(
±r
 =
íd
Ë
throw
 
Ál£
;

298 *
	g±r
){

299 
JSON_TEXT
('\"'):{

300  
JSONNode
::
°rögTy≥
(
isVÆidSåög
(++
±r
, 
íd
));

302 
JSON_TEXT
('{'):

303  
isVÆidObje˘
(++
±r
, 
íd
);

304 
JSON_TEXT
('['):

305  
isVÆidAºay
(++
±r
, 
íd
);

306 
LETTERCASE
('t', 'T'):

307 
LETTERCHECK
('r', 'R');

308 
LETTERCHECK
('u', 'U');

309 
LETTERCHECK
('e', 'E');

310 ++
	g±r
;

311  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
åue
);

312 
LETTERCASE
('f', 'F'):

313 
LETTERCHECK
('a', 'A');

314 
LETTERCHECK
('l', 'L');

315 
LETTERCHECK
('s', 'S');

316 
LETTERCHECK
('e', 'E');

317 ++
	g±r
;

318  
JSONNode
(
js⁄_globÆ
(
EMPTY_JSON_STRING
), 
Ál£
);

319 
LETTERCASE
('n', 'N'):

320 
LETTERCHECK
('u', 'U');

321 
LETTERCHECK
('l', 'L');

322 
LETTERCHECK
('l', 'L');

323 ++
	g±r
;

324  
JSONNode
(
JSON_NULL
);

325 #i‚de‡
JSON_STRICT


326 
JSON_TEXT
('}'):

327 
JSON_TEXT
(']'):

328 
JSON_TEXT
(','):

329  
JSONNode
(
JSON_NULL
);

333  
isVÆidNumbî
(
±r
, 
íd
);

336 
js⁄_°rög
 
	gJSONPª∑r£
::
isVÆidSåög
(js⁄_°rög::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
){

339 
js⁄_°rög
::
c⁄°_ôî©‹
 
°¨t
 = 
±r
;

341 
	g±r
 !
íd
){

342 *
±r
){

343 
JSON_TEXT
('\\'):

344 *(++
±r
)){

345 
JSON_TEXT
('\"'):

346 
JSON_TEXT
('\\'):

347 
JSON_TEXT
('/'):

348 
JSON_TEXT
('b'):

349 
JSON_TEXT
('f'):

350 
JSON_TEXT
('n'):

351 
JSON_TEXT
('r'):

352 
JSON_TEXT
('t'):

354 
JSON_TEXT
('u'):

355 i‡(
js⁄_u∆ikñy
(!
isHex
(*++
±r
))Ë
throw
 
Ál£
;

356 i‡(
js⁄_u∆ikñy
(!
isHex
(*++
±r
))Ë
throw
 
	gÁl£
;

358 #i‚de‡
JSON_STRICT


359 
JSON_TEXT
('x'):

361 i‡(
js⁄_u∆ikñy
(!
isHex
(*++
±r
))Ë
throw
 
Ál£
;

362 i‡(
js⁄_u∆ikñy
(!
isHex
(*++
±r
))Ë
throw
 
	gÁl£
;

364 #i‚de‡
JSON_OCTAL


365 #ifde‡
__GNUC__


366 
JSON_TEXT
('0') ... JSON_TEXT('7'):

368 
JSON_TEXT
('0'):

369 
JSON_TEXT
('1'):

370 
JSON_TEXT
('2'):

371 
JSON_TEXT
('3'):

372 
JSON_TEXT
('4'):

373 
JSON_TEXT
('5'):

374 
JSON_TEXT
('6'):

375 
JSON_TEXT
('7'):

377 i‡(
js⁄_u∆ikñy
((*++
±r
 < 
JSON_TEXT
('0')Ë|| (*±∏> JSON_TEXT('7')))Ë
throw
 
Ál£
;

378 i‡(
js⁄_u∆ikñy
((*++
±r
 < 
JSON_TEXT
('0')Ë|| (*±∏> JSON_TEXT('7')))Ë
throw
 
	gÁl£
;

382 
throw
 
Ál£
;

385 
JSON_TEXT
('\"'):

386  
js⁄_°rög
(
°¨t
, 
±r
++);

388 ++
	g±r
;

390 
throw
 
	gÁl£
;

393 
	gJSONPª∑r£
::
isVÆidNamedObje˘
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
, 
JSONNode
 & 
∑ª¡
 
	$COMMENT_PARAM
(
commít
)) {

396 
js⁄_°rög
 
_«me
 = 
	`isVÆidSåög
(++
±r
, 
íd
);

397 i‡(
	`js⁄_u∆ikñy
(*
±r
++ !
	`JSON_TEXT
(':'))Ë
throw
 
Ál£
;

398 
JSONNode
 
ªs
 = 
	`isVÆidMembî
(
±r
, 
íd
);

399 
ªs
.
	`£t_«me_
(
_«me
);

400 
	`SET_COMMENT
(
ªs
, 
commít
);

401 #ifde‡
JSON_LIBRARY


402 
∑ª¡
.
	`push_back
(&
ªs
);

404 
∑ª¡
.
	`push_back
(
ªs
);

407 i‡(
±r
 =
íd
Ë
throw
 
Ál£
;

408 *
±r
){

409 
	`JSON_TEXT
(','):

410 ++
±r
;

412 
	`GET_COMMENT
(
±r
, 
íd
, 
√xtcommít
);

413 
	`isVÆidNamedObje˘
(
±r
, 
íd
, 
∑ª¡
 
	`COMMENT_ARG
(
√xtcommít
));

416 
	`JSON_TEXT
('}'):

417 ++
±r
;

420 
throw
 
Ál£
;

422 
	}
}

424 
JSONNode
 
	gJSONPª∑r£
::
isVÆidObje˘
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
) {

427 
JSONNode
 
ªs
(
JSON_NODE
);

428 
GET_COMMENT
(
±r
, 
íd
, 
commít
);

429 *
	g±r
){

430 
JSON_TEXT
('\"'):

431 
isVÆidNamedObje˘
(
±r
, 
íd
, 
ªs
 
COMMENT_ARG
(
commít
));

432  
	gªs
;

433 
JSON_TEXT
('}'):

434 ++
±r
;

435  
	gªs
;

437 
throw
 
Ál£
;

441 
pushAºayMembî
(
JSONNode
 & 
ªs
, 
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
);

442 
pushAºayMembî
(
JSONNode
 & 
ªs
, 
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
){

443 
GET_COMMENT
(
±r
, 
íd
, 
commít
);

444 
JSONNode
 
	gãmp
 = 
JSONPª∑r£
::
isVÆidMembî
(
±r
, 
íd
);

445 
SET_COMMENT
(
ãmp
, 
commít
);

446 #ifde‡
JSON_LIBRARY


447 
	gªs
.
push_back
(&
ãmp
);

449 
	gªs
.
push_back
(
ãmp
);

453 
JSONNode
 
	gJSONPª∑r£
::
isVÆidAºay
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
) {

456 
JSONNode
 
ªs
(
JSON_ARRAY
);

458 *
	g±r
){

459 
JSON_TEXT
(']'):

460 ++
±r
;

461  
	gªs
;

463 
pushAºayMembî
(
ªs
, 
±r
, 
íd
);

464 *
	g±r
){

465 
JSON_TEXT
(','):

467 
JSON_TEXT
(']'):

468 ++
±r
;

469  
	gªs
;

471 
throw
 
Ál£
;

475 } ++
	g±r
 !
íd
);

476 
throw
 
	gÁl£
;

479 
JSONNode
 
	gJSONPª∑r£
::
	$isVÆidRoŸ
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
) {

480 
js⁄_°rög
::
c⁄°_ôî©‹
 
ô
 = 
js⁄
.
	`begö
();

481 
js⁄_°rög
::
c⁄°_ôî©‹
 
íd
 = 
js⁄
.
	`íd
();

482 
åy
 {

483 
	`GET_COMMENT
(
ô
, 
íd
, 
commít
);

484 *
ô
){

485 
	`JSON_TEXT
('{'):

486 
	`RETURN_NODE
(
	`isVÆidObje˘
(++
ô
, 
íd
), 
commít
);

487 
	`JSON_TEXT
('['):

488 
	`RETURN_NODE
(
	`isVÆidAºay
(++
ô
, 
íd
), 
commít
);

490 } 
	`ˇtch
 (...){}

492 #i‚de‡
JSON_NO_EXCEPTIONS


493 
throw
 
°d
::
	`övÆid_¨gumít
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
));

495  
	`JSONNode
(
JSON_NULL
);

497 
	}
}

	@libjson/_internal/Source/JSONPreparse.h

1 #i‚de‡
LIBJSON_GUARD_PREPARSE_H


2 
	#LIBJSON_GUARD_PREPARSE_H


	)

4 
	~"JSONDebug.h
"

5 
	~"JSONNode.h
"

7 #i‡(
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
))

9 #ifde‡
JSON_COMMENTS


10 
	#COMMENT_PARAM
(
«me
Ë,c⁄° 
js⁄_°rög
 & 
	)
name

12 
	#COMMENT_PARAM
(
«me
)

	)

15 ˛as†
	cJSONPª∑r£
 {

16 
	mpublic
:

17 
JSONNode
 
isVÆidNumbî
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
Ë
js⁄_ªad_¥i‹ôy
;

18 
JSONNode
 
isVÆidMembî
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
Ë
js⁄_ªad_¥i‹ôy
;

19 
js⁄_°rög
 
isVÆidSåög
(js⁄_°rög::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
Ë
js⁄_ªad_¥i‹ôy
;

20 
isVÆidNamedObje˘
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
, 
JSONNode
 & 
∑ª¡
 
	$COMMENT_PARAM
(
commít
)Ë
js⁄_ªad_¥i‹ôy
;

21 
JSONNode
 
	`isVÆidObje˘
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
Ë
js⁄_ªad_¥i‹ôy
;

22 
JSONNode
 
	`isVÆidAºay
(
js⁄_°rög
::
c⁄°_ôî©‹
 & 
±r
, js⁄_°rög::c⁄°_ôî©‹ & 
íd
Ë
js⁄_ªad_¥i‹ôy
;

23 
JSONNode
 
	$isVÆidRoŸ
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
Ë
js⁄_ªad_¥i‹ôy
;

	@libjson/_internal/Source/JSONSharedString.h

1 #i‚de‡
JSON_SHARED_STRING_H


2 
	#JSON_SHARED_STRING_H


	)

14 
	~"JSONDebug.h
"

15 
	~"JSONGlobÆs.h
"

16 
	~"JSONMem‹y.h
"

27 #ifde‡
JSON_LESS_MEMORY


28 #ifde‡
__GNUC__


29 #¥agm®
∑ck
(
push
, 1)

30 #ñi‡
_MSC_VER


31 #¥agm®
∑ck
(
push
, 
js⁄_sh¨ed_°rög_∑ck
, 1)

35 ˛as†
	cjs⁄_sh¨ed_°rög
 {

36 
	mpublic
:

39 
ôî©‹
;

40 
	sc⁄°_ôî©‹
 {

41 
c⁄°_ôî©‹
(c⁄° 
js⁄_ch¨
 * 
p
, c⁄° 
js⁄_sh¨ed_°rög
 * 
∑
Ë: 
∑ª¡
’a), 
ô
(p){}

43 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 ++(Ë
	mjs⁄_nŸhrow
 { ++
	mô
;  *
	mthis
; }

44 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 --(Ë
	mjs⁄_nŸhrow
 { --
	mô
;  *
	mthis
; }

45 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 +=(
i
Ë
js⁄_nŸhrow
 { 
ô
 +i;  *
	mthis
; }

46 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 -=(
i
Ë
js⁄_nŸhrow
 { 
ô
 -i;  *
	mthis
; }

47 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 ++(Ë
	mjs⁄_nŸhrow
 {

48 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

49 ++
	mô
;

50  
	mªsu…
;

52 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 --(Ë
	mjs⁄_nŸhrow
 {

53 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

54 --
	mô
;

55  
	mªsu…
;

57 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 +(
	mi
Ëc⁄° 
	mjs⁄_nŸhrow
 {

58 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

59 
	mªsu…
.
	mô
 +
i
;

60  
	mªsu…
;

62 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 -(
	mi
Ëc⁄° 
	mjs⁄_nŸhrow
 {

63 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

64 
	mªsu…
.
	mô
 -
i
;

65  
	mªsu…
;

67 
ölöe
 c⁄° 
	mjs⁄_ch¨
 & 
	m›î©‹
 [](
size_t
 
	mpos
Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
[
pos
]; };

68 
ölöe
 c⁄° 
	mjs⁄_ch¨
 & 
	m›î©‹
 *(Ëc⁄° 
	mjs⁄_nŸhrow
 {  *
	mô
; }

69 
ölöe
 c⁄° 
js⁄_ch¨
 * 
	m›î©‹
 ->(Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
; }

70 
ölöe
 
boﬁ
 
	m›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

71 
ölöe
 
boﬁ
 
	m›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

72 
ölöe
 
boﬁ
 
	m›î©‹
 > (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
 > other.it; }

73 
ölöe
 
boﬁ
 
	m›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

74 
ölöe
 
boﬁ
 
	m›î©‹
 < (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
 < other.it; }

75 
ölöe
 
boﬁ
 
	m›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

77 
ölöe
 
boﬁ
 
	m›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

78 
ölöe
 
boﬁ
 
	m›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

79 
ölöe
 
boﬁ
 
	m›î©‹
 > (c⁄° 
	môî©‹
 & 
	mŸhî
Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
 > other.it; }

80 
ölöe
 
boﬁ
 
	m›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

81 
ölöe
 
boﬁ
 
	m›î©‹
 < (c⁄° 
	môî©‹
 & 
	mŸhî
Ëc⁄° 
	mjs⁄_nŸhrow
 {  
	mô
 < other.it; }

82 
ölöe
 
boﬁ
 
	m›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

84 
ölöe
 
	mc⁄°_ôî©‹
 & 
	m›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
	mthis
; }

85 
c⁄°_ôî©‹
 (c⁄° c⁄°_ôî©‹ & 
‹ig
Ë
	mjs⁄_nŸhrow
 : 
ô
(orig.it) {}

86 
¥iv©e
:

87 c⁄° 
js⁄_sh¨ed_°rög
 * 
∑ª¡
;

88 c⁄° 
js⁄_ch¨
 * 
	mô
;

89 
‰õnd
 
˛ass
 
	mjs⁄_sh¨ed_°rög
;

90 
‰õnd
 
	môî©‹
;

93 
	sôî©‹
 {

94 
ôî©‹
(c⁄° 
js⁄_ch¨
 * 
p
, c⁄° 
js⁄_sh¨ed_°rög
 * 
∑
Ë: 
∑ª¡
’a), 
ô
(p){}

96 
ölöe
 
	gôî©‹
& 
	g›î©‹
 ++(Ë
	gjs⁄_nŸhrow
 { ++
	gô
;  *
	gthis
; }

97 
ölöe
 
	gôî©‹
& 
	g›î©‹
 --(Ë
	gjs⁄_nŸhrow
 { --
	gô
;  *
	gthis
; }

98 
ölöe
 
	gôî©‹
& 
	g›î©‹
 +=(
i
Ë
js⁄_nŸhrow
 { 
ô
 +i;  *
	gthis
; }

99 
ölöe
 
	gôî©‹
& 
	g›î©‹
 -=(
i
Ë
js⁄_nŸhrow
 { 
ô
 -i;  *
	gthis
; }

100 
ölöe
 
ôî©‹
 
	g›î©‹
 ++(Ë
	gjs⁄_nŸhrow
 {

101 
ôî©‹
 
ªsu…
(*
this
);

102 ++
	gô
;

103  
	gªsu…
;

105 
ölöe
 
ôî©‹
 
	g›î©‹
 --(Ë
	gjs⁄_nŸhrow
 {

106 
ôî©‹
 
ªsu…
(*
this
);

107 --
	gô
;

108  
	gªsu…
;

110 
ölöe
 
ôî©‹
 
	g›î©‹
 +(
	gi
Ëc⁄° 
	gjs⁄_nŸhrow
 {

111 
ôî©‹
 
ªsu…
(*
this
);

112 
	gªsu…
.
	gô
 +
i
;

113  
	gªsu…
;

115 
ölöe
 
ôî©‹
 
	g›î©‹
 -(
	gi
Ëc⁄° 
	gjs⁄_nŸhrow
 {

116 
ôî©‹
 
ªsu…
(*
this
);

117 
	gªsu…
.
	gô
 -
i
;

118  
	gªsu…
;

120 
ölöe
 c⁄° 
	gjs⁄_ch¨
 & 
	g›î©‹
 [](
size_t
 
	gpos
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
[
pos
]; };

121 
ölöe
 c⁄° 
	gjs⁄_ch¨
 & 
	g›î©‹
 *(Ëc⁄° 
	gjs⁄_nŸhrow
 {  *
	gô
; }

122 
ölöe
 c⁄° 
js⁄_ch¨
 * 
	g›î©‹
 ->(Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
; }

123 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

124 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

125 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gc⁄°_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 > other.it; }

126 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

127 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gc⁄°_ôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 < other.it; }

128 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

130 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 == other.it; }

131 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 != other.it; }

132 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 > other.it; }

133 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 >= other.it; }

134 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° 
	gjs⁄_nŸhrow
 {  
	gô
 < other.it; }

135 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° 
js⁄_nŸhrow
 {  
ô
 <= other.it; }

137 
ölöe
 
	gôî©‹
 & 
	g›î©‹
 =(c⁄° 
ôî©‹
 & 
‹ig
Ë
js⁄_nŸhrow
 { 
ô
 = orig.ô;  *
	gthis
; }

138 
ôî©‹
 (c⁄° iãøt‹ & 
‹ig
Ë
	gjs⁄_nŸhrow
 : 
ô
(orig.it) {}

139 
¥iv©e
:

140 c⁄° 
js⁄_sh¨ed_°rög
 * 
∑ª¡
;

141 c⁄° 
js⁄_ch¨
 * 
	gô
;

142 
‰õnd
 
˛ass
 
	gjs⁄_sh¨ed_°rög
;

143 
‰õnd
 
	gc⁄°_ôî©‹
;

148 
ölöe
 
	gjs⁄_sh¨ed_°rög
::
ôî©‹
 
	$begö
(){

149 
ôî©‹
 
ªs
 = 
	`ôî©‹
(
	`d©a
(), 
this
);

150  
ªs
;

151 
	}
}

152 
ölöe
 
	gjs⁄_sh¨ed_°rög
::
ôî©‹
 
	$íd
(){

153 
ôî©‹
 
ªs
 = 
	`ôî©‹
(
	`d©a
(Ë+ 
Àn
, 
this
);

154  
ªs
;

155 
	}
}

156 
ölöe
 
	gjs⁄_sh¨ed_°rög
::
c⁄°_ôî©‹
 
	$begö
() const {

157 
c⁄°_ôî©‹
 
ªs
 = 
	`c⁄°_ôî©‹
(
	`d©a
(), 
this
);

158  
ªs
;

159 
	}
}

160 
ölöe
 
	gjs⁄_sh¨ed_°rög
::
c⁄°_ôî©‹
 
	$íd
() const {

161 
c⁄°_ôî©‹
 
ªs
 = 
	`c⁄°_ôî©‹
(
	`d©a
(Ë+ 
Àn
, 
this
);

162  
ªs
;

163 
	}
}

166 
ölöe
 
	gjs⁄_°rög
::
ôî©‹
 
	$°d_begö
(){

167  
_°r
 -> 
my°rög
.
	`begö
(Ë+ 
off£t
;

168 
	}
}

169 
ölöe
 
	gjs⁄_°rög
::
ôî©‹
 
	$°d_íd
(){

170  
	`°d_begö
(Ë+ 
Àn
;

171 
	}
}

173 
ölöe
 
	gjs⁄_°rög
::
c⁄°_ôî©‹
 
	$°d_begö
() const{

174  
_°r
 -> 
my°rög
.
	`begö
(Ë+ 
off£t
;

175 
	}
}

176 
ölöe
 
	gjs⁄_°rög
::
c⁄°_ôî©‹
 
	$°d_íd
() const{

177  
	`°d_begö
(Ë+ 
Àn
;

178 
	}
}

180 
ölöe
 
	$js⁄_sh¨ed_°rög
(Ë: 
	`off£t
(0), 
	`Àn
(0), 
	`_°r
(
	`√w
(
js⁄_mÆloc
<
js⁄_sh¨ed_°rög_öã∫Æ
>(1)Ë
	`js⁄_sh¨ed_°rög_öã∫Æ
(
	$js⁄_globÆ
(
EMPTY_JSON_STRING
))Ë{
	}
}

182 
ölöe
 
	$js⁄_sh¨ed_°rög
(c⁄° 
js⁄_°rög
 & 
°r
Ë: 
	`off£t
(0), 
	`Àn
(°r.
	`Àngth
()), 
	`_°r
(
	`√w
(
js⁄_mÆloc
<
js⁄_sh¨ed_°rög_öã∫Æ
>(1)Ë
	$js⁄_sh¨ed_°rög_öã∫Æ
(
°r
)Ë{
	}
}

184 
ölöe
 
	$js⁄_sh¨ed_°rög
(c⁄° 
js⁄_sh¨ed_°rög
 & 
°r
, 
size_t
 
_off£t
, size_à
_Àn
Ë: 
	`_°r
(°r.
_°r
), 
	`off£t
(°r.
off£t
 + _off£t), 
	$Àn
(
_Àn
) {

185 ++
_°r
 -> 
ªfCou¡
;

186 
	}
}

188 
ölöe
 
	$js⁄_sh¨ed_°rög
(c⁄° 
js⁄_sh¨ed_°rög
 & 
°r
, 
size_t
 
_off£t
Ë: 
	`_°r
(°r.
_°r
), 
	`off£t
(°r.
off£t
 + _off£t), 
	`Àn
(°r.
Àn
 - _offset) {

189 ++
_°r
 -> 
ªfCou¡
;

190 
	}
}

192 
ölöe
 
	$js⁄_sh¨ed_°rög
(c⁄° 
ôî©‹
 & 
s
, c⁄° iãøt‹ & 
e
Ë: 
	`_°r
(s.
∑ª¡
 -> 
_°r
), 
	`off£t
(s.
ô
 - s.∑ª¡ -> _°∏-> 
my°rög
.
	`d©a
()), 
	`Àn
(e.it - s.it){

193 ++
_°r
 -> 
ªfCou¡
;

194 
	}
}

196 
	gölöe
 ~
	$js⁄_sh¨ed_°rög
(){

197 
	`dîef
();

198 
	}
}

200 
ölöe
 
boﬁ
 
	$em±y
(Ëc⁄° {  
Àn
 =0; 
	}
}

202 
size_t
 
	$föd
(
js⁄_ch¨
 
ch
, 
size_t
 
pos
 = 0) const {

203 i‡(
_°r
 -> 
ªfCou¡
 =1Ë _°∏-> 
my°rög
.
	`föd
(
ch
, 
pos
);

204 
js⁄_°rög
::
c⁄°_ôî©‹
 
e
 = 
	`°d_íd
();

205 
js⁄_°rög
::
c⁄°_ôî©‹
 
b
 = 
	`°d_begö
(Ë+ 
pos
; b !
e
; ++b){

206 i‡(*
b
 =
ch
Ë b - 
	`°d_begö
();

208  
js⁄_°rög
::
≈os
;

209 
	}
}

211 
ölöe
 
	gjs⁄_ch¨
 & 
	g›î©‹
[] (
size_t
 
	gloc
){

212  
	g_°r
 -> 
	gmy°rög
[
loc
 + 
off£t
];

214 
ölöe
 
js⁄_ch¨
 
	g›î©‹
[] (
size_t
 
	gloc
) const {

215  
	g_°r
 -> 
	gmy°rög
[
loc
 + 
off£t
];

217 
ölöe
 
	$˛ór
(){ 
Àn
 = 0; 
	}
}

218 
ölöe
 
size_t
 
	$Àngth
(Ëc⁄° {  
Àn
; 
	}
}

219 
ölöe
 c⁄° 
js⁄_ch¨
 * 
	$c_°r
(Ëc⁄° {  
	`toSåög
().
	`c_°r
(); 
	}
}

220 
ölöe
 c⁄° 
js⁄_ch¨
 * 
	$d©a
(Ëc⁄° {  
_°r
 -> 
my°rög
.
	`d©a
(Ë+ 
off£t
; 
	}
}

222 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
js⁄_sh¨ed_°rög
 & 
Ÿhî
) const {

223 i‡((
Ÿhî
.
_°r
 =_°rË&& (Ÿhî.
Àn
 =ÀnË&& (Ÿhî.
off£t
 =off£t)Ë 
Ál£
;

224  
	gŸhî
.
toSåög
() !=ÅoString();

227 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
js⁄_sh¨ed_°rög
 & 
Ÿhî
) const {

228 i‡((
Ÿhî
.
_°r
 =_°rË&& (Ÿhî.
Àn
 =ÀnË&& (Ÿhî.
off£t
 =off£t)Ë 
åue
;

229  
	gŸhî
.
toSåög
() ==ÅoString();

232 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
js⁄_°rög
 & 
Ÿhî
) const {

233  
Ÿhî
 =
toSåög
();

236 
	gjs⁄_°rög
 & 
	$toSåög
() const {

238 i‡(
_°r
 -> 
ªfCou¡
 == 1){

239 i‡(
off£t
 || 
Àn
 !
_°r
 -> 
my°rög
.
	`Àngth
()){

240 
_°r
 -> 
my°rög
 = 
	`js⁄_°rög
(
	`°d_begö
(), 
	`°d_íd
());

242 } i‡(
off£t
 || 
Àn
 !
_°r
 -> 
my°rög
.
	`Àngth
()){

243 --
_°r
 -> 
ªfCou¡
;

244 
_°r
 = 
	`√w
(
js⁄_mÆloc
<
js⁄_sh¨ed_°rög_öã∫Æ
>(1)Ë
	`js⁄_sh¨ed_°rög_öã∫Æ
(
	`js⁄_°rög
(
	`°d_begö
(), 
	`°d_íd
()));

246 
off£t
 = 0;

247  
_°r
 -> 
my°rög
;

248 
	}
}

251 
ölöe
 
	$assign
(c⁄° 
js⁄_sh¨ed_°rög
 & 
Ÿhî
, 
size_t
 
_off£t
, size_à
_Àn
){

252 i‡(
Ÿhî
.
_°r
 != _str){

253 
	`dîef
();

254 
_°r
 = 
Ÿhî
._str;

256 ++
_°r
 -> 
ªfCou¡
;

257 
off£t
 = 
Ÿhî
.off£à+ 
_off£t
;

258 
Àn
 = 
_Àn
;

259 
	}
}

261 
	$js⁄_sh¨ed_°rög
(c⁄° 
js⁄_sh¨ed_°rög
 & 
Ÿhî
Ë: 
	`_°r
(Ÿhî.
_°r
), 
	`off£t
(Ÿhî.
off£t
), 
	$Àn
(
Ÿhî
.
Àn
){

262 ++
_°r
 -> 
ªfCou¡
;

263 
	}
}

265 
	gjs⁄_sh¨ed_°rög
 & 
	g›î©‹
 =(c⁄° 
js⁄_sh¨ed_°rög
 & 
Ÿhî
){

266 i‡(
Ÿhî
.
_°r
 != _str){

267 
dîef
();

268 
	g_°r
 = 
Ÿhî
.
_°r
;

269 ++
	g_°r
 -> 
	gªfCou¡
;

271 
	goff£t
 = 
Ÿhî
.
off£t
;

272 
	gÀn
 = 
Ÿhî
.
Àn
;

273  *
	gthis
;

276 
	gjs⁄_sh¨ed_°rög
 & 
	g›î©‹
 +(c⁄° 
js⁄_ch¨
 
c
){

277 
toSåög
(Ë+
c
;

278 ++
	gÀn
;

279  *
	gthis
;

283 
JSON_PRIVATE


284 
	sjs⁄_sh¨ed_°rög_öã∫Æ
 {

285 
ölöe
 
js⁄_sh¨ed_°rög_öã∫Æ
(c⁄° 
js⁄_°rög
 & 
_my°rög
Ë: 
my°rög
(_my°rög), 
ªfCou¡
(1) {}

286 
js⁄_°rög
 
	gmy°rög
;

287 
size_t
 
ªfCou¡
 
PACKED
(20);

289 
ölöe
 
	$dîef
(){

290 i‡(--
_°r
 -> 
ªfCou¡
 == 0){

291 
_°r
 -> ~
	`js⁄_sh¨ed_°rög_öã∫Æ
();

292 
libjs⁄_‰ì
<
js⁄_sh¨ed_°rög_öã∫Æ
>(
_°r
);

294 
	}
}

295 
muèbÀ
 
js⁄_sh¨ed_°rög_öã∫Æ
 * 
	g_°r
;

296 
muèbÀ
 
size_t
 
off£t
 
PACKED
(20);

297 
muèbÀ
 
size_t
 
Àn
 
PACKED
(20);

300 #ifde‡
JSON_LESS_MEMORY


301 #ifde‡
__GNUC__


302 #¥agm®
∑ck
(
p›
)

303 #ñi‡
_MSC_VER


304 #¥agm®
∑ck
(
p›
, 
js⁄_sh¨ed_°rög_∑ck
,)

	@libjson/_internal/Source/JSONSingleton.h

1 #i‚de‡
JSONSINGLETON_H


2 
	#JSONSINGLETON_H


	)

4 
	gãm∂©e
 <
ty≥«me
 
	gT
> cœs†
	cJSONSögÀt⁄
 {

5 
	mpublic
:

6 
ölöe
 
T
 
	$gë
(){

7  
	`gë_sögÀt⁄
(Ë-> 
±r
;

9 
ölöe
 
	$£t
(
T
 
p
){

10 
	`gë_sögÀt⁄
(Ë-> 
±r
 = 
p
;

11 
	}
}

12 
	g¥iv©e
:

13 
ölöe
 
	$JSONSögÀt⁄
(Ë: 
	$±r
(
NULL
Ë{ 
	}
}

14 
JSONSögÀt⁄
(c⁄° JSONSögÀt⁄<
T
> &);

15 
	gJSONSögÀt⁄
<
	gT
> 
	g›î©‹
 = (c⁄° 
JSONSögÀt⁄
<
T
> &);

16 
ölöe
 
	gJSONSögÀt⁄
<
	gT
> * 
	$gë_sögÀt⁄
(){

17 
JSONSögÀt⁄
<
T
> 
ö°™˚
;

18  &
ö°™˚
;

19 
	}
}

20 
T
 
	g±r
;

	@libjson/_internal/Source/JSONStats.h

1 #i‚de‡
Te°Suôe_JSONSèts_h


2 
	#Te°Suôe_JSONSèts_h


	)

4 
	~"../../JSONO±i⁄s.h
"

6 #i‡
deföed
(
JSON_UNIT_TEST
Ë|| deföed(
JSON_DEBUG
)

7 
	#LIBJSON_OBJECT
(
«me
)\

8 
size_t
 & 
	`gëCt‹Cou¡î
(){\

9 
size_t
 
cou¡
 = 0;\

10 
i
 = 
JSONSèts
::
	`£tCÆlbacks
(
gëCt‹Cou¡î
, 
gëC›yCt‹Cou¡î
, 
gëAssignmítCou¡î
, 
gëDt‹Cou¡î
, #name);\

11  
cou¡
;\

13 
size_t
 & 
	`gëC›yCt‹Cou¡î
(){\

14 
size_t
 
cou¡
 = 0;\

15 
i
 = 
JSONSèts
::
	`£tCÆlbacks
(
gëCt‹Cou¡î
, 
gëC›yCt‹Cou¡î
, 
gëAssignmítCou¡î
, 
gëDt‹Cou¡î
, #name);\

16  
cou¡
;\

18 
size_t
 & 
	`gëAssignmítCou¡î
(){\

19 
size_t
 
cou¡
 = 0;\

20 
i
 = 
JSONSèts
::
	`£tCÆlbacks
(
gëCt‹Cou¡î
, 
gëC›yCt‹Cou¡î
, 
gëAssignmítCou¡î
, 
gëDt‹Cou¡î
, #name);\

21  
cou¡
;\

23 
size_t
 & 
	`gëDt‹Cou¡î
(){\

24 
size_t
 
cou¡
 = 0;\

25 
i
 = 
JSONSèts
::
	`£tCÆlbacks
(
gëCt‹Cou¡î
, 
gëC›yCt‹Cou¡î
, 
gëAssignmítCou¡î
, 
gëDt‹Cou¡î
, #name);\

26  
cou¡
;\

27 }

	)

28 
	#LIBJSON_CTOR
 
	`gëCt‹Cou¡î
(Ë+1

	)

29 
	#LIBJSON_COPY_CTOR
 
	`gëC›yCt‹Cou¡î
(Ë+1

	)

30 
	#LIBJSON_ASSIGNMENT
 
	`gëAssignmítCou¡î
(Ë+1

	)

31 
	#LIBJSON_DTOR
 
	`gëDt‹Cou¡î
(Ë+1

	)

33 
	~<m≠
>

34 
	~<s°ªam
>

35 
	~<io°ªam
>

36 
	~<°rög
>

37 ˛as†
	cJSONSèts
 {

38 
	mpublic
:

39 ~
	$JSONSèts
(){

40 
°d
::
m≠
<
gëCou¡î_m
, 
obje˘Såu˘uª
*> & 
mym≠
 = 
	`gëM≠≥r
();

41 
°d
::
m≠
<
gëCou¡î_m
, 
obje˘Såu˘uª
*>::
ôî©‹
 
b
 = 
mym≠
.
	`begö
();

42 
°d
::
m≠
<
gëCou¡î_m
, 
obje˘Såu˘uª
*>::
ôî©‹
 
e
 = 
mym≠
.
	`íd
();

43 
°d
::
cout
 << "Cou¡î†f‹Üibjs⁄:" << std::
ídl
;

44 ; 
b
 !
e
; ++b){

45 
°d
::
cout
 << " " << 
b
 -> 
£c⁄d
 -> 
_«me
 << std::
ídl
;

46 
°d
::
cout
 << " C⁄°ru˘‹: " << 
b
 -> 
£c⁄d
 -> 
	`_cT‹
(Ë<< std::
ídl
;

47 
°d
::
cout
 << " C›y C⁄°ru˘‹: " << 
b
 -> 
£c⁄d
 -> 
	`_ccT‹
(Ë<< std::
ídl
;

48 
°d
::
cout
 << " Assignmít: " << 
b
 -> 
£c⁄d
 -> 
	`_assign
(Ë<< std::
ídl
;

49 
°d
::
cout
 << " De°ru˘‹: " << 
b
 -> 
£c⁄d
 -> 
	`_dT‹
(Ë<< std::
ídl
;

50 
dñëe
 
b
 -> 
£c⁄d
;

54 
size_t
 & (*
	tgëCou¡î_m
)();

55 
	sobje˘Såu˘uª
 {

56 
	`obje˘Såu˘uª
(
gëCou¡î_m
 
cT‹
, gëCou¡î_m 
ccT‹
, gëCou¡î_m 
assign
, gëCou¡î_m 
dT‹
, c⁄° 
°d
::
°rög
 & 
«me
):

57 
	`_cT‹
(
cT‹
), 
	`_ccT‹
(
ccT‹
), 
	`_assign
(
assign
), 
	`_dT‹
(
dT‹
), 
	`_«me
(
«me
){}

58 
°d
::
°rög
 
_«me
;

59 
gëCou¡î_m
 
_cT‹
;

60 
gëCou¡î_m
 
_ccT‹
;

61 
gëCou¡î_m
 
_assign
;

62 
gëCou¡î_m
 
_dT‹
;

63 
	}
};

64 
£tCÆlbacks
(
gëCou¡î_m
 
cT‹
, gëCou¡î_m 
ccT‹
, gëCou¡î_m 
assign
, gëCou¡î_m 
dt‹
, c⁄° 
°d
::
°rög
 & 
«me
){

65 
gëM≠≥r
()[
cT‹
] = 
√w
 
obje˘Såu˘uª
 (cT‹, 
ccT‹
, 
assign
, 
dt‹
, 
«me
);

69 
	g°d
::
m≠
<
gëCou¡î_m
, 
	gobje˘Såu˘uª
*> & 
	$gëM≠≥r
() {

70 
°d
::
m≠
<
gëCou¡î_m
, 
obje˘Såu˘uª
*> 
mym≠
;

71  
mym≠
;

72 
	}
}

75 
	#LIBJSON_OBJECT
(
«me
)

	)

76 
	#LIBJSON_CTOR
 ()0

	)

77 
	#LIBJSON_DTOR
 ()0

	)

78 
	#LIBJSON_COPY_CTOR
 ()0

	)

79 
	#LIBJSON_ASSIGNMENT
 ()0

	)

80 
	tJSONSèts
;

	@libjson/_internal/Source/JSONStream.cpp

1 
	~"JSONSåóm.h
"

3 #ifde‡
JSON_STREAM


4 
	~"JSONW‹kî.h
"

5 
	~"JSONVÆid©‹.h
"

8 
	gJSONSåóm
::
	$JSONSåóm
(
js⁄_°ªam_ˇŒback_t
 
ˇŒ_p
, 
js⁄_°ªam_e_ˇŒback_t
 
ˇŒ_e
, * 
ˇŒbackIdítifõr
Ë
js⁄_nŸhrow
 : 
	`°©e
(
åue
), 
	`ˇŒ
(ˇŒ_p), 
	`îr_ˇŒ
(ˇŒ_e), 
	`buf„r
(), 
	$ˇŒback_idítifõr
(
ˇŒbackIdítifõr
) {

9 
LIBJSON_CTOR
;

10 
	}
}

12 
	gJSONSåóm
::
	$JSONSåóm
(c⁄° 
JSONSåóm
 & 
‹ig
Ë
js⁄_nŸhrow
 : 
	`°©e
(‹ig.
°©e
), 
	`ˇŒ
(‹ig.
ˇŒ
), 
	`îr_ˇŒ
(‹ig.
îr_ˇŒ
), 
	`buf„r
(‹ig.
buf„r
), 
	$ˇŒback_idítifõr
(
‹ig
.
ˇŒback_idítifõr
){

13 
LIBJSON_COPY_CTOR
;

14 
	}
}

16 
	gJSONSåóm
 & JSONSåóm::
›î©‹
 =(c⁄° 
JSONSåóm
 & 
‹ig
Ë
js⁄_nŸhrow
 {

17 
LIBJSON_ASSIGNMENT
;

18 
	gîr_ˇŒ
 = 
‹ig
.
îr_ˇŒ
;

19 
	gˇŒ
 = 
‹ig
.
ˇŒ
;

20 
	g°©e
 = 
‹ig
.
°©e
;

21 
	gbuf„r
 = 
‹ig
.
buf„r
;

22 
	gˇŒback_idítifõr
 = 
‹ig
.
ˇŒback_idítifõr
;

23  *
	gthis
;

26 #ifde‡
JSON_LIBRARY


27 
	gJSONSåóm
 & JSONSåóm::
›î©‹
 << (c⁄° 
js⁄_ch¨
 * 
°r
Ë
js⁄_nŸhrow
 {

29 
JSONSåóm
 & JSONSåóm::
›î©‹
 << (c⁄° 
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
 {

31 i‡(
°©e
){

32 
buf„r
 +
°r
;

33 
∑r£
();

35  *
	gthis
;

39 
	#QUOTECASE_STREAM
()\

40 
	`JSON_TEXT
('\"'):\

41 *(++
p
Ë!
	`JSON_TEXT
('\"')){\

42 i‡(
	`js⁄_u∆ikñy
(*
p
 =
	`JSON_TEXT
('\0'))Ë 
js⁄_°rög
::
≈os
;\

44 ;

	)

47 
	#NULLCASE_STREAM
()\

48 
	`JSON_TEXT
('\0'):\

49  
js⁄_°rög
::
≈os
;\

50 

	)

52 
	#BRACKET_STREAM
(
À·
, 
right
)\

53 
À·
: {\

54 
size_t
 
bøc
 = 1;\

55 
bøc
){\

56 *(++
p
)){\

57 
right
:\

58 --
bøc
;\

60 
À·
:\

61 ++
bøc
;\

63 
	`QUOTECASE_STREAM
()\

64 
	`NULLCASE_STREAM
()\

68 
right
:\

69  
js⁄_°rög
::
≈os
;

	)

71 #i‡(
JSON_READ_PRIORITY
 =
HIGH
Ë&& (!(
deföed
(
JSON_LESS_MEMORY
)))

72 
	#STREAM_FIND_NEXT_RELEVANT
(
ch
, 
vt
, 
po
Ë
FödNextRñev™t
<ch>(vt,Öo)

	)

73 
	gãm∂©e
<
js⁄_ch¨
 
	gch
>

74 
size_t
 
	gJSONSåóm
::
	$FödNextRñev™t
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 {

76 
	#STREAM_FIND_NEXT_RELEVANT
(
ch
, 
vt
, 
po
Ë
	`FödNextRñev™t
(ch, vt,Öo)

	)

77 
size_t
 
JSONSåóm
::
	$FödNextRñev™t
(
js⁄_ch¨
 
ch
, c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 {

79 c⁄° 
js⁄_ch¨
 * 
°¨t
 = 
vÆue_t
.
	`c_°r
();

80 c⁄° 
js⁄_ch¨
 * 
p
 = 
°¨t
 + 
pos
; *p; ++p){

81 i‡(
	`js⁄_u∆ikñy
(*
p
 =
ch
)ËÖ - 
°¨t
;

82 *
p
){

83 
	`BRACKET_STREAM
(
	`JSON_TEXT
('['), JSON_TEXT(']'))

84 
	`BRACKET_STREAM
(
	`JSON_TEXT
('{'), JSON_TEXT('}'))

85 
	`QUOTECASE_STREAM
()

88  
js⁄_°rög
::
≈os
;

89 
	}
}

91 
	gJSONSåóm
::
	$∑r£
(Ë
js⁄_nŸhrow
 {

92 #ifde‡
JSON_SECURITY_MAX_STREAM_OBJECTS


93 
size_t
 
obje˘s
 = 0;

96 
size_t
 
pos
 = 
buf„r
.
	`föd_fú°_of
(
	`JSON_TEXT
("{["));

97 i‡(
	`js⁄_likñy
(
pos
 !
js⁄_°rög
::
≈os
)){

98 
size_t
 
íd
 = (
buf„r
[
pos
] =
	`JSON_TEXT
('[')Ë? 
	`STREAM_FIND_NEXT_RELEVANT
(JSON_TEXT(']'), buffer,Öos + 1) : STREAM_FIND_NEXT_RELEVANT(JSON_TEXT('}'), buffer,Öos + 1);

99 i‡(
íd
 !
js⁄_°rög
::
≈os
){

100 #ifde‡
JSON_SECURITY_MAX_STREAM_OBJECTS


101 i‡(++
obje˘s
 > 
JSON_SECURITY_MAX_STREAM_OBJECTS
){

102 
	`JSON_FAIL
(
	`JSON_TEXT
("MaximumÇumber of json objects forá streamát once has beenÑeached"));

103 i‡(
îr_ˇŒ
Ë
	`îr_ˇŒ
(
	`gëIdítifõr
());

104 
°©e
 = 
Ál£
;

108 
START_MEM_SCOPE


109 
JSONNode
 
	`ãmp
(
JSONW‹kî
::
	`∑r£
(
buf„r
.
	`sub°r
(
pos
, 
íd
 -Öos + 1)));

110 #i‚de‡
JSON_LIBRARY


111 
	`ˇŒ
(
ãmp
, 
	`gëIdítifõr
());

113 
	`ˇŒ
(&
ãmp
, 
	`gëIdítifõr
());

115 
END_MEM_SCOPE


116 
js⁄_°rög
::
ôî©‹
 
begönög
 = 
buf„r
.
	`begö
();

117 
buf„r
.
	`îa£
(
begönög
, begönög + 
íd
);

120 #ifde‡
JSON_SAFE


123 #i‚de‡
JSON_VALIDATE


124 #îr‹ 
In
 
‹dî
 
to
 
u£
 
ß„
 
mode
 
™d
 
°ªams
, 
JSON_VALIDATE
 
√eds
Åÿ
be
 
deföed


127 
js⁄_auto
<
js⁄_ch¨
> 
s
;

128 
size_t
 
Àn
;

129 
s
.
	`£t
(
JSONW‹kî
::
	`RemoveWhôeS∑˚
(
	`js⁄_°rög
(
buf„r
.
	`c_°r
(Ë+ 
pos
), 
Àn
, 
Ál£
));

132 i‡(!
JSONVÆid©‹
::
	`isVÆidP¨tülRoŸ
(
s
.
±r
)){

133 i‡(
îr_ˇŒ
Ë
	`îr_ˇŒ
(
	`gëIdítifõr
());

134 
°©e
 = 
Ál£
;

141 
	}
}

	@libjson/_internal/Source/JSONStream.h

1 #i‚de‡
LIBJSON_GUARD_STREAM_H


2 
	#LIBJSON_GUARD_STREAM_H


	)

4 
	~"JSONDebug.h
"

6 #ifde‡
JSON_STREAM


8 #ifde‡
JSON_LESS_MEMORY


9 #ifde‡
__GNUC__


10 #¥agm®
∑ck
(
push
, 1)

11 #ñi‡
_MSC_VER


12 #¥agm®
∑ck
(
push
, 
JSONSåóm_∑ck
, 1)

16 #ifde‡
JSON_MEMORY_CALLBACKS


17 
	~"JSONMem‹y.h
"

20 #i‚de‡
JSON_LIBRARY


21 
˛ass
 
	gJSONNode
;

22 (*
	tjs⁄_°ªam_ˇŒback_t
)(
	tJSONNode
 &, *);

25 ˛as†
	cJSONSåóm
 {

26 
public
:

27 
	`LIBJSON_OBJECT
(
JSONSåóm
);

28 
	$JSONSåóm
(
js⁄_°ªam_ˇŒback_t
 
ˇŒ_p
, 
js⁄_°ªam_e_ˇŒback_t
 
ˇŒ_e
 = 
NULL
, * 
ˇŒbackIdítifõr
 = 
JSONSTREAM_SELF
Ë
js⁄_nŸhrow
;

29 
	$JSONSåóm
(c⁄° 
JSONSåóm
 & 
‹ig
Ë
js⁄_nŸhrow
;

30 
JSONSåóm
 & 
›î©‹
 =(c⁄° JSONSåóm & 
‹ig
Ë
js⁄_nŸhrow
;

31 ~
	$JSONSåóm
(Ë
js⁄_nŸhrow
 { 
LIBJSON_DTOR
; }

32 #ifde‡
JSON_LIBRARY


33 
JSONSåóm
 & 
›î©‹
 << (c⁄° 
js⁄_ch¨
 * 
°r
Ë
js⁄_nŸhrow
;

35 
JSONSåóm
 & 
›î©‹
 << (c⁄° 
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
;

38 
	$dñëeJSONSåóm
(
JSONSåóm
 * 
°ªam
Ë
js⁄_nŸhrow
 {

39 #ifde‡
JSON_MEMORY_CALLBACKS


40 
°ªam
 -> ~
	`JSONSåóm
();

41 
libjs⁄_‰ì
<
JSONSåóm
>(
°ªam
);

43 
dñëe
 
°ªam
;

45 
	}
}

47 
JSONSåóm
 * 
	$√wJSONSåóm
(
js⁄_°ªam_ˇŒback_t
 
ˇŒback
, 
js⁄_°ªam_e_ˇŒback_t
 
ˇŒ_e
, * 
ˇŒbackIdítifõr
Ë
js⁄_nŸhrow
 {

48 #ifde‡
JSON_MEMORY_CALLBACKS


49  
	`√w
(
js⁄_mÆloc
<
JSONSåóm
>(1)Ë
	`JSONSåóm
(
ˇŒback
, 
ˇŒ_e
, 
ˇŒbackIdítifõr
);

51  
√w
 
	`JSONSåóm
(
ˇŒback
, 
ˇŒ_e
, 
ˇŒbackIdítifõr
);

53 
	}
}

55 
ölöe
 
	$ª£t
(Ë
js⁄_nŸhrow
 {

56 
°©e
 = 
åue
;

57 
buf„r
.
	`˛ór
();

58 
	}
}

59 
JSON_PRIVATE


60 
ölöe
 * 
	$gëIdítifõr
(Ë
js⁄_nŸhrow
 {

61 i‡(
ˇŒback_idítifõr
 =
JSONSTREAM_SELF
){

62  (*)
this
;

64  
ˇŒback_idítifõr
;

65 
	}
}

67 #i‡(
JSON_READ_PRIORITY
 =
HIGH
Ë&& (!(
	$deföed
(
JSON_LESS_MEMORY
)))

68 
ãm∂©e
<
js⁄_ch¨
 
ch
>

69 
size_t
 
	$FödNextRñev™t
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

71 
size_t
 
	$FödNextRñev™t
(
js⁄_ch¨
 
ch
, c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

74 
	$∑r£
(Ë
js⁄_nŸhrow
;

75 
js⁄_°rög
 
buf„r
;

76 
js⁄_°ªam_ˇŒback_t
 
ˇŒ
;

77 
js⁄_°ªam_e_ˇŒback_t
 
îr_ˇŒ
;

78 * 
ˇŒback_idítifõr
;

79 
boﬁ
 
°©e
 
	`BITS
(1);

80 
	}
};

82 #ifde‡
JSON_LESS_MEMORY


83 #ifde‡
__GNUC__


84 #¥agm®
∑ck
(
p›
)

85 #ñi‡
_MSC_VER


86 #¥agm®
∑ck
(
p›
, 
JSONSåóm_∑ck
)

	@libjson/_internal/Source/JSONValidator.cpp

1 
	~"JSONVÆid©‹.h
"

3 #ifde‡
JSON_VALIDATE


5 
ölöe
 
boﬁ
 
	$isHex
(
js⁄_ch¨
 
c
Ë
js⁄_puª
;

6 
ölöe
 
boﬁ
 
	$isHex
(
js⁄_ch¨
 
c
Ë
js⁄_nŸhrow
 {

7  (((
c
 >
	`JSON_TEXT
('0')) && (c <= JSON_TEXT('9'))) ||

8 ((
c
 >
	`JSON_TEXT
('A')) && (c <= JSON_TEXT('F'))) ||

9 ((
c
 >
	`JSON_TEXT
('a')) && (c <= JSON_TEXT('f'))));

10 
	}
}

12 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidNumbî
(c⁄° 
js⁄_ch¨
 * & 
±r
Ë
js⁄_nŸhrow
 {

15 
boﬁ
 
decimÆ
 = 
Ál£
;

16 
boﬁ
 
scõ¡ific
 = 
Ál£
;

19 *
±r
){

20 #i‚de‡
JSON_STRICT


21 
	`JSON_TEXT
('.'):

22 
decimÆ
 = 
åue
;

24 
	`JSON_TEXT
('+'):

26 
	`JSON_TEXT
('-'):

27 #ifde‡
JSON_STRICT


28 *(
±r
 + 1)){

33  
Ál£
;

37 
	`JSON_TEXT
('1'):

38 
	`JSON_TEXT
('2'):

39 
	`JSON_TEXT
('3'):

40 
	`JSON_TEXT
('4'):

41 
	`JSON_TEXT
('5'):

42 
	`JSON_TEXT
('6'):

43 
	`JSON_TEXT
('7'):

44 
	`JSON_TEXT
('8'):

45 
	`JSON_TEXT
('9'):

47 
	`JSON_TEXT
('0'):

48 ++
±r
;

49 *
±r
){

50 
	`JSON_TEXT
('.'):

51 
decimÆ
 = 
åue
;

53 
	`JSON_TEXT
('e'):

54 
	`JSON_TEXT
('E'):

55 
scõ¡ific
 = 
åue
;

56 ++
±r
;

57 *
±r
){

58 
	`JSON_TEXT
('\0'):

59  
Ál£
;

60 
	`JSON_TEXT
('-'):

61 
	`JSON_TEXT
('+'):

62 
	`JSON_TEXT
('0'):

63 
	`JSON_TEXT
('1'):

64 
	`JSON_TEXT
('2'):

65 
	`JSON_TEXT
('3'):

66 
	`JSON_TEXT
('4'):

67 
	`JSON_TEXT
('5'):

68 
	`JSON_TEXT
('6'):

69 
	`JSON_TEXT
('7'):

70 
	`JSON_TEXT
('8'):

71 
	`JSON_TEXT
('9'):

74  
Ál£
;

77 #i‚de‡
JSON_STRICT


78 
	`JSON_TEXT
('x'):

79 
	`isHex
(*++
±r
)){};

80  
åue
;

81 #ifde‡
JSON_OCTAL


82 #ifde‡
__GNUC__


83 
	`JSON_TEXT
('0') ... JSON_TEXT('7'):

85 
	`JSON_TEXT
('0'):

86 
	`JSON_TEXT
('1'):

87 
	`JSON_TEXT
('2'):

88 
	`JSON_TEXT
('3'):

89 
	`JSON_TEXT
('4'):

90 
	`JSON_TEXT
('5'):

91 
	`JSON_TEXT
('6'):

92 
	`JSON_TEXT
('7'):

94 (*++
±r
 >
	`JSON_TEXT
('0')) && (*ptr <= JSON_TEXT('7'))){};

95  ((*
±r
 !
	`JSON_TEXT
('8')) && (*ptr != JSON_TEXT('9')));

96 
	`JSON_TEXT
('8'):

97 
	`JSON_TEXT
('9'):

100 #ifde‡
__GNUC__


101 
	`JSON_TEXT
('0') ... JSON_TEXT('9'):

103 
	`JSON_TEXT
('0'):

104 
	`JSON_TEXT
('1'):

105 
	`JSON_TEXT
('2'):

106 
	`JSON_TEXT
('3'):

107 
	`JSON_TEXT
('4'):

108 
	`JSON_TEXT
('5'):

109 
	`JSON_TEXT
('6'):

110 
	`JSON_TEXT
('7'):

111 
	`JSON_TEXT
('8'):

112 
	`JSON_TEXT
('9'):

117 #ifde‡
__GNUC__


118 
	`JSON_TEXT
('0') ... JSON_TEXT('9'):

120 
	`JSON_TEXT
('0'):

121 
	`JSON_TEXT
('1'):

122 
	`JSON_TEXT
('2'):

123 
	`JSON_TEXT
('3'):

124 
	`JSON_TEXT
('4'):

125 
	`JSON_TEXT
('5'):

126 
	`JSON_TEXT
('6'):

127 
	`JSON_TEXT
('7'):

128 
	`JSON_TEXT
('8'):

129 
	`JSON_TEXT
('9'):

134  
åue
;

138  
Ál£
;

140 ++
±r
;

143 
åue
){

144 *
±r
){

145 
	`JSON_TEXT
('.'):

146 i‡(
	`js⁄_u∆ikñy
(
decimÆ
)Ë 
Ál£
;

147 i‡(
	`js⁄_u∆ikñy
(
scõ¡ific
)Ë 
Ál£
;

148 
decimÆ
 = 
åue
;

150 
	`JSON_TEXT
('e'):

151 
	`JSON_TEXT
('E'):

152 i‡(
	`js⁄_likñy
(
scõ¡ific
)Ë 
Ál£
;

153 
scõ¡ific
 = 
åue
;

154 ++
±r
;

155 *
±r
){

156 
	`JSON_TEXT
('-'):

157 
	`JSON_TEXT
('+'):

158 #ifde‡
__GNUC__


159 
	`JSON_TEXT
('0') ... JSON_TEXT('9'):

161 
	`JSON_TEXT
('0'):

162 
	`JSON_TEXT
('1'):

163 
	`JSON_TEXT
('2'):

164 
	`JSON_TEXT
('3'):

165 
	`JSON_TEXT
('4'):

166 
	`JSON_TEXT
('5'):

167 
	`JSON_TEXT
('6'):

168 
	`JSON_TEXT
('7'):

169 
	`JSON_TEXT
('8'):

170 
	`JSON_TEXT
('9'):

174  
Ál£
;

177 #ifde‡
__GNUC__


178 
	`JSON_TEXT
('0') ... JSON_TEXT('9'):

180 
	`JSON_TEXT
('0'):

181 
	`JSON_TEXT
('1'):

182 
	`JSON_TEXT
('2'):

183 
	`JSON_TEXT
('3'):

184 
	`JSON_TEXT
('4'):

185 
	`JSON_TEXT
('5'):

186 
	`JSON_TEXT
('6'):

187 
	`JSON_TEXT
('7'):

188 
	`JSON_TEXT
('8'):

189 
	`JSON_TEXT
('9'):

193  
åue
;

195 ++
±r
;

197  
Ál£
;

198 
	}
}

200 #i‚de‡
JSON_STRICT


201 
	#LETTERCASE
(
x
, 
y
)\

202 
	`JSON_TEXT
(
x
):\

203 
	`JSON_TEXT
(
y
)

	)

204 
	#LETTERCHECK
(
x
, 
y
)\

205 i‡(
	`js⁄_u∆ikñy
((*++
±r
 !
	`JSON_TEXT
(
x
)Ë&& (*±∏!JSON_TEXT(
y
)))Ë 
Ál£


	)

207 
	#LETTERCASE
(
x
, 
y
)\

208 
	`JSON_TEXT
(
x
)

	)

209 
	#LETTERCHECK
(
x
, 
y
)\

210 i‡(
	`js⁄_u∆ikñy
(*++
±r
 !
	`JSON_TEXT
(
x
))Ë 
Ál£


	)

212 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidMembî
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 {

215 *
±r
){

216 
	`JSON_TEXT
('\"'):

217  
	`isVÆidSåög
(++
±r
);

218 
	`JSON_TEXT
('{'):

219 
	`INC_DEPTH
();

220  
	`isVÆidObje˘
(++
±r
 
	`DEPTH_ARG
(
dïth_∑øm
));

221 
	`JSON_TEXT
('['):

222 
	`INC_DEPTH
();

223  
	`isVÆidAºay
(++
±r
 
	`DEPTH_ARG
(
dïth_∑øm
));

224 
	`LETTERCASE
('t', 'T'):

225 
	`LETTERCHECK
('r', 'R');

226 
	`LETTERCHECK
('u', 'U');

227 
	`LETTERCHECK
('e', 'E');

228 ++
±r
;

229  
åue
;

230 
	`LETTERCASE
('f', 'F'):

231 
	`LETTERCHECK
('a', 'A');

232 
	`LETTERCHECK
('l', 'L');

233 
	`LETTERCHECK
('s', 'S');

234 
	`LETTERCHECK
('e', 'E');

235 ++
±r
;

236  
åue
;

237 
	`LETTERCASE
('n', 'N'):

238 
	`LETTERCHECK
('u', 'U');

239 
	`LETTERCHECK
('l', 'L');

240 
	`LETTERCHECK
('l', 'L');

241 ++
±r
;

242  
åue
;

243 #i‚de‡
JSON_STRICT


244 
	`JSON_TEXT
('}'):

245 
	`JSON_TEXT
(']'):

246 
	`JSON_TEXT
(','):

247  
åue
;

249 
	`JSON_TEXT
('\0'):

250  
Ál£
;

253  
	`isVÆidNumbî
(
±r
);

254 
	}
}

256 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidSåög
(c⁄° 
js⁄_ch¨
 * & 
±r
Ë
js⁄_nŸhrow
 {

259 
åue
){

260 *
±r
){

261 
	`JSON_TEXT
('\\'):

262 *(++
±r
)){

263 
	`JSON_TEXT
('\"'):

264 
	`JSON_TEXT
('\\'):

265 
	`JSON_TEXT
('/'):

266 
	`JSON_TEXT
('b'):

267 
	`JSON_TEXT
('f'):

268 
	`JSON_TEXT
('n'):

269 
	`JSON_TEXT
('r'):

270 
	`JSON_TEXT
('t'):

272 
	`JSON_TEXT
('u'):

273 i‡(
	`js⁄_u∆ikñy
(!
	`isHex
(*++
±r
))Ë 
Ál£
;

274 i‡(
	`js⁄_u∆ikñy
(!
	`isHex
(*++
±r
))Ë 
Ál£
;

276 #i‚de‡
JSON_STRICT


277 
	`JSON_TEXT
('x'):

279 i‡(
	`js⁄_u∆ikñy
(!
	`isHex
(*++
±r
))Ë 
Ál£
;

280 i‡(
	`js⁄_u∆ikñy
(!
	`isHex
(*++
±r
))Ë 
Ál£
;

282 #ifde‡
JSON_OCTAL


283 #ifde‡
__GNUC__


284 
	`JSON_TEXT
('0') ... JSON_TEXT('7'):

286 
	`JSON_TEXT
('0'):

287 
	`JSON_TEXT
('1'):

288 
	`JSON_TEXT
('2'):

289 
	`JSON_TEXT
('3'):

290 
	`JSON_TEXT
('4'):

291 
	`JSON_TEXT
('5'):

292 
	`JSON_TEXT
('6'):

293 
	`JSON_TEXT
('7'):

295 i‡(
	`js⁄_u∆ikñy
((*++
±r
 < 
	`JSON_TEXT
('0')Ë|| (*±∏> JSON_TEXT('7')))Ë 
Ál£
;

296 i‡(
	`js⁄_u∆ikñy
((*++
±r
 < 
	`JSON_TEXT
('0')Ë|| (*±∏> JSON_TEXT('7')))Ë 
Ál£
;

300  
Ál£
;

303 
	`JSON_TEXT
('\"'):

304 ++
±r
;

305  
åue
;

306 
	`JSON_TEXT
('\0'):

307  
Ál£
;

309 ++
±r
;

311  
Ál£
;

312 
	}
}

314 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidNamedObje˘
(c⁄° 
js⁄_ch¨
 * &
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 {

315 i‡(
	`js⁄_u∆ikñy
(!
	`isVÆidSåög
(++
±r
))Ë 
Ál£
;

316 i‡(
	`js⁄_u∆ikñy
(*
±r
++ !
	`JSON_TEXT
(':'))Ë 
Ál£
;

317 i‡(
	`js⁄_u∆ikñy
(!
	`isVÆidMembî
(
±r
 
	`DEPTH_ARG
(
dïth_∑øm
)))Ë 
Ál£
;

318 *
±r
){

319 
	`JSON_TEXT
(','):

320  
	`isVÆidNamedObje˘
(++
±r
 
	`DEPTH_ARG
(
dïth_∑øm
));

321 
	`JSON_TEXT
('}'):

322 ++
±r
;

323  
åue
;

325  
Ál£
;

327 
	}
}

329 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidObje˘
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 {

333 *
±r
){

334 
	`JSON_TEXT
('\"'):

335  
	`isVÆidNamedObje˘
(
±r
 
	`DEPTH_ARG
(
dïth_∑øm
));

336 
	`JSON_TEXT
('}'):

337 ++
±r
;

338  
åue
;

340  
Ál£
;

342 } *++
±r
);

343  
Ál£
;

344 
	}
}

346 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidAºay
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 {

350 *
±r
){

351 
	`JSON_TEXT
(']'):

352 ++
±r
;

353  
åue
;

355 i‡(
	`js⁄_u∆ikñy
(!
	`isVÆidMembî
(
±r
 
	`DEPTH_ARG
(
dïth_∑øm
)))Ë 
Ál£
;

356 *
±r
){

357 
	`JSON_TEXT
(','):

359 
	`JSON_TEXT
(']'):

360 ++
±r
;

361  
åue
;

363  
Ál£
;

367 } *++
±r
);

368  
Ál£
;

369 
	}
}

371 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidRoŸ
(c⁄° 
js⁄_ch¨
 * 
js⁄
Ë
js⁄_nŸhrow
 {

372 c⁄° 
js⁄_ch¨
 * 
±r
 = 
js⁄
;

373 *
±r
){

374 
	`JSON_TEXT
('{'):

375 i‡(
	`js⁄_likñy
(
	`isVÆidObje˘
(++
±r
 
	`DEPTH_ARG
(1)))){

376  *
±r
 =
	`JSON_TEXT
('\0');

378  
Ál£
;

379 
	`JSON_TEXT
('['):

380 i‡(
	`js⁄_likñy
(
	`isVÆidAºay
(++
±r
 
	`DEPTH_ARG
(1)))){

381  *
±r
 =
	`JSON_TEXT
('\0');

383  
Ál£
;

385  
Ál£
;

386 
	}
}

388 #ifde‡
JSON_STREAM


390 
boﬁ
 
	gJSONVÆid©‹
::
	$isVÆidP¨tülRoŸ
(c⁄° 
js⁄_ch¨
 * 
js⁄
Ë
js⁄_nŸhrow
 {

391 c⁄° 
js⁄_ch¨
 * 
±r
 = 
js⁄
;

392 *
±r
){

393 
	`JSON_TEXT
('{'):

394 
	`JSON_ASSERT_SAFE
(!
	`isVÆidObje˘
(++
±r
 
	`DEPTH_ARG
(1)), 
	`JSON_TEXT
("Partial Object seemsÅo be valid"), );

395  *
±r
 =
	`JSON_TEXT
('\0');

396 
	`JSON_TEXT
('['):

397 
	`JSON_ASSERT_SAFE
(!
	`isVÆidAºay
(++
±r
 
	`DEPTH_ARG
(1)), 
	`JSON_TEXT
("Partial Object seemsÅo be valid"), );

398  *
±r
 =
	`JSON_TEXT
('\0');

400  
Ál£
;

401 
	}
}

	@libjson/_internal/Source/JSONValidator.h

1 #i‚de‡
JSON_VALIDATOR_H


2 
	#JSON_VALIDATOR_H


	)

4 
	~"JSONDebug.h
"

6 #ifde‡
JSON_VALIDATE


8 #ifde‡
JSON_SECURITY_MAX_NEST_LEVEL


9 
	#DEPTH_PARAM
 ,
size_t
 
dïth_∑øm


	)

10 
	#DEPTH_ARG
(
¨g
Ë,
	)
arg

11 
	#INC_DEPTH
()\

12 i‡(++
dïth_∑øm
 > 
JSON_SECURITY_MAX_NEST_LEVEL
){\

13 
	`JSON_FAIL
(
	`JSON_TEXT
("Exceeded JSON_SECURITY_MAX_NEST_LEVEL"));\

14  
Ál£
;\

15 }

	)

17 
	#DEPTH_PARAM


	)

18 
	#DEPTH_ARG
(
¨g
)

	)

19 
	#INC_DEPTH
(Ë()0

	)

22 ˛as†
	cJSONVÆid©‹
 {

23 
	mpublic
:

24 
boﬁ
 
	$isVÆidNumbî
(c⁄° 
js⁄_ch¨
 * & 
±r
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

25 
boﬁ
 
	$isVÆidMembî
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

26 
boﬁ
 
	$isVÆidSåög
(c⁄° 
js⁄_ch¨
 * & 
±r
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

27 
boﬁ
 
	$isVÆidNamedObje˘
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

28 
boﬁ
 
	$isVÆidObje˘
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

29 
boﬁ
 
	$isVÆidAºay
(c⁄° 
js⁄_ch¨
 * & 
±r
 
DEPTH_PARAM
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

30 
boﬁ
 
	$isVÆidRoŸ
(c⁄° 
js⁄_ch¨
 * 
js⁄
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

31 #ifde‡
JSON_STREAM


32 
boﬁ
 
	$isVÆidP¨tülRoŸ
(c⁄° 
js⁄_ch¨
 * 
js⁄
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

34 
¥iv©e
:

35 
	`JSONVÆid©‹
();

	@libjson/_internal/Source/JSONWorker.cpp

1 
	~"JSONW‹kî.h
"

3 
boﬁ
 
	gu£d_ascii_⁄e
 = 
Ál£
;

4 
ölöe
 
js⁄_ch¨
 
	$ascii_⁄e
(Ë
js⁄_nŸhrow
 {

5 
u£d_ascii_⁄e
 = 
åue
;

6  
	`JSON_TEXT
('\1');

7 
	}
}

9 #ifde‡
JSON_READ_PRIORITY


11 
JSONNode
 
	gJSONW‹kî
::
	$∑r£
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
) {

12 
js⁄_auto
<
js⁄_ch¨
> 
s
;

13 
size_t
 
Àn
;

14 
s
.
	`£t
(
	`RemoveWhôeS∑˚
(
js⁄
, 
Àn
, 
åue
));

15  
	`_∑r£_unf‹m©ãd
(
s
.
±r
, s.±∏+ 
Àn
);

16 
	}
}

18 
JSONNode
 
	gJSONW‹kî
::
	$∑r£_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
) {

19 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


20 #i‚de‡
JSON_NO_EXCEPTIONS


21 
	`JSON_ASSERT_SAFE
((
js⁄
[0] =
	`JSON_TEXT
('{')Ë|| (js⁄[0] =JSON_TEXT('[')), JSON_TEXT("NŸ JSON!"), 
throw
 
°d
::
	`övÆid_¨gumít
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
)););

23 
	`JSON_ASSERT_SAFE
((
js⁄
[0] =
	`JSON_TEXT
('{')Ë|| (js⁄[0] =JSON_TEXT('[')), JSON_TEXT("NŸ JSON!"),  
	`JSONNode
(
JSON_NULL
););

26  
	`_∑r£_unf‹m©ãd
(
js⁄
.
	`d©a
(), js⁄.d©a(Ë+ js⁄.
	`Àngth
());

27 
	}
}

29 
JSONNode
 
	gJSONW‹kî
::
	$_∑r£_unf‹m©ãd
(c⁄° 
js⁄_ch¨
 * 
js⁄
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
) {

30 #ifde‡
JSON_COMMENTS


31 
js⁄_ch¨
 
fú°ch¨
 = *
js⁄
;

32 
js⁄_°rög
 
_commít
;

33 
js⁄_ch¨
 * 
ru¬î
 = (js⁄_ch¨*)
js⁄
;

34 i‡(
	`js⁄_u∆ikñy
(
fú°ch¨
 =
JSON_TEMP_COMMENT_IDENTIFIER
)){

35 
√wcommít
:

36 *(++
ru¬î
Ë!
JSON_TEMP_COMMENT_IDENTIFIER
){

37 
	`JSON_ASSERT
(
ru¬î
 !
íd
, 
	`JSON_TEXT
("Removing white space failed"));

38 
_commít
 +*
ru¬î
;

40 
fú°ch¨
 = *(++
ru¬î
);

41 i‡(
	`js⁄_u∆ikñy
(
fú°ch¨
 =
JSON_TEMP_COMMENT_IDENTIFIER
)){

42 
_commít
 +
	`JSON_TEXT
('\n');

43 
√wcommít
;

47 c⁄° 
js⁄_ch¨
 
fú°ch¨
 = *
js⁄
;

50 
fú°ch¨
){

51 
	`JSON_TEXT
('{'):

52 
	`JSON_TEXT
('['):

53 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


54 i‡(
fú°ch¨
 =
	`JSON_TEXT
('[')){

55 i‡(
	`js⁄_u∆ikñy
(*(
íd
 - 1Ë!
	`JSON_TEXT
(']'))){

56 
	`JSON_FAIL
(
	`JSON_TEXT
("Missing final ]"));

60 i‡(
	`js⁄_u∆ikñy
(*(
íd
 - 1Ë!
	`JSON_TEXT
('}'))){

61 
	`JSON_FAIL
(
	`JSON_TEXT
("Missing final }"));

66 #ifde‡
JSON_COMMENTS


67 
JSONNode
 
	`foo
(
	`js⁄_°rög
(
ru¬î
, 
íd
 -Ñunner));

68 
foo
.
	`£t_commít
(
_commít
);

69  
	`JSONNode
(
åue
, 
foo
);

71  
	`JSONNode
(
	`js⁄_°rög
(
js⁄
, 
íd
 - json));

75 
	`JSON_FAIL
(
	`JSON_TEXT
("Not JSON!"));

76 #i‚de‡
JSON_NO_EXCEPTIONS


77 
throw
 
°d
::
	`övÆid_¨gumít
(
	`js⁄_globÆ
(
EMPTY_STD_STRING
));

79  
	`JSONNode
(
JSON_NULL
);

81 
	}
}

84 
	#QUOTECASE
()\

85 
	`JSON_TEXT
('\"'):\

86 *(++
p
Ë!
	`JSON_TEXT
('\"')){\

87 
	`JSON_ASSERT_SAFE
(*
p
, 
	`JSON_TEXT
("NuŒÅîmö©‹ insidêo‡®quŸ©i⁄"),  
js⁄_°rög
::
≈os
;);\

89 ;

	)

91 #i‡
deföed
(
JSON_DEBUG
Ë|| deföed(
JSON_SAFE
)

92 
	#NULLCASE
(
îr‹
)\

93 
	`JSON_TEXT
('\0'):\

94 
	`JSON_FAIL_SAFE
(
îr‹
,  
js⁄_°rög
::
≈os
;);\

95 ;

	)

97 
	#NULLCASE
(
îr‹
)

	)

100 
	#BRACKET
(
À·
, 
right
)\

101 
À·
: {\

102 
size_t
 
bøc
 = 1;\

103 
bøc
){\

104 *(++
p
)){\

105 
right
:\

106 --
bøc
;\

108 
À·
:\

109 ++
bøc
;\

111 
	`QUOTECASE
()\

112 
	`NULLCASE
(
	`JSON_TEXT
("NullÅerminator inside ofá bracket"))\

116 
right
:\

117  
js⁄_°rög
::
≈os
;

	)

121 #i‡
deföed
(
JSON_READ_PRIORITY
Ë|| deföed(
JSON_STREAM
)

122 #i‡(
JSON_READ_PRIORITY
 =
HIGH
Ë&& (!(
deföed
(
JSON_LESS_MEMORY
)))

123 
	#FIND_NEXT_RELEVANT
(
ch
, 
vt
, 
po
Ë
JSONW‹kî
::
FödNextRñev™t
<ch>(vt,Öo)

	)

124 
	gãm∂©e
<
js⁄_ch¨
 
	gch
>

125 
size_t
 
	gJSONW‹kî
::
	$FödNextRñev™t
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 {

127 
	#FIND_NEXT_RELEVANT
(
ch
, 
vt
, 
po
Ë
JSONW‹kî
::
	`FödNextRñev™t
(ch, vt,Öo)

	)

128 
size_t
 
JSONW‹kî
::
	$FödNextRñev™t
(
js⁄_ch¨
 
ch
, c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 {

130 
js⁄_°rög
::
c⁄°_ôî©‹
 
°¨t
 = 
vÆue_t
.
	`begö
();

131 
js⁄_°rög
::
c⁄°_ôî©‹
 
e
 = 
vÆue_t
.
	`íd
();

132 
js⁄_°rög
::
c⁄°_ôî©‹
 
p
 = 
vÆue_t
.
	`begö
(Ë+ 
pos
;Ö !
e
; ++p){

133 i‡(
	`js⁄_u∆ikñy
(*
p
 =
ch
)ËÖ - 
°¨t
;

134 *
p
){

135 
	`BRACKET
(
	`JSON_TEXT
('['), JSON_TEXT(']'))

136 
	`BRACKET
(
	`JSON_TEXT
('{'), JSON_TEXT('}'))

137 
	`QUOTECASE
()

140  
js⁄_°rög
::
≈os
;

141 
	}
}

144 #ifde‡
JSON_COMMENTS


145 
	#COMMENT_DELIMITER
(Ë*
ru¬î
++ = 
JSON_TEMP_COMMENT_IDENTIFIER


	)

146 
	#AND_RUNNER
 ,
ru¬î


	)

147 
ölöe
 
	$SögÀLöeCommít
(c⁄° 
js⁄_ch¨
 * & 
p
, c⁄° js⁄_ch¨ * c⁄° 
íd
, js⁄_ch¨ * & 
ru¬î
Ë
js⁄_nŸhrow
 {

149 
	`COMMENT_DELIMITER
();

150 (++
p
 !
íd
Ë&& (*∞!
	`JSON_TEXT
('\n'))){

151 *
ru¬î
++ = *
p
;

153 
	`COMMENT_DELIMITER
();

154 
	}
}

156 
	#COMMENT_DELIMITER
(Ë()0

	)

157 
	#AND_RUNNER


	)

160 #i‚de‡
JSON_STRICT


161 
ölöe
 
	$SögÀLöeCommít
(c⁄° 
js⁄_ch¨
 * & 
p
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
 {

162 (++
p
 !
íd
Ë&& (*∞!
	`JSON_TEXT
('\n')));

163 
	}
}

166 #i‡
deföed
(
JSON_LESS_MEMORY
Ë&& deföed(
JSON_READ_PRIORITY
)

167 
	#PRIVATE_REMOVEWHITESPACE
(
T
, 
vÆue_t
, 
esˇ≥QuŸes
, 
Àn
Ë
	`¥iv©e_RemoveWhôeS∑˚
(T, vÆue_t,Ésˇ≥QuŸes,Üí)

	)

168 
js⁄_ch¨
 * 
	$¥iv©e_RemoveWhôeS∑˚
(
boﬁ
 
T
, c⁄° 
js⁄_°rög
 & 
vÆue_t
, boﬁ 
esˇ≥QuŸes
, 
size_t
 & 
Àn
Ë
js⁄_nŸhrow
 {

170 
	#PRIVATE_REMOVEWHITESPACE
(
T
, 
vÆue_t
, 
esˇ≥QuŸes
, 
Àn
Ë
¥iv©e_RemoveWhôeS∑˚
<T>(vÆue_t,Ésˇ≥QuŸes,Üí)

	)

171 
ãm∂©e
<
boﬁ
 
T
>

172 
js⁄_ch¨
 * 
	$¥iv©e_RemoveWhôeS∑˚
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
esˇ≥QuŸes
, 
size_t
 & 
Àn
Ë
js⁄_nŸhrow
 {

174 
js⁄_ch¨
 * 
ªsu…
;

175 
js⁄_ch¨
 * 
ru¬î
 = 
ªsu…
 = 
js⁄_mÆloc
<js⁄_ch¨>(
vÆue_t
.
	`Àngth
() + 1);

176 
	`JSON_ASSERT
(
ªsu…
 !0, 
	`js⁄_globÆ
(
ERROR_OUT_OF_MEMORY
));

177 c⁄° 
js⁄_ch¨
 * c⁄° 
íd
 = 
vÆue_t
.
	`d©a
(Ë+ vÆue_t.
	`Àngth
();

178 c⁄° 
js⁄_ch¨
 * 
p
 = 
vÆue_t
.
	`d©a
();Ö !
íd
; ++p){

179 *
p
){

180 
	`JSON_TEXT
(' '):

181 
	`JSON_TEXT
('\t'):

182 
	`JSON_TEXT
('\n'):

183 
	`JSON_TEXT
('\r'):

185 #i‚de‡
JSON_STRICT


186 
	`JSON_TEXT
('/'):

187 i‡(*(++
p
Ë=
	`JSON_TEXT
('*')){

188 i‡(
T
Ë
	`COMMENT_DELIMITER
();

189 (*(++
p
Ë!
	`JSON_TEXT
('*')) || (*(p + 1) != JSON_TEXT('/'))){

190 if(
p
 =
íd
){

191 
	`COMMENT_DELIMITER
();

192 
ído‰u¬î
;

194 i‡(
T
Ë*
ru¬î
++ = *
p
;

196 ++
p
;

197 i‡(
T
Ë
	`COMMENT_DELIMITER
();

201 
	`JSON_ASSERT_SAFE
(*
p
 =
	`JSON_TEXT
('/'), JSON_TEXT("°øy / ch¨a˘î,ÇŸ quŸed, o∏®commít"), 
ído‰u¬î
;);

202 
	`JSON_TEXT
('#'):

203 i‡(
T
){

204 
	`SögÀLöeCommít
(
p
, 
íd
 
AND_RUNNER
);

206 
	`SögÀLöeCommít
(
p
, 
íd
);

210 
	`JSON_TEXT
('\"'):

211 *
ru¬î
++ = 
	`JSON_TEXT
('\"');

212 *(++
p
Ë!
	`JSON_TEXT
('\"')){

213 if(
p
 =
íd
Ë
ído‰u¬î
;

214 *
p
){

215 
	`JSON_TEXT
('\\'):

216 *
ru¬î
++ = 
	`JSON_TEXT
('\\');

217 i‡(
esˇ≥QuŸes
){

218 *
ru¬î
++ = (*++
p
 =
	`JSON_TEXT
('\"')Ë? 
	`ascii_⁄e
() : *p;

220 *
ru¬î
++ = *++
p
;

224 *
ru¬î
++ = *
p
;

230 
	`JSON_ASSERT_SAFE
((
js⁄_uch¨
)*
p
 >32, 
	`JSON_TEXT
("InvÆid JSON ch¨a˘î dëe˘ed (lo)"), 
ído‰u¬î
;);

231 
	`JSON_ASSERT_SAFE
((
js⁄_uch¨
)*
p
 <126, 
	`JSON_TEXT
("InvÆid JSON ch¨a˘î dëe˘ed (hi)"), 
ído‰u¬î
;);

232 *
ru¬î
++ = *
p
;

236 
ído‰u¬î
:

237 
Àn
 = 
ru¬î
 - 
ªsu…
;

238  
ªsu…
;

239 
	}
}

241 #ifde‡
JSON_READ_PRIORITY


242 
js⁄_ch¨
 * 
	gJSONW‹kî
::
	$RemoveWhôeS∑˚
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
size_t
 & 
Àn
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 {

243 
js⁄_ch¨
 * 
ªsu…
 = 
	`PRIVATE_REMOVEWHITESPACE
(
åue
, 
vÆue_t
, 
esˇ≥QuŸes
, 
Àn
);

244 
ªsu…
[
Àn
] = 
	`JSON_TEXT
('\0');

245  
ªsu…
;

246 
	}
}

249 
js⁄_ch¨
 * 
	gJSONW‹kî
::
	$RemoveWhôeS∑˚AndCommítsC
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 {

250 
size_t
 
Àn
;

251 
js⁄_ch¨
 * 
ªsu…
 = 
	`PRIVATE_REMOVEWHITESPACE
(
Ál£
, 
vÆue_t
, 
esˇ≥QuŸes
, 
Àn
);

252 
ªsu…
[
Àn
] = 
	`JSON_TEXT
('\0');

253  
ªsu…
;

254 
	}
}

256 
js⁄_°rög
 
	gJSONW‹kî
::
	$RemoveWhôeS∑˚AndCommíts
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 {

257 
js⁄_auto
<
js⁄_ch¨
> 
s
;

258 
size_t
 
Àn
;

259 
s
.
	`£t
(
	`PRIVATE_REMOVEWHITESPACE
(
Ál£
, 
vÆue_t
, 
esˇ≥QuŸes
, 
Àn
));

260  
	`js⁄_°rög
(
s
.
±r
, 
Àn
);

261 
	}
}

263 #ifde‡
JSON_READ_PRIORITY


268 #ifde‡
JSON_UNICODE


269 
ölöe
 
js⁄_uch¨
 
	$Suºog©ePaú
(c⁄° 
js⁄_uch¨
 
hi
, c⁄° js⁄_uch¨ 
lo
Ë
js⁄_puª
;

270 
ölöe
 
js⁄_uch¨
 
	$Suºog©ePaú
(c⁄° 
js⁄_uch¨
 
hi
, c⁄° js⁄_uch¨ 
lo
Ë
js⁄_nŸhrow
 {

271 
	`JSON_ASSERT
((Ë=4, 
	`JSON_TEXT
("size of unsigned int isÇot 32-bit"));

272 
	`JSON_ASSERT
((
js⁄_uch¨
Ë=4, 
	`JSON_TEXT
("size of json_char isÇot 32-bit"));

273  (((
hi
 << 10Ë& 0x1FFC00Ë+ 0x10000Ë| 
lo
 & 0x3FF;

274 
	}
}

276 
	gJSONW‹kî
::
	$UTF
(c⁄° 
js⁄_ch¨
 * & 
pos
, 
js⁄_°rög
 & 
ªsu…
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
 {

277 
	`JSON_ASSERT_SAFE
((()
íd
 - ()
pos
Ë> 4, 
	`JSON_TEXT
("UTF will go out of bounds"), ;);

278 
js⁄_uch¨
 
fú°
 = 
	`UTF8
(
pos
, 
íd
);

279 i‡(
	`js⁄_u∆ikñy
((
fú°
 > 0xD800) && (first < 0xDBFF) &&

280 (*(
pos
 + 1) == '\\') && (*(pos + 2) == 'u'))){

281 c⁄° 
js⁄_ch¨
 * 
‹igöÆ_pos
 = 
pos
;

282 
pos
 += 2;

283 
js⁄_uch¨
 
£c⁄d
 = 
	`UTF8
(
pos
, 
íd
);

285 i‡(
	`js⁄_u∆ikñy
((
£c⁄d
 > 0xDC00) && (second < 0xDFFF))){

286 
ªsu…
 +
	`Suºog©ePaú
(
fú°
, 
£c⁄d
);

288 
pos
 = 
‹igöÆ_pos
;

291 
ªsu…
 +
fú°
;

293 
	}
}

296 
js⁄_uch¨
 
	gJSONW‹kî
::
	$UTF8
(c⁄° 
js⁄_ch¨
 * & 
pos
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
 {

297 
	`JSON_ASSERT_SAFE
((()
íd
 - ()
pos
Ë> 4, 
	`JSON_TEXT
("UTF will go out of bounds"),  JSON_TEXT('\0'););

298 #ifde‡
JSON_UNICODE


299 ++
pos
;

300 
js⁄_uch¨
 
ãmp
 = 
	`Hex
(
pos
) << 8;

301 ++
pos
;

302  
ãmp
 | 
	`Hex
(
pos
);

304 
	`JSON_ASSERT
(*(
pos
 + 1Ë=
	`JSON_TEXT
('0'), JSON_TEXT("wide utf character (hihi)"));

305 
	`JSON_ASSERT
(*(
pos
 + 2Ë=
	`JSON_TEXT
('0'), JSON_TEXT("wide utf character (hilo)"));

306 
pos
 += 3;

307  
	`Hex
(
pos
);

309 
	}
}

312 
js⁄_ch¨
 
	gJSONW‹kî
::
	$Hex
(c⁄° 
js⁄_ch¨
 * & 
pos
Ë
js⁄_nŸhrow
 {

321 
js⁄_uch¨
 
hi
 = *
pos
++ - 48;

322 i‡(
hi
 > 48){

323 
hi
 -= 39;

324 } i‡(
hi
 > 9){

325 
hi
 -= 7;

328 
js⁄_uch¨
 
lo
 = *
pos
 - 48;

329 i‡(
lo
 > 48){

330 
lo
 -= 39;

331 } i‡(
lo
 > 9){

332 
lo
 -= 7;

335  (
js⁄_ch¨
)((
hi
 << 4Ë| 
lo
);

336 
	}
}

338 #i‚de‡
JSON_STRICT


339 
ölöe
 
js⁄_ch¨
 
	$FromO˘Æ
(c⁄° 
js⁄_ch¨
 * & 
°r
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
 {

340 
	`JSON_ASSERT_SAFE
((()
íd
 - ()
°r
Ë> 3, 
	`JSON_TEXT
("Octal will go out of bounds"),  JSON_TEXT('\0'););

341 
°r
 += 2;

342  (
js⁄_ch¨
)(((((
js⁄_uch¨
)(*(
°r
 - 2) - 48))) << 6) | (((json_uchar)(*(str - 1) - 48)) << 3) | ((json_uchar)(*str - 48)));

343 
	}
}

346 
	gJSONW‹kî
::
	$S≥cülCh¨
(c⁄° 
js⁄_ch¨
 * & 
pos
, c⁄° js⁄_ch¨ * c⁄° 
íd
, 
js⁄_°rög
 & 
ªs
Ë
js⁄_nŸhrow
 {

347 
	`JSON_ASSERT_SAFE
(
pos
 !
íd
, 
	`JSON_TEXT
("Special charÅermantion"), ;);

352 *
pos
){

353 
	`JSON_TEXT
('\1'):

354 
ªs
 +
	`JSON_TEXT
('\"');

356 
	`JSON_TEXT
('t'):

357 
ªs
 +
	`JSON_TEXT
('\t');

359 
	`JSON_TEXT
('n'):

360 
ªs
 +
	`JSON_TEXT
('\n');

362 
	`JSON_TEXT
('r'):

363 
ªs
 +
	`JSON_TEXT
('\r');

365 
	`JSON_TEXT
('\\'):

366 
ªs
 +
	`JSON_TEXT
('\\');

368 
	`JSON_TEXT
('/'):

369 
ªs
 +
	`JSON_TEXT
('/');

371 
	`JSON_TEXT
('b'):

372 
ªs
 +
	`JSON_TEXT
('\b');

374 
	`JSON_TEXT
('f'):

375 
ªs
 +
	`JSON_TEXT
('\f');

377 
	`JSON_TEXT
('v'):

378 
ªs
 +
	`JSON_TEXT
('\v');

380 
	`JSON_TEXT
('u'):

381 #ifde‡
JSON_UNICODE


382 
	`UTF
(
pos
, 
ªs
, 
íd
);

384 
ªs
 +
	`UTF8
(
pos
, 
íd
);

387 #i‚de‡
JSON_STRICT


388 
	`JSON_TEXT
('x'):

389 
	`JSON_ASSERT_SAFE
((()
íd
 - ()
pos
Ë> 3, 
	`JSON_TEXT
("Hex wû»gÿouào‡bounds"), 
ªs
 += JSON_TEXT('\0'); ;);

390 
ªs
 +
	`Hex
(++
pos
);

393 #ifde‡
__GNUC__


394 
	`JSON_TEXT
('0') ... JSON_TEXT('7'):

397 
	`JSON_TEXT
('0'):

398 
	`JSON_TEXT
('1'):

399 
	`JSON_TEXT
('2'):

400 
	`JSON_TEXT
('3'):

401 
	`JSON_TEXT
('4'):

402 
	`JSON_TEXT
('5'):

403 
	`JSON_TEXT
('6'):

404 
	`JSON_TEXT
('7'):

406 
ªs
 +
	`FromO˘Æ
(
pos
, 
íd
);

409 
ªs
 +*
pos
;

411 #ñi‡
	`deföed
(
JSON_DEBUG
)

413 
	`JSON_FAIL
(
	`JSON_TEXT
("UnsupportedÉscaped character"));

417 
	}
}

419 #ifde‡
JSON_LESS_MEMORY


420 
ölöe
 
	$doÊag
(c⁄° 
öã∫ÆJSONNode
 * 
Êag
, 
boﬁ
 
which
, boﬁ 
x
Ë
js⁄_nŸhrow
 {

421 i‡(
	`js⁄_likñy
(
which
)){

422 
Êag
 -> 
_«me_ícoded
 = 
x
;

424 
Êag
 -> 
_°rög_ícoded
 = 
x
;

426 
	}
}

428 
js⁄_°rög
 
	gJSONW‹kî
::
	$FixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
öã∫ÆJSONNode
 * 
Êag
, 
boﬁ
 
which
Ë
js⁄_nŸhrow
 {

429 
	#£tÊag
(
x
Ë
	`doÊag
(
Êag
, 
which
, x)

	)

431 
js⁄_°rög
 
JSONW‹kî
::
	$FixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 & 
Êag
Ë
js⁄_nŸhrow
 {

432 
	#£tÊag
(
x
Ë
Êag
 = 
	)
x

436 
	`£tÊag
(
Ál£
);

437 
js⁄_°rög
 
ªs
;

438 
ªs
.
	`ª£rve
(
vÆue_t
.
	`Àngth
());

439 c⁄° 
js⁄_ch¨
 * c⁄° 
íd
 = 
vÆue_t
.
	`d©a
(Ë+ vÆue_t.
	`Àngth
();

440 c⁄° 
js⁄_ch¨
 * 
p
 = 
vÆue_t
.
	`d©a
();Ö !
íd
; ++p){

441 *
p
){

442 
	`JSON_TEXT
('\\'):

443 
	`£tÊag
(
åue
);

444 
	`S≥cülCh¨
(++
p
, 
íd
, 
ªs
);

447 
ªs
 +*
p
;

451 
	`shrökSåög
(
ªs
);

452  
ªs
;

453 
	}
}

456 #ifde‡
JSON_UNICODE


457 #ifde‡
JSON_ESCAPE_WRITES


458 
js⁄_°rög
 
	gJSONW‹kî
::
	$toSuºog©ePaú
(
js⁄_uch¨
 
C
Ë
js⁄_nŸhrow
 {

459 
	`JSON_ASSERT
((Ë=4, 
	`JSON_TEXT
("size of unsigned int isÇot 32-bit"));

460 
	`JSON_ASSERT
((Ë=2, 
	`JSON_TEXT
("size of unsigned short isÇot 16-bit"));

461 
	`JSON_ASSERT
((
js⁄_uch¨
Ë=4, 
	`JSON_TEXT
("json_char isÇot 32-bit"));

464 
HiSuºog©e
 = 0xD800 | ((()(()((
C
 >> 16) & 31)) - 1) << 6) | (()C) >> 10;

467 
LoSuºog©e
 = (Ë(0xDC00 | (()
C
 & 1023));

469 
js⁄_°rög
 
ªs
;

470 
ªs
 +
	`toUTF8
(
HiSuºog©e
);

471 
ªs
 +
	`toUTF8
(
LoSuºog©e
);

472  
ªs
;

473 
	}
}

477 #ifde‡
JSON_ESCAPE_WRITES


478 
js⁄_°rög
 
	gJSONW‹kî
::
	$toUTF8
(
js⁄_uch¨
 
p
Ë
js⁄_nŸhrow
 {

479 #ifde‡
JSON_UNICODE


480 i‡(
	`js⁄_u∆ikñy
(
p
 > 0xFFFF)Ë 
	`toSuºog©ePaú
(p);

482 
js⁄_°rög
 
	`ªs
(
	`JSON_TEXT
("\\u"));

483 #ifde‡
JSON_UNICODE


484 
START_MEM_SCOPE


485 
js⁄_uch¨
 
hihi
 = ((
p
 & 0xF000) >> 12) + 48;

486 i‡(
hihi
 > 57) hihi += 7;

487 
js⁄_uch¨
 
hûo
 = ((
p
 & 0x0F00) >> 8) + 48;

488 i‡(
hûo
 > 57) hilo += 7;

489 
ªs
 +
hihi
;

490 
ªs
 +
hûo
;

491 
END_MEM_SCOPE


492 
js⁄_uch¨
 
hi
 = ((
p
 & 0x00F0) >> 4) + 48;

494 
ªs
 +
	`JSON_TEXT
("00");

495 
js⁄_uch¨
 
hi
 = (
p
 >> 4) + 48;

498 i‡(
hi
 > 57) hi += 7;

499 
js⁄_uch¨
 
lo
 = (
p
 & 0x000F) + 48;

500 i‡(
lo
 > 57)Üo += 7;

501 
ªs
 +
hi
;

502 
ªs
 +
lo
;

503  
ªs
;

504 
	}
}

507 
	gJSONW‹kî
::
	$UnfixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
Êag
, js⁄_°rög & 
ªs
Ë
js⁄_nŸhrow
 {

508 i‡(!
Êag
){

509 
ªs
 +
vÆue_t
;

513 c⁄° 
js⁄_ch¨
 * c⁄° 
íd
 = 
vÆue_t
.
	`d©a
(Ë+ vÆue_t.
	`Àngth
();

514 c⁄° 
js⁄_ch¨
 * 
p
 = 
vÆue_t
.
	`d©a
();Ö !
íd
; ++p){

515 *
p
){

516 
	`JSON_TEXT
('\"'):

517 
ªs
 +
	`JSON_TEXT
("\\\"");

519 
	`JSON_TEXT
('\\'):

520 
ªs
 +
	`JSON_TEXT
("\\\\");

522 #ifde‡
JSON_ESCAPE_WRITES


523 
	`JSON_TEXT
('\t'):

524 
ªs
 +
	`JSON_TEXT
("\\t");

526 
	`JSON_TEXT
('\n'):

527 
ªs
 +
	`JSON_TEXT
("\\n");

529 
	`JSON_TEXT
('\r'):

530 
ªs
 +
	`JSON_TEXT
("\\r");

532 
	`JSON_TEXT
('/'):

533 
ªs
 +
	`JSON_TEXT
("\\/");

535 
	`JSON_TEXT
('\b'):

536 
ªs
 +
	`JSON_TEXT
("\\b");

538 
	`JSON_TEXT
('\f'):

539 
ªs
 +
	`JSON_TEXT
("\\f");

543 i‡(
	`js⁄_u∆ikñy
(((
js⁄_uch¨
)(*
p
) < 32) || ((json_uchar)(*p) > 126))){

544 
ªs
 +
	`toUTF8
((
js⁄_uch¨
)(*
p
));

546 
ªs
 +*
p
;

552 
ªs
 +*
p
;

557 
	}
}

559 #ifde‡
JSON_READ_PRIORITY


561 #ifde‡
JSON_COMMENTS


562 
	#ARRAY_PARAM
 
boﬁ
 
¨øy


563 #ñ£

	)

564 
	#ARRAY_PARAM
 
boﬁ


	)

566 
ölöe
 
	gJSONW‹kî
::
	$NewNode
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
«me
, c⁄° js⁄_°rög & 
vÆue
, 
ARRAY_PARAM
Ë
js⁄_nŸhrow
 {

567 #ifde‡
JSON_COMMENTS


568 
JSONNode
 * 
chûd
;

569 
START_MEM_SCOPE


570 
js⁄_°rög
 
_commít
;

571 
START_MEM_SCOPE


572 c⁄° 
js⁄_ch¨
 * 
ru¬î
 = ((
¨øy
Ë? 
vÆue
.
	`d©a
(Ë: 
«me
.data());

573 #ifde‡
JSON_DEBUG


574 c⁄° 
js⁄_ch¨
 * c⁄° 
íd
 = 
ru¬î
 + 
vÆue
.
	`Àngth
();

576 i‡(
	`js⁄_u∆ikñy
(*
ru¬î
 =
JSON_TEMP_COMMENT_IDENTIFIER
)){

577 
size_t
 
cou¡
;

578 c⁄° 
js⁄_ch¨
 * 
°¨t
;

579 
√wcommít
:

580 
cou¡
 = 0;

581 
°¨t
 = 
ru¬î
 + 1;

582 *(++
ru¬î
Ë!
JSON_TEMP_COMMENT_IDENTIFIER
){

583 
	`JSON_ASSERT
(
ru¬î
 !
íd
, 
	`JSON_TEXT
("Removing white space failed"));

584 ++
cou¡
;

586 i‡(
cou¡
Ë
_commít
 +
	`js⁄_°rög
(
°¨t
, count);

587 i‡(
	`js⁄_u∆ikñy
(*(++
ru¬î
Ë=
JSON_TEMP_COMMENT_IDENTIFIER
)){

588 
_commít
 +
	`JSON_TEXT
('\n');

589 
√wcommít
;

592 
öã∫ÆJSONNode
 * 
myöã∫Æ
;

593 i‡(
¨øy
){

594 
myöã∫Æ
 = 
öã∫ÆJSONNode
::
	`√wI¡î«l
(
«me
, 
ru¬î
);

596 
myöã∫Æ
 = 
öã∫ÆJSONNode
::
	`√wI¡î«l
(++
ru¬î
, 
vÆue
);

598 
chûd
 = 
JSONNode
::
	`√wJSONNode
(
myöã∫Æ
);

599 
END_MEM_SCOPE


600 
chûd
 -> 
	`£t_commít
(
_commít
);

601 
END_MEM_SCOPE


602 
c⁄°_ˇ°
<
öã∫ÆJSONNode
*>(
∑ª¡
Ë-> 
CHILDREN
 -> 
	`push_back
(
chûd
);

604 i‡(
«me
.
	`em±y
()){

605 
c⁄°_ˇ°
<
öã∫ÆJSONNode
*>(
∑ª¡
Ë-> 
CHILDREN
 -> 
	`push_back
(
JSONNode
::
	`√wJSONNode
(öã∫ÆJSONNode::
	`√wI¡î«l
(
«me
, 
vÆue
)));

607 
c⁄°_ˇ°
<
öã∫ÆJSONNode
*>(
∑ª¡
Ë-> 
CHILDREN
 -> 
	`push_back
(
JSONNode
::
	`√wJSONNode
(öã∫ÆJSONNode::
	`√wI¡î«l
(
	`js⁄_°rög
(
«me
.
	`begö
(Ë+ 1,Çame.
	`íd
()), 
vÆue
)));

610 
	}
}

613 
	gJSONW‹kî
::
	$DoAºay
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
vÆue_t
Ë
js⁄_nŸhrow
 {

615 
	`JSON_ASSERT
(!
vÆue_t
.
	`em±y
(), 
	`JSON_TEXT
("DoArray isÉmpty"));

616 
	`JSON_ASSERT_SAFE
(
vÆue_t
[0] =
	`JSON_TEXT
('['), JSON_TEXT("DoAºay i†nŸá¿¨øy"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

617 i‡(
	`js⁄_u∆ikñy
(
vÆue_t
.
	`Àngth
() <= 2)) ;

619 #ifde‡
JSON_SAFE


620 
js⁄_°rög
 
√wVÆue
;

622 
size_t
 
°¨tög
 = 1;

625 
size_t
 
ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(','), 
vÆue_t
, 1);

626 
ídög
 !
js⁄_°rög
::
≈os
;

627 
ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(','), 
vÆue_t
, 
°¨tög
)){

629 #ifde‡
JSON_SAFE


630 
√wVÆue
.
	`assign
(
vÆue_t
.
	`begö
(Ë+ 
°¨tög
, vÆue_t.begö(Ë+ 
ídög
);

631 
	`JSON_ASSERT_SAFE
(
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(':'), 
√wVÆue
, 0Ë=
js⁄_°rög
::
≈os
, JSON_TEXT("Key/VÆuê∑ú†¨ênŸáŒowed i¿¨øys"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

632 
	`NewNode
(
∑ª¡
, 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
), 
√wVÆue
, 
åue
);

634 
	`NewNode
(
∑ª¡
, 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
), 
	`js⁄_°rög
(
vÆue_t
.
	`begö
(Ë+ 
°¨tög
, vÆue_t.begö(Ë+ 
ídög
), 
åue
);

636 
°¨tög
 = 
ídög
 + 1;

640 #ifde‡
JSON_SAFE


641 
√wVÆue
.
	`assign
(
vÆue_t
.
	`begö
(Ë+ 
°¨tög
, vÆue_t.
	`íd
() - 1);

642 
	`JSON_ASSERT_SAFE
(
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(':'), 
√wVÆue
, 0Ë=
js⁄_°rög
::
≈os
, JSON_TEXT("Key/VÆuê∑ú†¨ênŸáŒowed i¿¨øys"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

643 
	`NewNode
(
∑ª¡
, 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
), 
√wVÆue
, 
åue
);

645 
	`NewNode
(
∑ª¡
, 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
), 
	`js⁄_°rög
(
vÆue_t
.
	`begö
(Ë+ 
°¨tög
, vÆue_t.
	`íd
(Ë- 1), 
åue
);

647 
	}
}

651 
	gJSONW‹kî
::
	$DoNode
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
vÆue_t
Ë
js⁄_nŸhrow
 {

653 
	`JSON_ASSERT
(!
vÆue_t
.
	`em±y
(), 
	`JSON_TEXT
("DoNode isÉmpty"));

654 
	`JSON_ASSERT_SAFE
(
vÆue_t
[0] =
	`JSON_TEXT
('{'), JSON_TEXT("DoNodêi†nŸá¿node"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

655 i‡(
	`js⁄_u∆ikñy
(
vÆue_t
.
	`Àngth
() <= 2)) ;

657 
size_t
 
«me_ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(':'), 
vÆue_t
, 1);

658 
	`JSON_ASSERT_SAFE
(
«me_ídög
 !
js⁄_°rög
::
≈os
, 
	`JSON_TEXT
("Missög :"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

659 
js⁄_°rög
 
	`«me
(
vÆue_t
.
	`begö
(Ë+ 1, vÆue_t.begö(Ë+ 
«me_ídög
 - 1);

660 
size_t
 
vÆue_ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(','), 
vÆue_t
, 
«me_ídög
),

661 
«me_°¨tög
 = 1;

662 
vÆue_ídög
 !
js⁄_°rög
::
≈os
;

663 
vÆue_ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(','), 
vÆue_t
, 
«me_ídög
)){

665 
	`NewNode
(
∑ª¡
, 
«me
, 
	`js⁄_°rög
(
vÆue_t
.
	`begö
(Ë+ 
«me_ídög
 + 1, vÆue_t.begö(Ë+ 
vÆue_ídög
), 
Ál£
);

666 
«me_°¨tög
 = 
vÆue_ídög
 + 1;

667 
«me_ídög
 = 
	`FIND_NEXT_RELEVANT
(
	`JSON_TEXT
(':'), 
vÆue_t
, 
«me_°¨tög
);

668 
	`JSON_ASSERT_SAFE
(
«me_ídög
 !
js⁄_°rög
::
≈os
, 
	`JSON_TEXT
("Missög :"), 
∑ª¡
 -> 
	`NuŒify
(); ;);

669 
«me
.
	`assign
(
vÆue_t
.
	`begö
(Ë+ 
«me_°¨tög
, vÆue_t.begö(Ë+ 
«me_ídög
 - 1);

672 
	`NewNode
(
∑ª¡
, 
«me
, 
	`js⁄_°rög
(
vÆue_t
.
	`begö
(Ë+ 
«me_ídög
 + 1, vÆue_t.
	`íd
(Ë- 1), 
Ál£
);

673 
	}
}

	@libjson/_internal/Source/JSONWorker.h

1 #i‚de‡
JSON_WORKER_H


2 
	#JSON_WORKER_H


	)

4 
	~"JSONNode.h
"

5 
	~"JSONSh¨edSåög.h
"

7 ˛as†
	cJSONW‹kî
 {

8 
	mpublic
:

9 
js⁄_°rög
 
	$RemoveWhôeS∑˚AndCommíts
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

10 
js⁄_ch¨
 * 
	$RemoveWhôeS∑˚AndCommítsC
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

12 #ifde‡
JSON_READ_PRIORITY


13 
JSONNode
 
	$∑r£
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
Ë
js⁄_ªad_¥i‹ôy
;

14 
JSONNode
 
	$∑r£_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
Ë
js⁄_ªad_¥i‹ôy
;

16 
JSONNode
 
	$_∑r£_unf‹m©ãd
(c⁄° 
js⁄_ch¨
 * 
js⁄
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
	`js⁄_throws
(
°d
::
övÆid_¨gumít
Ë
js⁄_ªad_¥i‹ôy
;

18 
js⁄_ch¨
 * 
	$RemoveWhôeS∑˚
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
size_t
 & 
Àn
, 
boﬁ
 
esˇ≥QuŸes
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

20 
	$DoAºay
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
vÆue_t
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

21 
	$DoNode
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
vÆue_t
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

23 #ifde‡
JSON_LESS_MEMORY


24 
	#NAME_ENCODED
 
this
, 
åue


	)

25 
	#STRING_ENCODED
 
this
, 
Ál£


	)

26 
js⁄_°rög
 
	$FixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
öã∫ÆJSONNode
 * 
Êag
, 
boﬁ
 
which
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

28 
	#NAME_ENCODED
 
_«me_ícoded


	)

29 
	#STRING_ENCODED
 
_°rög_ícoded


	)

30 
js⁄_°rög
 
	$FixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 & 
Êag
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

34 #i‡
	`deföed
(
JSON_READ_PRIORITY
Ë|| 
	$deföed
(
JSON_STREAM
)

35 #i‡(
JSON_READ_PRIORITY
 =
HIGH
Ë&& (!(
	$deföed
(
JSON_LESS_MEMORY
)))

36 
ãm∂©e
<
js⁄_ch¨
 
ch
>

37 
size_t
 
	$FödNextRñev™t
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

39 
size_t
 
	$FödNextRñev™t
(
js⁄_ch¨
 
ch
, c⁄° 
js⁄_°rög
 & 
vÆue_t
, c⁄° 
size_t
 
pos
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

42 
	$UnfixSåög
(c⁄° 
js⁄_°rög
 & 
vÆue_t
, 
boﬁ
 
Êag
, js⁄_°rög & 
ªs
Ë
js⁄_nŸhrow
;

43 
JSON_PRIVATE


44 #ifde‡
JSON_READ_PRIORITY


45 
js⁄_ch¨
 
	$Hex
(c⁄° 
js⁄_ch¨
 * & 
pos
Ë
js⁄_nŸhrow
;

46 
js⁄_uch¨
 
	$UTF8
(c⁄° 
js⁄_ch¨
 * & 
pos
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
;

48 #ifde‡
JSON_ESCAPE_WRITES


49 
js⁄_°rög
 
	$toUTF8
(
js⁄_uch¨
 
p
Ë
js⁄_nŸhrow
;

51 #ifde‡
JSON_UNICODE


52 
	$UTF
(c⁄° 
js⁄_ch¨
 * & 
pos
, 
js⁄_°rög
 & 
ªsu…
, c⁄° js⁄_ch¨ * c⁄° 
íd
Ë
js⁄_nŸhrow
;

53 #ifde‡
JSON_ESCAPE_WRITES


54 
js⁄_°rög
 
	$toSuºog©ePaú
(
js⁄_uch¨
 
pos
Ë
js⁄_nŸhrow
;

57 #ifde‡
JSON_READ_PRIORITY


58 
	$S≥cülCh¨
(c⁄° 
js⁄_ch¨
 * & 
pos
, c⁄° js⁄_ch¨ * c⁄° 
íd
, 
js⁄_°rög
 & 
ªs
Ë
js⁄_nŸhrow
;

59 
	$NewNode
(c⁄° 
öã∫ÆJSONNode
 * 
∑ª¡
, c⁄° 
js⁄_°rög
 & 
«me
, c⁄° js⁄_°rög & 
vÆue
, 
boﬁ
 
¨øy
Ë
js⁄_nŸhrow
;

61 
¥iv©e
:

62 
	`JSONW‹kî
();

	@libjson/_internal/Source/JSONWriter.cpp

1 
	~"JSONNode.h
"

2 #ifde‡
JSON_WRITE_PRIORITY


3 
	~"JSONW‹kî.h
"

4 
	~"JSONGlobÆs.h
"

6 
boﬁ
 
u£d_ascii_⁄e
;

8 #ifde‡
JSON_INDENT


9 
ölöe
 
js⁄_°rög
 
	$makeIndít
(
amou¡
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

10 
ölöe
 
js⁄_°rög
 
	$makeIndít
(
amou¡
Ë
js⁄_nŸhrow
 {

11 i‡(
amou¡
 =0xFFFFFFFFË 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
);

12 
js⁄_°rög
 
ªsu…
;

13 
ªsu…
.
	`ª£rve
(
amou¡
 * 
	`js⁄_globÆ
(
INDENT
).
	`Àngth
());

14 
i
 = 0; i < 
amou¡
; ++i){

15 
ªsu…
 +
	`js⁄_globÆ
(
INDENT
);

17 
	`JSON_ASSERT
(
ªsu…
.
	`ˇ∑côy
(Ë=
amou¡
 * 
	`js⁄_globÆ
(
INDENT
).
	`Àngth
(), 
	`JSON_TEXT
("makeIndent madeá stringÅoo big"));

18  
ªsu…
;

19 
	}
}

21 
ölöe
 
js⁄_°rög
 
	$makeIndít
(
amou¡
Ë
js⁄_nŸhrow
 {

22 i‡(
amou¡
 =0xFFFFFFFFË 
	`js⁄_globÆ
(
EMPTY_JSON_STRING
);

23 i‡(
	`js⁄_likñy
(
amou¡
 < 8)){

24 c⁄° 
js⁄_°rög
 
ˇche
[] = {

25 
	`js⁄_°rög
(),

26 
	`js⁄_°rög
(
	`JSON_TEXT
("\t")),

27 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t")),

28 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t")),

29 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t")),

30 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t")),

31 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t")),

32 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t"))

34  
ˇche
[
amou¡
];

36 #i‚de‡
JSON_LESS_MEMORY


37 i‡(
	`js⁄_likñy
(
amou¡
 < 16)){

38 c⁄° 
js⁄_°rög
 
ˇche
[] = {

39 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t")),

40 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t")),

41 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t")),

42 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t")),

43 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t")),

44 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t")),

45 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

46 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"))

48  
ˇche
[
amou¡
 - 8];

50 #i‡
JSON_WRITE_PRIORITY
 =
HIGH


51 i‡(
	`js⁄_likñy
(
amou¡
 < 24)){

52 c⁄° 
js⁄_°rög
 
ˇche
[] = {

53 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

54 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

55 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

56 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

57 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

58 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

59 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")),

60 
	`js⁄_°rög
(
	`JSON_TEXT
("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"))

62  
ˇche
[
amou¡
 - 16];

66  
	`js⁄_°rög
(
amou¡
, 
	`JSON_TEXT
('\t'));

67 
	}
}

70 
	göã∫ÆJSONNode
::
	$WrôeName
(
boﬁ
 
f‹m©ãd
, boﬁ 
¨øyChûd
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

71 i‡(!
¨øyChûd
){

72 
ouçut
 +
	`JSON_TEXT
("\"");

73 
JSONW‹kî
::
	`UnfixSåög
(
_«me
, 
_«me_ícoded
, 
ouçut
);

74 
ouçut
 +((
f‹m©ãd
Ë? 
	`JSON_TEXT
("\" : ") : JSON_TEXT("\":"));

76 
	}
}

78 
	göã∫ÆJSONNode
::
	$WrôeChûdªn
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

80 i‡(
	`js⁄_likñy
(
CHILDREN
 -> 
	`em±y
())) ;

82 
js⁄_°rög
 
ödít_∂us_⁄e
;

84 i‡(
ödít
 != 0xFFFFFFFF){

85 
ödít_∂us_⁄e
 = 
	`js⁄_globÆ
(
NEW_LINE
Ë+ 
	`makeIndít
(++
ödít
);

89 c⁄° 
size_t
 
size_möus_⁄e
 = 
CHILDREN
 -> 
	`size
() - 1;

90 
size_t
 
i
 = 0;

91 
JSONNode
 ** 
ô
 = 
CHILDREN
 -> 
	`begö
();

92 
JSONNode
 ** 
ô_íd
 = 
CHILDREN
 -> 
	`íd
(); 
ô
 !ô_íd; ++ô, ++
i
){

94 
ouçut
 +
ödít_∂us_⁄e
;

95 (*
ô
Ë-> 
öã∫Æ
 -> 
	`Wrôe
(
ödít
, 
	`ty≥
(Ë=
JSON_ARRAY
, 
ouçut
);

96 i‡(
	`js⁄_likñy
(
i
 < 
size_möus_⁄e
)Ë
ouçut
 +
	`JSON_TEXT
(',');

98 i‡(
ödít
 != 0xFFFFFFFF){

99 
ouçut
 +
	`js⁄_globÆ
(
NEW_LINE
);

100 
ouçut
 +
	`makeIndít
(
ödít
 - 1);

102 
	}
}

104 #ifde‡
JSON_ARRAY_SIZE_ON_ONE_LINE


105 
	göã∫ÆJSONNode
::
	$WrôeChûdªnO√Löe
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

107 i‡(
	`js⁄_likñy
(
CHILDREN
 -> 
	`em±y
())) ;

108 i‡((*
CHILDREN
 -> 
	`begö
()Ë-> 
öã∫Æ
 -> 
	`isC⁄èöî
()Ë 
	`WrôeChûdªn
(
ödít
, 
ouçut
);

110 
js⁄_°rög
 
	`comma
(
	`JSON_TEXT
(","));

111 i‡(
ödít
 != 0xFFFFFFFF){

112 
comma
 +
	`JSON_TEXT
(' ');

116 c⁄° 
size_t
 
size_möus_⁄e
 = 
CHILDREN
 -> 
	`size
() - 1;

117 
size_t
 
i
 = 0;

118 
JSONNode
 ** 
ô
 = 
CHILDREN
 -> 
	`begö
();

119 
JSONNode
 ** 
ô_íd
 = 
CHILDREN
 -> 
	`íd
(); 
ô
 !ô_íd; ++ô, ++
i
){

120 (*
ô
Ë-> 
öã∫Æ
 -> 
	`Wrôe
(
ödít
, 
	`ty≥
(Ë=
JSON_ARRAY
, 
ouçut
);

121 i‡(
	`js⁄_likñy
(
i
 < 
size_möus_⁄e
)Ë
ouçut
 +
comma
;

123 
	}
}

126 #ifde‡
JSON_COMMENTS


127 
	göã∫ÆJSONNode
::
	$WrôeCommít
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

128 i‡(
ödít
 == 0xFFFFFFFF) ;

129 i‡(
	`js⁄_likñy
(
_commít
.
	`em±y
())) ;

130 
size_t
 
pos
 = 
_commít
.
	`föd
(
	`JSON_TEXT
('\n'));

132 c⁄° 
js⁄_°rög
 
	`cuºít_ödít
(
	`js⁄_globÆ
(
NEW_LINE
Ë+ 
	`makeIndít
(
ödít
));

134 i‡(
	`js⁄_likñy
(
pos
 =
js⁄_°rög
::
≈os
)){

135 
ouçut
 +
cuºít_ödít
;

136 
ouçut
 +
	`js⁄_globÆ
(
SINGLELINE_COMMENT
);

137 
ouçut
.
	`≠≥nd
(
_commít
.
	`begö
(), _commít.
	`íd
());

138 
ouçut
 +
cuºít_ödít
;

145 
ouçut
 +
cuºít_ödít
;

146 #i‡!(
	`deföed
(
JSON_WRITE_BASH_COMMENTS
Ë|| deföed(
JSON_WRITE_SINGLE_LINE_COMMENTS
))

147 c⁄° 
js⁄_°rög
 
	`cuºít_ödít_∂us_⁄e
(
	`js⁄_globÆ
(
NEW_LINE
Ë+ 
	`makeIndít
(
ödít
 + 1));

148 
ouçut
 +
	`JSON_TEXT
("/*");

149 
ouçut
 +
cuºít_ödít_∂us_⁄e
;

151 
size_t
 
ﬁd
 = 0;

152 
pos
 !
js⁄_°rög
::
≈os
){

153 i‡(
	`js⁄_u∆ikñy
(
pos
 && 
_commít
[po†- 1] =
	`JSON_TEXT
('\r'))) --pos;

154 #i‡
	`deföed
(
JSON_WRITE_BASH_COMMENTS
Ë|| deföed(
JSON_WRITE_SINGLE_LINE_COMMENTS
)

155 
ouçut
 +
	`js⁄_globÆ
(
SINGLELINE_COMMENT
);

157 
ouçut
.
	`≠≥nd
(
_commít
.
	`begö
(Ë+ 
ﬁd
, _commít.begö(Ë+ 
pos
);

159 #i‡
	`deföed
(
JSON_WRITE_BASH_COMMENTS
Ë|| deföed(
JSON_WRITE_SINGLE_LINE_COMMENTS
)

160 
ouçut
 +
cuºít_ödít
;

162 
ouçut
 +
cuºít_ödít_∂us_⁄e
;

164 
ﬁd
 = (
_commít
[
pos
] =
	`JSON_TEXT
('\r')) ?Öos + 2 :Öos + 1;

165 
pos
 = 
_commít
.
	`föd
(
	`JSON_TEXT
('\n'), 
ﬁd
);

167 #i‡
	`deföed
(
JSON_WRITE_BASH_COMMENTS
Ë|| deföed(
JSON_WRITE_SINGLE_LINE_COMMENTS
)

168 
ouçut
 +
	`js⁄_globÆ
(
SINGLELINE_COMMENT
);

170 
ouçut
.
	`≠≥nd
(
_commít
.
	`begö
(Ë+ 
ﬁd
, _commít.
	`íd
());

171 
ouçut
 +
cuºít_ödít
;

172 #i‡!(
	`deföed
(
JSON_WRITE_BASH_COMMENTS
Ë|| deföed(
JSON_WRITE_SINGLE_LINE_COMMENTS
))

173 
ouçut
 +
	`JSON_TEXT
("*/");

174 
ouçut
 +
cuºít_ödít
;

176 
	}
}

178 
ölöe
 
	göã∫ÆJSONNode
::
	$WrôeCommít
(, 
js⁄_°rög
 &Ëc⁄° 
js⁄_nŸhrow
 {
	}
}

181 
	göã∫ÆJSONNode
::
	$DumpRawSåög
(
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

183 i‡(
u£d_ascii_⁄e
){

184 
js⁄_°rög
 
	`ªsu…
(
_°rög
.
	`begö
(), _°rög.
	`íd
());

185 
js⁄_°rög
::
ôî©‹
 
beg
 = 
ªsu…
.
	`begö
(), 
í
 =Ñesu….
	`íd
(); beg !=Én; ++beg){

186 i‡(*
beg
 =
	`JSON_TEXT
('\1')) *beg = JSON_TEXT('\"');

188 
ouçut
 +
ªsu…
;

191 
ouçut
.
	`≠≥nd
(
_°rög
.
	`begö
(), _°rög.
	`íd
());

193 
	}
}

195 
	göã∫ÆJSONNode
::
	$Wrôe
(
ödít
, 
boﬁ
 
¨øyChûd
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 {

196 c⁄° 
boﬁ
 
f‹m©ãd
 = 
ödít
 != 0xFFFFFFFF;

197 
	`WrôeCommít
(
ödít
, 
ouçut
);

199 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

200 i‡(!(
f‹m©ãd
 || 
„tched
)){

201 
	`WrôeName
(
Ál£
, 
¨øyChûd
, 
ouçut
);

203 
	`DumpRawSåög
(
ouçut
);

208 
	`WrôeName
(
f‹m©ãd
, 
¨øyChûd
, 
ouçut
);

210 
_ty≥
){

211 
JSON_NODE
:

212 
	`Fëch
();

213 
ouçut
 +
	`JSON_TEXT
("{");

214 
	`WrôeChûdªn
(
ödít
, 
ouçut
);

215 
ouçut
 +
	`JSON_TEXT
("}");

217 
JSON_ARRAY
:

218 
	`Fëch
();

219 
ouçut
 +
	`JSON_TEXT
("[");

220 #ifde‡
JSON_ARRAY_SIZE_ON_ONE_LINE


221 i‡(
	`size
(Ë<
JSON_ARRAY_SIZE_ON_ONE_LINE
){

222 
	`WrôeChûdªnO√Löe
(
ödít
, 
ouçut
);

225 
	`WrôeChûdªn
(
ödít
, 
ouçut
);

226 #ifde‡
JSON_ARRAY_SIZE_ON_ONE_LINE


229 
ouçut
 +
	`JSON_TEXT
("]");

231 
JSON_NUMBER
:

232 
JSON_NULL
:

233 
JSON_BOOL
:

234 
ouçut
.
	`≠≥nd
(
_°rög
.
	`begö
(), _°rög.
	`íd
());

238 
	`JSON_ASSERT
(
_ty≥
 =
JSON_STRING
, 
	`JSON_TEXT
("Unknown jsonÇodeÅype"));

240 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

241 i‡(
	`js⁄_likñy
(
„tched
)){

243 
ouçut
 +
	`JSON_TEXT
("\"");

244 
JSONW‹kî
::
	`UnfixSåög
(
_°rög
, 
_°rög_ícoded
, 
ouçut
);

245 
ouçut
 +
	`JSON_TEXT
("\"");

246 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

248 
	`DumpRawSåög
(
ouçut
);

251 
	}
}

	@libjson/_internal/Source/JSON_Base64.h

1 #i‚de‡
LIBJSON_GUARD_BASE64_H


2 
	#LIBJSON_GUARD_BASE64_H


	)

4 
	~"JSONDebug.h
"

5 #i‡
deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

7 
	~"../Dïídícõs/libba£64++/libba£64++.h
"

9 ˛as†
	cJSONBa£64
 {

10 
	mpublic
:

11 
ölöe
 
js⁄_°rög
 
	$js⁄_ícode64
(c⁄° * 
bö¨y
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

12 
ölöe
 
°d
::
°rög
 
	$js⁄_decode64
(c⁄° 
js⁄_°rög
 & 
ícoded
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

13 
¥iv©e
:

14 
	`JSONBa£64
();

17 
js⁄_°rög
 
JSONBa£64
::
	$js⁄_ícode64
(c⁄° * 
bö¨y
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
 {

18 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


19  
libba£64
::
ícode
<
js⁄_°rög
, 
js⁄_ch¨
, 
js⁄_uch¨
, 
åue
>(
bö¨y
, 
byãs
);

21  
libba£64
::
ícode
<
js⁄_°rög
, 
js⁄_ch¨
, 
js⁄_uch¨
, 
Ál£
>(
bö¨y
, 
byãs
);

23 
	}
}

25 
	g°d
::
°rög
 
JSONBa£64
::
	$js⁄_decode64
(c⁄° 
js⁄_°rög
 & 
ícoded
Ë
js⁄_nŸhrow
 {

26 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


27  
libba£64
::
decode
<
js⁄_°rög
, 
js⁄_ch¨
, 
js⁄_uch¨
, 
åue
>(
ícoded
);

29  
libba£64
::
decode
<
js⁄_°rög
, 
js⁄_ch¨
, 
js⁄_uch¨
, 
Ál£
>(
ícoded
);

31 
	}
}

	@libjson/_internal/Source/NumberToString.h

1 #i‚de‡
NUMBERTOSTRING_H


2 
	#NUMBERTOSTRING_H


	)

4 
	~<limôs
>

5 
	~"JSONDebug.h
"

6 #ifde‡
JSON_LESS_MEMORY


7 
	~"JSONMem‹y.h
"

9 
	~"JSONSh¨edSåög.h
"

10 
	~<c°dio
>

11 #ifde‡
JSON_STRICT


12 
	~<cm©h
>

14 
	gãm∂©e
 <
	gGETLENSIZE
>

15 
	sgëLíSize
{

16 
	mtmp
[
GETLENSIZE
 == 16];

17 íum {
	mGETLEN
 = 41};

20 
	gãm∂©e
<>

21 
	ggëLíSize
<1>{

22 íum {
	gGETLEN
 = 5};

25 
	gãm∂©e
 <>

26 
	ggëLíSize
<2>{

27 íum {
	gGETLEN
 = 7};

30 
	gãm∂©e
 <>

31 
	ggëLíSize
<4>{

32 íum {
	gGETLEN
 = 12};

35 
	gãm∂©e
 <>

36 
	ggëLíSize
<8>{

37 íum {
	gGETLEN
 = 22};

40 
ölöe
 
boﬁ
 
	$_ÊﬂtsAªEquÆ
(c⁄° 
js⁄_numbî
 & 
⁄e
, c⁄° js⁄_numbî & 
two
Ë
js⁄_puª
;

41 
ölöe
 
boﬁ
 
	$_ÊﬂtsAªEquÆ
(c⁄° 
js⁄_numbî
 & 
⁄e
, c⁄° js⁄_numbî & 
two
Ë
js⁄_nŸhrow
 {

42  (
⁄e
 > 
two
Ë? (⁄ê-ÅwoË< 
JSON_FLOAT_THRESHHOLD
 : (one -Åwo) > -JSON_FLOAT_THRESHHOLD;

43 
	}
}

45 #ifde‡
JSON_LESS_MEMORY


46 
	#num_°r_ªsu…
 
s
.
±r


	)

49 ˛as†
	cNumbîToSåög
 {

50 
	mpublic
:

51 
ãm∂©e
<
ty≥«me
 
T
>

52 
js⁄_°rög
 
	$_ôﬂ
(
T
 
vÆ
Ë
js⁄_nŸhrow
 {

53 #ifde‡
JSON_LESS_MEMORY


54 
js⁄_auto
<
js⁄_ch¨
> 
	`s
(
gëLíSize
<(
T
)>::
GETLEN
);

56 
js⁄_ch¨
 
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
];

58 
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
 - 1] = 
	`JSON_TEXT
('\0');

59 
js⁄_ch¨
 * 
ru¬î
 = &
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
 - 2];

60 
boﬁ
 
√g©ive
;

62 
START_MEM_SCOPE


63 
vÆue
 = ()
vÆ
;

65 i‡(
vÆue
 < 0){

66 
vÆue
 = -value;

67 
√g©ive
 = 
åue
;

69 
√g©ive
 = 
Ál£
;

74 *
ru¬î
-- = (
js⁄_ch¨
)(
vÆue
 % 10Ë+ 
	`JSON_TEXT
('0');

75 } 
vÆue
 /= 10);

76 
END_MEM_SCOPE


79 i‡(
√g©ive
){

80 *
ru¬î
 = 
	`JSON_TEXT
('-');

81  
	`js⁄_°rög
(
ru¬î
);

83  
	`js⁄_°rög
(
ru¬î
 + 1);

86 #i‚de‡
JSON_LIBRARY


87 
ãm∂©e
<
ty≥«me
 
T
>

88 
js⁄_°rög
 
	$_uôﬂ
(
T
 
vÆ
Ë
js⁄_nŸhrow
 {

89 #ifde‡
JSON_LESS_MEMORY


90 
js⁄_auto
<
js⁄_ch¨
> 
	`s
(
gëLíSize
<(
T
)>::
GETLEN
);

92 
js⁄_ch¨
 
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
];

94 
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
 - 1] = 
	`JSON_TEXT
('\0');

95 
js⁄_ch¨
 * 
ru¬î
 = &
num_°r_ªsu…
[
gëLíSize
<(
T
)>::
GETLEN
 - 2];

98 
START_MEM_SCOPE


99 
vÆue
 = ()
vÆ
;

101 *
ru¬î
-- = (
js⁄_ch¨
)(
vÆue
 % 10Ë+ 
	`JSON_TEXT
('0');

102 } 
vÆue
 /= 10);

103 
END_MEM_SCOPE


105  
	`js⁄_°rög
(
ru¬î
 + 1);

106 
	}
}

109 #ifde‡
JSON_ISO_STRICT


110 
	#EXTRA_LONG


	)

111 
	#FLOAT_STRING
 "%f"

	)

112 
	#LFLOAT_STRING
 
L
"%f"

	)

114 
	#EXTRA_LONG
 

	)

115 
	#FLOAT_STRING
 "%Lf"

	)

116 
	#LFLOAT_STRING
 
L
"%Lf"

	)

119 
js⁄_°rög
 
	$_·ﬂ
(
js⁄_numbî
 
vÆue
Ë
js⁄_nŸhrow
 {

120 #i‚de‡
JSON_LIBRARY


122 i‡(
	`js⁄_u∆ikñy
(
vÆue
 >0.0 && 
	`_ÊﬂtsAªEquÆ
(vÆue, (
js⁄_numbî
)((
EXTRA_LONG
 )value)))){

123  
_uôﬂ
<
EXTRA_LONG
 >((EXTRA_LONG )
vÆue
);

128 i‡(
	`js⁄_u∆ikñy
(
	`_ÊﬂtsAªEquÆ
(
vÆue
, (
js⁄_numbî
)((
EXTRA_LONG
)value)))){

129  
_ôﬂ
<
EXTRA_LONG
>((EXTRA_LONG)
vÆue
);

132 #ifde‡
JSON_LESS_MEMORY


133 
js⁄_auto
<
js⁄_ch¨
> 
	`s
(64);

135 
js⁄_ch¨
 
num_°r_ªsu…
[64];

137 #ifde‡
JSON_UNICODE


138 
°d
::
	`sw¥ötf
(
num_°r_ªsu…
, 63, 
LFLOAT_STRING
, (
EXTRA_LONG
 )
vÆue
);

141 #ifde‡
_MSC_VER


142 
	`_¢¥ötf_s
(
num_°r_ªsu…
, 63, 63, 
FLOAT_STRING
, (
EXTRA_LONG
 )
vÆue
);

144 
	`¢¥ötf
(
num_°r_ªsu…
, 63, 
FLOAT_STRING
, (
EXTRA_LONG
 )
vÆue
);

148 
js⁄_ch¨
 * 
pos
 = &
num_°r_ªsu…
[0]; *pos; ++pos){

149 i‡(
	`js⁄_u∆ikñy
(*
pos
 == '.')){

150 
js⁄_ch¨
 * 
ru¬î
 = 
pos
 + 1; *runner; ++runner){

151 i‡(
	`js⁄_likñy
(*
ru¬î
 !
	`JSON_TEXT
('0'))){

152 
pos
 = 
ru¬î
 + 1;

155 *
pos
 = 
	`JSON_TEXT
('\0');

159  
	`js⁄_°rög
(
num_°r_ªsu…
);

160 
	}
}

162 #i‡
deföed
(
JSON_SAFE
Ë|| 
	$deföed
(
JSON_DEBUG
)

163 
boﬁ
 
	$isNumîic
(c⁄° 
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
 {

164 c⁄° 
js⁄_ch¨
 * 
p
 = 
°r
.
	`c_°r
();

165 
boﬁ
 
decimÆ
 = 
Ál£
;

166 
boﬁ
 
scõ¡ific
 = 
Ál£
;

168 #ifde‡
JSON_STRICT


169 
boﬁ
 
Àadögzîo
 = 
Ál£
;

173 *
p
){

174 
	`JSON_TEXT
('\0'):

175  
Ál£
;

176 #i‚de‡
JSON_STRICT


177 
	`JSON_TEXT
('.'):

178 
decimÆ
 = 
åue
;

180 
	`JSON_TEXT
('+'):

182 
	`JSON_TEXT
('-'):

183 *(
p
 + 1)){

184 
	`JSON_TEXT
('.'):

185 
	`JSON_TEXT
('e'):

186 
	`JSON_TEXT
('E'):

187 
	`JSON_TEXT
('\0'):

188  
Ál£
;

189 
	`JSON_TEXT
('0'):

190 #ifde‡
JSON_STRICT


191 *(
p
 + 2)){

192 
	`JSON_TEXT
('.'):

193 
	`JSON_TEXT
('e'):

194 
	`JSON_TEXT
('E'):

195 
Àadögzîo
 = 
Ál£
;

197 
	`JSON_TEXT
('\0'):

198  
åue
;

200 
Àadögzîo
 = 
åue
;

204 ++
p
;

210 
	`JSON_TEXT
('1'):

211 
	`JSON_TEXT
('2'):

212 
	`JSON_TEXT
('3'):

213 
	`JSON_TEXT
('4'):

214 
	`JSON_TEXT
('5'):

215 
	`JSON_TEXT
('6'):

216 
	`JSON_TEXT
('7'):

217 
	`JSON_TEXT
('8'):

218 
	`JSON_TEXT
('9'):

220 
	`JSON_TEXT
('0'):

221 ++
p
;

222 #ifde‡
JSON_STRICT


223 
Àadögzîo
 = 
åue
;

225 *
p
){

226 
	`JSON_TEXT
('.'):

227 
decimÆ
 = 
åue
;

229 
	`JSON_TEXT
('e'):

230 
	`JSON_TEXT
('E'):

231 #ifde‡
JSON_STRICT


232 
Àadögzîo
 = 
Ál£
;

234 
scõ¡ific
 = 
åue
;

235 ++
p
;

236 *
p
){

237 
	`JSON_TEXT
('\0'):

238  
Ál£
;

239 
	`JSON_TEXT
('-'):

240 
	`JSON_TEXT
('+'):

241 #i‚de‡
JSON_STRICT


242 
	`JSON_TEXT
('0'):

244 
	`JSON_TEXT
('1'):

245 
	`JSON_TEXT
('2'):

246 
	`JSON_TEXT
('3'):

247 
	`JSON_TEXT
('4'):

248 
	`JSON_TEXT
('5'):

249 
	`JSON_TEXT
('6'):

250 
	`JSON_TEXT
('7'):

251 
	`JSON_TEXT
('8'):

252 
	`JSON_TEXT
('9'):

255  
Ál£
;

258 #i‚de‡
JSON_STRICT


259 
	`JSON_TEXT
('x'):

260  (
°r
.
	`föd_fú°_nŸ_of
(
	`JSON_TEXT
("0123456789ABCDEFabcdef"), 2Ë=
js⁄_°rög
::
≈os
);

261 
	`JSON_TEXT
('1'):

262 
	`JSON_TEXT
('2'):

263 
	`JSON_TEXT
('3'):

264 
	`JSON_TEXT
('4'):

265 
	`JSON_TEXT
('5'):

266 
	`JSON_TEXT
('6'):

267 
	`JSON_TEXT
('7'):

268  (
°r
.
	`föd_fú°_nŸ_of
(
	`JSON_TEXT
("01234567"), 1Ë=
js⁄_°rög
::
≈os
);

270 
	`JSON_TEXT
('\0'):

271  
åue
;

273  
Ál£
;

277  
Ál£
;

279 ++
p
;

282 *
p
){

283 *
p
){

284 
	`JSON_TEXT
('.'):

285 i‡(
	`js⁄_u∆ikñy
(
decimÆ
)){

286  
Ál£
;

289 i‡(
	`js⁄_u∆ikñy
(
scõ¡ific
)){

290  
Ál£
;

292 
decimÆ
 = 
åue
;

294 
	`JSON_TEXT
('e'):

295 
	`JSON_TEXT
('E'):

296 i‡(
	`js⁄_u∆ikñy
(
scõ¡ific
)){

297  
Ál£
;

299 
scõ¡ific
 = 
åue
;

300 ++
p
;

301 *
p
){

302 
	`JSON_TEXT
('\0'):

303  
Ál£
;

304 
	`JSON_TEXT
('-'):

305 
	`JSON_TEXT
('+'):

306 i‡(!
	`isdigô
(*(
p
 + 1))){

307  
Ál£
;

310 #ifde‡
JSON_STRICT


311 i‡(*(
p
 + 1Ë=
	`JSON_TEXT
('0')){

312  
Ál£
;

316 #i‚de‡
JSON_STRICT


317 
	`JSON_TEXT
('0'):

319 
	`JSON_TEXT
('1'):

320 
	`JSON_TEXT
('2'):

321 
	`JSON_TEXT
('3'):

322 
	`JSON_TEXT
('4'):

323 
	`JSON_TEXT
('5'):

324 
	`JSON_TEXT
('6'):

325 
	`JSON_TEXT
('7'):

326 
	`JSON_TEXT
('8'):

327 
	`JSON_TEXT
('9'):

330  
Ál£
;

333 
	`JSON_TEXT
('0'):

334 
	`JSON_TEXT
('1'):

335 
	`JSON_TEXT
('2'):

336 
	`JSON_TEXT
('3'):

337 
	`JSON_TEXT
('4'):

338 
	`JSON_TEXT
('5'):

339 
	`JSON_TEXT
('6'):

340 
	`JSON_TEXT
('7'):

341 
	`JSON_TEXT
('8'):

342 
	`JSON_TEXT
('9'):

345  
Ál£
;

347 ++
p
;

349 #ifde‡
JSON_STRICT


350 i‡(
Àadögzîo
 && !
decimÆ
){

351  
Ál£
;

354  
åue
;

355 
	}
}

358 #ifde‡
JSON_STRICT


360 
js⁄_numbî
 
	$_©of
 (c⁄° 
js⁄_ch¨
 * 
num
){

361 
js⁄_numbî
 
sign
 = (json_number)1.0;

364 i‡(*
num
==
	`JSON_TEXT
('-')){

365 
sign
 = -1.0;

366 ++
num
;

371 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

372 
boﬁ
 
_Àadögzîos
 = *
num
 =
	`JSON_TEXT
('0');

373 
boﬁ
 
_Àadögdigôs
 = 
Ál£
;

375 i‡(*
num
 =
	`JSON_TEXT
('0')){

376 ++
num
;

378 #ifde‡
JSON_STRICT


379 i‡(
	`js⁄_likñy
(*
num
 < 
	`JSON_TEXT
('1') || *num > JSON_TEXT('9'))){

380  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
();

384 
	`JSON_ASSERT_SAFE
(*
num
 !
	`JSON_TEXT
('0'), JSON_TEXT("mu…ùÀÜódög zîos"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

387 
js⁄_numbî
 
n
 = (json_number)0.0;

388 i‡(
	`js⁄_likñy
(*
num
 >
	`JSON_TEXT
('1') && *num <= JSON_TEXT('9'))){

389 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

390 
_Àadögdigôs
 = 
åue
;

393 
n
 = (¿* 10.0Ë+ (*
num
++ - 
	`JSON_TEXT
('0'));

394 } *
num
 >
	`JSON_TEXT
('0') && *num <= JSON_TEXT('9'));

396 
	`JSON_ASSERT_SAFE
(

397 (*
num
Ë=
	`JSON_TEXT
('.') ||

398 (*
num
Ë=
	`JSON_TEXT
('e') ||

399 (*
num
Ë=
	`JSON_TEXT
('E') ||

400 (*
num
Ë=
	`JSON_TEXT
('\0')

401 , 
	`JSON_TEXT
("fú° digôÇŸáÇumbî,É,Öîiod, o∏ãrmö©‹"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

405 
js⁄_numbî
 
sˇÀ
 = (json_number)0.0;

406 i‡(*
num
 =
	`JSON_TEXT
('.')) {

407 
	`JSON_ASSERT_SAFE
(
_Àadögzîos
 || 
_Àadögdigôs
, 
	`JSON_TEXT
("≥riod wôhouàÀadögánythög"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

408 ++
num
;

409 ; *
num
 >
	`JSON_TEXT
('0') && *num <= JSON_TEXT('9');){

410 
n
 = (¿* 10.0Ë+ (*
num
++ - 
	`JSON_TEXT
('0'));

411 --
sˇÀ
;

414 
	`JSON_ASSERT_SAFE
(!
_Àadögzîos
 || 
n
 =0, 
	`JSON_TEXT
("Àadög zîÿ⁄á¿öt"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

415 
	`JSON_ASSERT_SAFE
(

416 (*
num
Ë=
	`JSON_TEXT
('e') ||

417 (*
num
Ë=
	`JSON_TEXT
('E') ||

418 (*
num
Ë=
	`JSON_TEXT
('\0')

419 , 
	`JSON_TEXT
("√xàch¨ÇŸá¿ê‹Åîmö©‹"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

423 
subsˇÀ
 = 0, 
signsubsˇÀ
 = 1;

424 i‡(
	`js⁄_u∆ikñy
(*
num
 =
	`JSON_TEXT
('e') || *num == JSON_TEXT('E'))){

425 ++
num
;

426 *
num
){

427 
	`JSON_TEXT
('+'):

428 ++
num
;

430 
	`JSON_TEXT
('-'):

431 
signsubsˇÀ
 = -1;

432 ++
num
;

433 
	`JSON_ASSERT_SAFE
(*
num
 !
	`JSON_TEXT
('0'), JSON_TEXT("√g©ivêˇ¡ bêfﬁlowed byÜódög zîÿevíá·î E"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

438 
	`JSON_ASSERT_SAFE
(*
num
 !
	`JSON_TEXT
('\0'), JSON_TEXT("nÿexp⁄íàf‹ scõ¡ifi¯nŸ©i⁄"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

439 *
num
 >
	`JSON_TEXT
('0') && *num <= JSON_TEXT('9')){

440 
subsˇÀ
=(subsˇÀ * 10Ë+ (*
num
++ - 
	`JSON_TEXT
('0'));

444 
	`JSON_ASSERT_SAFE
(*
num
 =
	`JSON_TEXT
('\0'), JSON_TEXT("d⁄êwôhÇumbî,ÇŸáàãrmö©‹"),  
°d
::
numîic_limôs
<
js⁄_numbî
>::
	`sig«lög_NaN
(); );

445  
sign
 * 
n
 * 
	`pow
((
js⁄_numbî
)10.0, 
sˇÀ
 + 
subsˇÀ
 * 
signsubsˇÀ
);

446 
	}
}

	@libjson/_internal/Source/internalJSONNode.cpp

1 
	~"öã∫ÆJSONNode.h
"

2 
	~"NumbîToSåög.h
"

3 
	~"JSONNode.h
"

4 
	~"JSONW‹kî.h
"

5 
	~"JSONGlobÆs.h
"

7 
	göã∫ÆJSONNode
::
	$öã∫ÆJSONNode
(c⁄° 
öã∫ÆJSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 :

8 
	`_ty≥
(
‹ig
.
_ty≥
), 
	`_«me
(‹ig.
_«me
), 
	`_«me_ícoded
(‹ig.
_«me_ícoded
),

9 
	`_°rög
(
‹ig
.
_°rög
), 
	`_°rög_ícoded
(‹ig.
_°rög_ícoded
), 
	$_vÆue
(
‹ig
.
_vÆue
)

10 
	$öôülizeMuãx
(0)

11 
	$öôülizeRefCou¡
(1)

12 
	$öôülizeFëch
(
‹ig
.
„tched
)

13 
	$öôülizeCommít
(
‹ig
.
_commít
)

14 
	$öôülizeChûdªn
(0){

17 
LIBJSON_COPY_CTOR
;

18 i‡(
	`isC⁄èöî
()){

19 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

20 i‡(
	`js⁄_likñy
(!
‹ig
.
CHILDREN
 -> 
	`em±y
())){

21 
CHILDREN
 -> 
	`ª£rve
(
‹ig
.CHILDREN -> 
	`size
());

22 
	`js⁄_f‹óch
(
‹ig
.
CHILDREN
, 
myru¬î
){

23 
CHILDREN
 -> 
	`push_back
(
JSONNode
::
	`√wJSONNode
((*
myru¬î
Ë-> 
	`du∂iˇã
()));

27 #ifde‡
JSON_MUTEX_CALLBACKS


28 
	`_£t_muãx
(
‹ig
.
mylock
, 
Ál£
);

30 
	}
}

32 #ifde‡
JSON_PREPARSE


33 
	#SëFëchedFÆ£OrDo
(
code
Ë
	)
code

35 
	#SëFëchedFÆ£OrDo
(
code
Ë
	`SëFëched
(
Ál£
)

	)

39 #ifde‡
JSON_READ_PRIORITY


40 
	göã∫ÆJSONNode
::
	$öã∫ÆJSONNode
(c⁄° 
js⁄_°rög
 & 
u≈¨£d
Ë
js⁄_nŸhrow
 : 
	`_ty≥
(), 
	`_«me
(),
	`_«me_ícoded
(
Ál£
), 
	`_°rög
(u≈¨£d), 
	`_°rög_ícoded
(), 
	$_vÆue
()

41 
	$öôülizeMuãx
(0)

42 
	$öôülizeRefCou¡
(1)

43 
	$öôülizeFëch
(
Ál£
)

44 
	`öôülizeCommít
(
	$js⁄_globÆ
(
EMPTY_JSON_STRING
))

45 
	$öôülizeChûdªn
(0){

47 
LIBJSON_CTOR
;

48 
u≈¨£d
[0]){

49 
	`JSON_TEXT
('{'):

50 
_ty≥
 = 
JSON_NODE
;

51 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

52 #ifde‡
JSON_PREPARSE


53 
	`FëchNode
();

56 
	`JSON_TEXT
('['):

57 
_ty≥
 = 
JSON_ARRAY
;

58 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

59 #ifde‡
JSON_PREPARSE


60 
	`FëchAºay
();

64 
	`JSON_FAIL_SAFE
(
	`JSON_TEXT
("roŸÇŸ sèπög wôhÉôhî { o∏["), 
	`NuŒify
(););

67 
	}
}

69 #i‚de‡
JSON_STRICT


70 
	#LETTERCASE
(
x
, 
y
)\

71 
	`JSON_TEXT
(
x
):\

72 
	`JSON_TEXT
(
y
)

	)

74 
	#LETTERCASE
(
x
, 
y
)\

75 
	`JSON_TEXT
(
x
)

	)

78 
	göã∫ÆJSONNode
::
	$öã∫ÆJSONNode
(c⁄° 
js⁄_°rög
 & 
«me_t
, c⁄° js⁄_°rög & 
vÆue_t
Ë
js⁄_nŸhrow
 : 
	`_ty≥
(), 
	`_«me_ícoded
(), 
	`_«me
(
JSONW‹kî
::
	`FixSåög
“ame_t, 
NAME_ENCODED
)), 
	`_°rög
(), 
	`_°rög_ícoded
(), 
	$_vÆue
()

79 
	$öôülizeMuãx
(0)

80 
	$öôülizeRefCou¡
(1)

81 
	$öôülizeFëch
(
Ál£
)

82 
	`öôülizeCommít
(
	$js⁄_globÆ
(
EMPTY_JSON_STRING
))

83 
	$öôülizeChûdªn
(0){

85 
LIBJSON_CTOR
;

87 #ifde‡
JSON_STRICT


88 
	`JSON_ASSERT_SAFE
(!
vÆue_t
.
	`em±y
(), 
	`JSON_TEXT
("em±yÇode"), 
	`NuŒify
(); ;);

90 i‡(
	`js⁄_u∆ikñy
(
vÆue_t
.
	`em±y
())){

91 
_ty≥
 = 
JSON_NULL
;

92 
	`SëFëched
(
åue
);

97 
_°rög
 = 
vÆue_t
;

99 c⁄° 
js⁄_ch¨
 
fú°ch¨
 = 
vÆue_t
[0];

100 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


101 c⁄° 
js⁄_ch¨
 
œ°ch¨
 = 
vÆue_t
[vÆue_t.
	`Àngth
() - 1];

104 
fú°ch¨
){

105 
	`JSON_TEXT
('\"'):

106 
	`JSON_ASSERT_SAFE
(
œ°ch¨
 =
	`JSON_TEXT
('\"'), JSON_TEXT("U¡îmö©ed quŸe"), 
	`NuŒify
(); ;);

107 
_ty≥
 = 
JSON_STRING
;

108 
	`SëFëchedFÆ£OrDo
(
	`FëchSåög
());

110 
	`JSON_TEXT
('{'):

111 
	`JSON_ASSERT_SAFE
(
œ°ch¨
 =
	`JSON_TEXT
('}'), JSON_TEXT("Missög }"), 
	`NuŒify
(); ;);

112 
_ty≥
 = 
JSON_NODE
;

113 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

114 
	`SëFëchedFÆ£OrDo
(
	`FëchNode
());

116 
	`JSON_TEXT
('['):

117 
	`JSON_ASSERT_SAFE
(
œ°ch¨
 =
	`JSON_TEXT
(']'), JSON_TEXT("Missög ]"), 
	`NuŒify
(); ;);

118 
_ty≥
 = 
JSON_ARRAY
;

119 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

120 
	`SëFëchedFÆ£OrDo
(
	`FëchAºay
());

122 
	`LETTERCASE
('t', 'T'):

123 
	`JSON_ASSERT_SAFE
(
vÆue_t
 =
	`js⁄_globÆ
(
CONST_TRUE
), 
	`js⁄_°rög
(js⁄_globÆ(
ERROR_UNKNOWN_LITERAL
Ë+ vÆue_t).
	`c_°r
(), 
	`NuŒify
(); ;);

124 
_vÆue
.
_boﬁ
 = 
åue
;

125 
_ty≥
 = 
JSON_BOOL
;

126 
	`SëFëched
(
åue
);

128 
	`LETTERCASE
('f', 'F'):

129 
	`JSON_ASSERT_SAFE
(
vÆue_t
 =
	`js⁄_globÆ
(
CONST_FALSE
), 
	`js⁄_°rög
(js⁄_globÆ(
ERROR_UNKNOWN_LITERAL
Ë+ vÆue_t).
	`c_°r
(), 
	`NuŒify
(); ;);

130 
_vÆue
.
_boﬁ
 = 
Ál£
;

131 
_ty≥
 = 
JSON_BOOL
;

132 
	`SëFëched
(
åue
);

134 
	`LETTERCASE
('n', 'N'):

135 
	`JSON_ASSERT_SAFE
(
vÆue_t
 =
	`js⁄_globÆ
(
CONST_NULL
), 
	`js⁄_°rög
(js⁄_globÆ(
ERROR_UNKNOWN_LITERAL
Ë+ vÆue_t).
	`c_°r
(), 
	`NuŒify
(); ;);

136 
_ty≥
 = 
JSON_NULL
;

137 
	`SëFëched
(
åue
);

140 
	`JSON_ASSERT_SAFE
(
NumbîToSåög
::
	`isNumîic
(
vÆue_t
), 
	`js⁄_°rög
(
	`js⁄_globÆ
(
ERROR_UNKNOWN_LITERAL
Ë+ vÆue_t).
	`c_°r
(), 
	`NuŒify
(); ;);

141 
_ty≥
 = 
JSON_NUMBER
;

142 
	`SëFëchedFÆ£OrDo
(
	`FëchNumbî
());

145 
	}
}

150 
	göã∫ÆJSONNode
::~
	$öã∫ÆJSONNode
(Ë
js⁄_nŸhrow
 {

151 
LIBJSON_DTOR
;

152 #ifde‡
JSON_MUTEX_CALLBACKS


153 
	`_un£t_muãx
();

155 
	`DELETE_CHILDREN
();

156 
	}
}

158 #ifde‡
JSON_READ_PRIORITY


159 
	göã∫ÆJSONNode
::
	$FëchSåög
(Ëc⁄° 
js⁄_nŸhrow
 {

160 
	`JSON_ASSERT_SAFE
(!
_°rög
.
	`em±y
(), 
	`JSON_TEXT
("JSON js⁄_°rögÅy≥ i†em±y?"), 
	`NuŒify
(); ;);

161 
	`JSON_ASSERT_SAFE
(
_°rög
[0] =
	`JSON_TEXT
('\"'), JSON_TEXT("JSON js⁄_°rögÅy≥ d€¢'à°¨àwôhá quŸ©i⁄?"), 
	`NuŒify
(); ;);

162 
	`JSON_ASSERT_SAFE
(
_°rög
[_°rög.
	`Àngth
(Ë- 1] =
	`JSON_TEXT
('\"'), JSON_TEXT("JSON js⁄_°rögÅy≥ d€¢'àíd wôhá quŸ©i⁄?"), 
	`NuŒify
(); ;);

163 
_°rög
 = 
JSONW‹kî
::
	`FixSåög
(
	`js⁄_°rög
(_°rög.
	`begö
(Ë+ 1, _°rög.
	`íd
(Ë- 1), 
STRING_ENCODED
);

164 #ifde‡
JSON_LESS_MEMORY


165 
	`JSON_ASSERT
(
_°rög
.
	`ˇ∑côy
(Ë=_°rög.
	`Àngth
(), 
	`JSON_TEXT
("_string objectÅooÜarge 2"));

167 
	}
}

169 
	göã∫ÆJSONNode
::
	$FëchNode
(Ëc⁄° 
js⁄_nŸhrow
 {

170 
	`JSON_ASSERT_SAFE
(!
_°rög
.
	`em±y
(), 
	`JSON_TEXT
("JSONÇodêty≥ i†em±y?"), 
	`NuŒify
(); ;);

171 
	`JSON_ASSERT_SAFE
(
_°rög
[0] =
	`JSON_TEXT
('{'), JSON_TEXT("JSONÇodêty≥ d€¢'à°¨àwôhá bøckë?"), 
	`NuŒify
(); ;);

172 
	`JSON_ASSERT_SAFE
(
_°rög
[_°rög.
	`Àngth
(Ë- 1] =
	`JSON_TEXT
('}'), JSON_TEXT("JSONÇodêty≥ d€¢'àíd wôhá bøckë?"), 
	`NuŒify
(); ;);

173 
JSONW‹kî
::
	`DoNode
(
this
, 
_°rög
);

174 
	`˛órSåög
(
_°rög
);

175 
	}
}

177 
	göã∫ÆJSONNode
::
	$FëchAºay
(Ëc⁄° 
js⁄_nŸhrow
 {

178 
	`JSON_ASSERT_SAFE
(!
_°rög
.
	`em±y
(), 
	`JSON_TEXT
("JSONÇodêty≥ i†em±y?"), 
	`NuŒify
(); ;);

179 
	`JSON_ASSERT_SAFE
(
_°rög
[0] =
	`JSON_TEXT
('['), JSON_TEXT("JSONÇodêty≥ d€¢'à°¨àwôhá squ¨êbøckë?"), 
	`NuŒify
(); ;);

180 
	`JSON_ASSERT_SAFE
(
_°rög
[_°rög.
	`Àngth
(Ë- 1] =
	`JSON_TEXT
(']'), JSON_TEXT("JSONÇodêty≥ d€¢'àíd wôhá squ¨êbøckë?"), 
	`NuŒify
(); ;);

181 
JSONW‹kî
::
	`DoAºay
(
this
, 
_°rög
);

182 
	`˛órSåög
(
_°rög
);

183 
	}
}

188 
	göã∫ÆJSONNode
::
	$FëchNumbî
(Ëc⁄° 
js⁄_nŸhrow
 {

189 #ifde‡
JSON_STRICT


190 
_vÆue
.
_numbî
 = 
NumbîToSåög
::
	`_©of
(
_°rög
.
	`c_°r
());

192 #ifde‡
JSON_UNICODE


193 c⁄° 
size_t
 
Àn
 = 
_°rög
.
	`Àngth
();

194 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
JSON_SAFE
)

195 c⁄° 
size_t
 
byãs
 = (
Àn
 * ((
js⁄_ch¨
) / ())) + 1;

196 
js⁄_auto
<> 
	`ãmp
(
byãs
);

197 
size_t
 
ªs
;

198 
î∫o_t
 
îr
 = 
	`wc°ombs_s
(&
ªs
, 
ãmp
.
±r
, 
byãs
, 
_°rög
.
	`c_°r
(), 
Àn
);

199 i‡(
îr
 != 0){

200 
_vÆue
.
_numbî
 = (
js⁄_numbî
)0.0;

203 #ñi‡
	`deföed
(
JSON_SAFE
)

204 c⁄° 
size_t
 
byãs
 = (
Àn
 * ((
js⁄_ch¨
) / ())) + 1;

205 
js⁄_auto
<> 
	`ãmp
(
byãs
);

206 
size_t
 
ªs
 = 
°d
::
	`wc°ombs
(
ãmp
.
±r
, 
_°rög
.
	`c_°r
(), 
Àn
);

207 i‡(
ªs
 =(
size_t
)-1){

208 
_vÆue
.
_numbî
 = (
js⁄_numbî
)0.0;

212 
js⁄_auto
<> 
	`ãmp
(
Àn
 + 1);

213 
size_t
 
ªs
 = 
°d
::
	`wc°ombs
(
ãmp
.
±r
, 
_°rög
.
	`c_°r
(), 
Àn
);

215 
ãmp
.
±r
[
ªs
] = '\0';

216 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
°d
::
	`©of
(
ãmp
.
±r
);

218 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
°d
::
	`©of
(
_°rög
.
	`c_°r
());

221 #if((!
	`deföed
(
JSON_CASTABLE
Ë&& deföed(
JSON_LESS_MEMORY
)Ë&& !deföed(
JSON_WRITE_PRIORITY
))

222 
	`˛órSåög
(
_°rög
);

224 
	}
}

226 #i‡!
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

227 
	göã∫ÆJSONNode
::
	$Fëch
(Ëc⁄° 
js⁄_nŸhrow
 {

228 i‡(
„tched
) ;

229 
	`ty≥
()){

230 
JSON_STRING
:

231 
	`FëchSåög
();

233 
JSON_NODE
:

234 
	`FëchNode
();

236 
JSON_ARRAY
:

237 
	`FëchAºay
();

239 
JSON_NUMBER
:

240 
	`FëchNumbî
();

242 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


244 
	`JSON_FAIL
(
	`JSON_TEXT
("Fetchingán unknownÅype"));

245 
	`NuŒify
();

248 
„tched
 = 
åue
;

249 
	}
}

252 
	göã∫ÆJSONNode
::
	$Së
(c⁄° 
js⁄_°rög
 & 
vÆ
Ë
js⁄_nŸhrow
 {

253 
	`makeNŸC⁄èöî
();

254 
_ty≥
 = 
JSON_STRING
;

255 
_°rög
 = 
vÆ
;

256 
	`shrökSåög
(
_°rög
);

257 
_°rög_ícoded
 = 
åue
;

258 
	`SëFëched
(
åue
);

259 
	}
}

261 #ifde‡
JSON_LIBRARY


262 
	göã∫ÆJSONNode
::
	$Së
(
js⁄_öt_t
 
vÆ
Ë
js⁄_nŸhrow
 {

263 
	`makeNŸC⁄èöî
();

264 
_ty≥
 = 
JSON_NUMBER
;

265 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
vÆ
;

266 #if(
	`deföed
(
JSON_CASTABLE
Ë|| !deföed(
JSON_LESS_MEMORY
Ë|| deföed(
JSON_WRITE_PRIORITY
))

267 
_°rög
 = 
NumbîToSåög
::
_ôﬂ
<
js⁄_öt_t
>(
vÆ
);

269 
	`˛órSåög
(
_°rög
);

271 
	`SëFëched
(
åue
);

272 
	}
}

274 
	göã∫ÆJSONNode
::
	$Së
(
js⁄_numbî
 
vÆ
Ë
js⁄_nŸhrow
 {

275 
	`makeNŸC⁄èöî
();

276 
_ty≥
 = 
JSON_NUMBER
;

277 
_vÆue
.
_numbî
 = 
vÆ
;

278 #if(
	`deföed
(
JSON_CASTABLE
Ë|| !deföed(
JSON_LESS_MEMORY
Ë|| deföed(
JSON_WRITE_PRIORITY
))

279 
_°rög
 = 
NumbîToSåög
::
	`_·ﬂ
(
vÆ
);

281 
	`˛órSåög
(
_°rög
);

283 
	`SëFëched
(
åue
);

284 
	}
}

286 #if(
deföed
(
JSON_CASTABLE
Ë|| !deföed(
JSON_LESS_MEMORY
Ë|| deföed(
JSON_WRITE_PRIORITY
))

287 
	#SET
(
c⁄vîãr
, 
ty≥
)\

288 
öã∫ÆJSONNode
::
	`Së
(
ty≥
 
vÆ
Ë
js⁄_nŸhrow
 {\

289 
	`makeNŸC⁄èöî
();\

290 
_ty≥
 = 
JSON_NUMBER
;\

291 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
vÆ
;\

292 
_°rög
 = 
NumbîToSåög
::
c⁄vîãr
<
ty≥
>(
vÆ
);\

293 
	`SëFëched
(
åue
);\

294 }

	)

295 
	#SET_FLOAT
(
ty≥
) \

296 
öã∫ÆJSONNode
::
	`Së
(
ty≥
 
vÆ
Ë
js⁄_nŸhrow
 {\

297 
	`makeNŸC⁄èöî
();\

298 
_ty≥
 = 
JSON_NUMBER
;\

299 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
vÆ
;\

300 
_°rög
 = 
NumbîToSåög
::
	`_·ﬂ
(
_vÆue
.
_numbî
);\

301 
	`SëFëched
(
åue
);\

302 }

	)

304 
	#SET
(
c⁄vîãr
, 
ty≥
)\

305 
öã∫ÆJSONNode
::
	`Së
(
ty≥
 
vÆ
Ë
js⁄_nŸhrow
 {\

306 
	`makeNŸC⁄èöî
();\

307 
_ty≥
 = 
JSON_NUMBER
;\

308 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
vÆ
;\

309 
	`˛órSåög
(
_°rög
);\

310 
	`SëFëched
(
åue
);\

311 }

	)

312 
	#SET_FLOAT
(
ty≥
) \

313 
öã∫ÆJSONNode
::
	`Së
(
ty≥
 
vÆ
Ë
js⁄_nŸhrow
 {\

314 
	`makeNŸC⁄èöî
();\

315 
_ty≥
 = 
JSON_NUMBER
;\

316 
_vÆue
.
_numbî
 = (
js⁄_numbî
)
vÆ
;\

317 
	`˛órSåög
(
_°rög
);\

318 
	`SëFëched
(
åue
);\

319 }

	)

321 
	#SET_INTEGER
(
ty≥
Ë
	`SET
(
_ôﬂ
,Åy≥ËSET(
_uôﬂ
, ty≥)

	)

323 
	$SET_INTEGER
()

324 
	$SET_INTEGER
()

325 
	$SET_INTEGER
()

326 
	$SET_INTEGER
()

327 #i‚de‡
JSON_ISO_STRICT


328 
	$SET_INTEGER
()

329 
	$SET_FLOAT
()

332 
	$SET_FLOAT
()

333 
	$SET_FLOAT
()

336 
öã∫ÆJSONNode
::
	$Së
(
boﬁ
 
vÆ
Ë
js⁄_nŸhrow
 {

337 
	`makeNŸC⁄èöî
();

338 
_ty≥
 = 
JSON_BOOL
;

339 
_vÆue
.
_boﬁ
 = 
vÆ
;

340 #if(
	`deföed
(
JSON_CASTABLE
Ë|| !deföed(
JSON_LESS_MEMORY
Ë|| deföed(
JSON_WRITE_PRIORITY
))

341 
_°rög
 = 
vÆ
 ? 
	`js⁄_globÆ
(
CONST_TRUE
Ë: js⁄_globÆ(
CONST_FALSE
);

343 
	`SëFëched
(
åue
);

344 
	}
}

346 
boﬁ
 
	göã∫ÆJSONNode
::
	$IsEquÆTo
(c⁄° 
öã∫ÆJSONNode
 * 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

347 i‡(
this
 =
vÆ
Ë 
åue
;

348 i‡(
	`ty≥
(Ë!
vÆ
 ->Åy≥()Ë 
Ál£
;

349 i‡(
_«me
 !
vÆ
 -> _«meË 
Ál£
;

350 i‡(
	`ty≥
(Ë=
JSON_NULL
Ë 
åue
;

351 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

352 
	`Fëch
();

353 
vÆ
 -> 
	`Fëch
();

355 
	`ty≥
()){

356 
JSON_STRING
:

357  
vÆ
 -> 
_°rög
 == _string;

358 
JSON_NUMBER
:

359  
	`_ÊﬂtsAªEquÆ
(
vÆ
 -> 
_vÆue
.
_numbî
, _value._number);

360 
JSON_BOOL
:

361  
vÆ
 -> 
_vÆue
.
_boﬁ
 == _value._bool;

364 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NODE
 ||Åy≥(Ë=
JSON_ARRAY
, 
	`JSON_TEXT
("Checking forÉquality,Çot sure whatÅype"));

365 i‡(
CHILDREN
 -> 
	`size
(Ë!
vÆ
 -> CHILDREN -> size()Ë 
Ál£
;

368 
JSONNode
 ** 
vÆru¬î
 = 
vÆ
 -> 
CHILDREN
 -> 
	`begö
();

369 
	`js⁄_f‹óch
(
CHILDREN
, 
myru¬î
){

370 
	`JSON_ASSERT
(*
myru¬î
 !
NULL
, 
	`js⁄_globÆ
(
ERROR_NULL_IN_CHILDREN
));

371 
	`JSON_ASSERT
(*
vÆru¬î
 !
NULL
, 
	`js⁄_globÆ
(
ERROR_NULL_IN_CHILDREN
));

372 
	`JSON_ASSERT
(
vÆru¬î
 !
vÆ
 -> 
CHILDREN
 -> 
	`íd
(), 
	`JSON_TEXT
("atÅheÉnd of other one's children, butÅhey'reÅhe same size?"));

373 i‡(**
myru¬î
 !**
vÆru¬î
Ë 
Ál£
;

374 ++
vÆru¬î
;

376  
åue
;

377 
	}
}

379 
	göã∫ÆJSONNode
::
	$NuŒify
(Ëc⁄° 
js⁄_nŸhrow
 {

380 
_ty≥
 = 
JSON_NULL
;

381 #if(
	`deföed
(
JSON_CASTABLE
Ë|| !deföed(
JSON_LESS_MEMORY
Ë|| deföed(
JSON_WRITE_PRIORITY
))

382 
_°rög
 = 
	`js⁄_globÆ
(
CONST_NULL
);

384 
	`˛órSåög
(
_°rög
);

386 
	`SëFëched
(
åue
);

387 
	}
}

389 #ifde‡
JSON_MUTEX_CALLBACKS


390 
	#JSON_MUTEX_COPY
 ,
mylock


	)

392 
	#JSON_MUTEX_COPY


	)

395 #ifde‡
JSON_LIBRARY


396 
	göã∫ÆJSONNode
::
	$push_back
(
JSONNode
 * 
node
Ë
js⁄_nŸhrow
 {

398 
öã∫ÆJSONNode
::
	$push_back
(c⁄° 
JSONNode
 & 
node
Ë
js⁄_nŸhrow
 {

400 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("push_back"), ;);

401 #ifde‡
JSON_LIBRARY


402 #ifde‡
JSON_MUTEX_CALLBACKS


403 i‡(
mylock
 !0Ë
node
 -> 
	`£t_muãx
(mylock);

405 
CHILDREN
 -> 
	`push_back
(
node
);

407 
CHILDREN
 -> 
	`push_back
(
JSONNode
::
	`√wJSONNode
(
node
 
JSON_MUTEX_COPY
));

409 
	}
}

411 
	göã∫ÆJSONNode
::
	$push_‰⁄t
(c⁄° 
JSONNode
 & 
node
Ë
js⁄_nŸhrow
 {

412 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("push_front"), ;);

413 
CHILDREN
 -> 
	`push_‰⁄t
(
JSONNode
::
	`√wJSONNode
(
node
 
JSON_MUTEX_COPY
));

414 
	}
}

416 
JSONNode
 * 
	göã∫ÆJSONNode
::
	$p›_back
(
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
 {

417 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("pop_back"),  0;);

418 
JSONNode
 * 
ªsu…
 = (*
CHILDREN
)[
pos
];

419 
JSONNode
 ** 
ãmp
 = 
CHILDREN
 -> 
	`begö
(Ë+ 
pos
;

420 
CHILDREN
 -> 
	`îa£
(
ãmp
);

421  
ªsu…
;

422 
	}
}

424 
JSONNode
 * 
	göã∫ÆJSONNode
::
	$p›_back
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

425 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("pop_back(str)"),  0;);

426 i‡(
JSONNode
 ** 
ªs
 = 
	`©
(
«me_t
)){

427 
JSONNode
 * 
ªsu…
 = *
ªs
;

428 
CHILDREN
 -> 
	`îa£
(
ªs
);

429  
ªsu…
;

432 
	}
}

434 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


435 
JSONNode
 * 
	göã∫ÆJSONNode
::
	$p›_back_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

436 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("pop_back_nocase"),  0;);

437 i‡(
JSONNode
 ** 
ªs
 = 
	`©_noˇ£
(
«me_t
)){

438 
JSONNode
 * 
ªsu…
 = *
ªs
;

439 
CHILDREN
 -> 
	`îa£
(
ªs
);

440  
ªsu…
;

443 
	}
}

446 
JSONNode
 ** 
	göã∫ÆJSONNode
::
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

447 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("at"),  0;);

448 
	`Fëch
();

449 
	`js⁄_f‹óch
(
CHILDREN
, 
myru¬î
){

450 
	`JSON_ASSERT
(*
myru¬î
 !
NULL
, 
	`js⁄_globÆ
(
ERROR_NULL_IN_CHILDREN
));

451 i‡(
	`js⁄_u∆ikñy
((*
myru¬î
Ë-> 
	`«me
(Ë=
«me_t
))  myrunner;

454 
	}
}

456 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


457 
boﬁ
 
	göã∫ÆJSONNode
::
	$AªEquÆNoCa£
(c⁄° 
js⁄_ch¨
 * 
ch_⁄e
, c⁄° js⁄_ch¨ * 
ch_two
Ë
js⁄_nŸhrow
 {

458 *
ch_⁄e
){

459 c⁄° 
js⁄_ch¨
 
c_⁄e
 = *
ch_⁄e
;

460 c⁄° 
js⁄_ch¨
 
c_two
 = *
ch_two
;

461 i‡(
c_⁄e
 !
c_two
){

462 i‡((
c_two
 > 64) && (c_two < 91)){

463 i‡(
c_⁄e
 !(
js⁄_ch¨
)(
c_two
 + 32)Ë 
Ál£
;

464 } i‡((
c_two
 > 96) && (c_two < 123)){

465 i‡(
c_⁄e
 !(
js⁄_ch¨
)(
c_two
 - 32)Ë 
Ál£
;

467  
Ál£
;

470 ++
ch_⁄e
;

471 ++
ch_two
;

474  *
ch_two
 == '\0';

475 
	}
}

477 
JSONNode
 ** 
	göã∫ÆJSONNode
::
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
 {

478 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("at_nocase"),  0;);

479 
	`Fëch
();

480 
	`js⁄_f‹óch
(
CHILDREN
, 
myru¬î
){

481 
	`JSON_ASSERT
(*
myru¬î
, 
	`js⁄_globÆ
(
ERROR_NULL_IN_CHILDREN
));

482 i‡(
	`js⁄_u∆ikñy
(
	`AªEquÆNoCa£
((*
myru¬î
Ë-> 
	`«me
().
	`c_°r
(), 
«me_t
.c_str())))  myrunner;

485 
	}
}

488 #i‡!
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

489 
	göã∫ÆJSONNode
::
	$¥ï¨£
(Ë
js⁄_nŸhrow
 {

490 
	`Fëch
();

491 i‡(
	`isC⁄èöî
()){

492 
	`js⁄_f‹óch
(
CHILDREN
, 
myru¬î
){

493 (*
myru¬î
Ë-> 
	`¥ï¨£
();

496 
	}
}

499 
	göã∫ÆJSONNode
::
›î©‹
 
	$boﬁ
(Ëc⁄° 
js⁄_nŸhrow
 {

500 
	`Fëch
();

501 #ifde‡
JSON_CASTABLE


502 
	`ty≥
()){

503 
JSON_NUMBER
:

504  !
	`_ÊﬂtsAªEquÆ
(
_vÆue
.
_numbî
, (
js⁄_numbî
)0.0);

505 
JSON_NULL
:

506  
Ál£
;

509 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_BOOL
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(bool)"));

510  
_vÆue
.
_boﬁ
;

511 
	}
}

513 #ifde‡
JSON_LIBRARY


514 
	göã∫ÆJSONNode
::
›î©‹
 
	$js⁄_numbî
(Ëc⁄° 
js⁄_nŸhrow
 {

515 
	`Fëch
();

516 #ifde‡
JSON_CASTABLE


517 
	`ty≥
()){

518 
JSON_NULL
:

519  (
js⁄_numbî
)0.0;

520 
JSON_BOOL
:

521  (
js⁄_numbî
)(
_vÆue
.
_boﬁ
 ? 1.0 : 0.0);

522 
JSON_STRING
:

523 
	`FëchNumbî
();

526 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("as_float"));

527  (
js⁄_numbî
)
_vÆue
.
_numbî
;

528 
	}
}

530 
	göã∫ÆJSONNode
::
›î©‹
 
	$js⁄_öt_t
(Ëc⁄° 
js⁄_nŸhrow
 {

531 
	`Fëch
();

532 #ifde‡
JSON_CASTABLE


533 
	`ty≥
()){

534 
JSON_NULL
:

536 
JSON_BOOL
:

537  
_vÆue
.
_boﬁ
 ? 1 : 0;

538 
JSON_STRING
:

539 
	`FëchNumbî
();

542 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("as_int"));

543 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)((
js⁄_öt_t
)_vÆue._numbî), 
	`js⁄_°rög
(
	`JSON_TEXT
("as_öàwû»åunˇã ")Ë+ 
_°rög
);

544  (
js⁄_öt_t
)
_vÆue
.
_numbî
;

545 
	}
}

547 #i‚de‡
JSON_ISO_STRICT


548 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
 {

549 
	`Fëch
();

550 #ifde‡
JSON_CASTABLE


551 
	`ty≥
()){

552 
JSON_NULL
:

554 
JSON_BOOL
:

555  ()(
_vÆue
.
_boﬁ
 ? 1.0 : 0.0);

556 
JSON_STRING
:

557 
	`FëchNumbî
();

560 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(long double)"));

561  ()
_vÆue
.
_numbî
;

562 
	}
}

564 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
 {

565 
	`Fëch
();

566 #ifde‡
JSON_CASTABLE


567 
	`ty≥
()){

568 
JSON_NULL
:

570 
JSON_BOOL
:

571  ()(
_vÆue
.
_boﬁ
 ? 1.0 : 0.0);

572 
JSON_STRING
:

573 
	`FëchNumbî
();

576 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(double)"));

577  ()
_vÆue
.
_numbî
;

578 
	}
}

582 #ifde‡
JSON_ISO_STRICT


583 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow


585 
öã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow


588 
	`Fëch
();

589 #ifde‡
JSON_CASTABLE


590 
	`ty≥
()){

591 
JSON_NULL
:

593 
JSON_BOOL
:

594  
_vÆue
.
_boﬁ
 ? 1 : 0;

595 
JSON_STRING
:

596 
	`FëchNumbî
();

599 #ifde‡
JSON_ISO_STRICT


600 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(long)"));

601 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 
LONG_MIN
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
("long"));

602 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
LONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("long"));

603 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)(()_vÆue._numbî), 
	`js⁄_°rög
(
	`JSON_TEXT
("÷⁄gËwû»åunˇã ")Ë+ 
_°rög
);

604  ()
_vÆue
.
_numbî
;

606 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(longÜong)"));

607 #ifde‡
LONG_LONG_MAX


608 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
LONG_LONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("longÜong"));

609 #ñi‡
	`deföed
(
LLONG_MAX
)

610 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
LLONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("longÜong"));

612 #ifde‡
LONG_LONG_MIN


613 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 
LONG_LONG_MIN
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
("longÜong"));

614 #ñi‡
	`deföed
(
LLONG_MAX
)

615 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 
LLONG_MIN
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
("longÜong"));

618 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)(()_vÆue._numbî), 
	`js⁄_°rög
(
	`JSON_TEXT
("÷⁄gÜ⁄gËwû»åunˇã ")Ë+ 
_°rög
);

619  ()
_vÆue
.
_numbî
;

621 
	}
}

623 #ifde‡
JSON_ISO_STRICT


624 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow


626 
öã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow


629 
	`Fëch
();

630 #ifde‡
JSON_CASTABLE


631 
	`ty≥
()){

632 
JSON_NULL
:

634 
JSON_BOOL
:

635  
_vÆue
.
_boﬁ
 ? 1 : 0;

636 
JSON_STRING
:

637 
	`FëchNumbî
();

640 #ifde‡
JSON_ISO_STRICT


641 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(unsignedÜong)"));

642 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 0, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
("unsignedÜong"));

643 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
ULONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("unsignedÜong"));

644 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)(()_vÆue._numbî), 
	`js⁄_°rög
(
	`JSON_TEXT
("(unsigídÜ⁄gËwû»åunˇã ")Ë+ 
_°rög
);

645  ()
_vÆue
.
_numbî
;

647 
	`JSON_ASSERT
(
	`ty≥
(Ë=
JSON_NUMBER
, 
	`js⁄_globÆ
(
ERROR_UNDEFINED
Ë+ 
	`JSON_TEXT
("(unsignedÜongÜong)"));

648 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 0, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
("unsignedÜongÜong"));

649 #ifde‡
ULONG_LONG_MAX


650 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
ULONG_LONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("unsignedÜongÜong"));

651 #ñi‡
	`deföed
(
ULLONG_MAX
)

652 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
ULLONG_MAX
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
("unsignedÜongÜong"));

654 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)(()_vÆue._numbî), 
	`js⁄_°rög
(
	`JSON_TEXT
("(unsig√dÜ⁄gÜ⁄gËwû»åunˇã ")Ë+ 
_°rög
);

655  ()
_vÆue
.
_numbî
;

657 
	}
}

664 #ifde‡
JSON_MEMORY_POOL


665 
	~"JSONMem‹yPoﬁ.h
"

666 
	gmem‹y_poﬁ
<
	gINTERNALNODEPOOL
> 
	gjs⁄_öã∫Æ_mempoﬁ
;

669 
	göã∫ÆJSONNode
::
	$dñëeI¡î«l
(
öã∫ÆJSONNode
 * 
±r
Ë
js⁄_nŸhrow
 {

670 #ifde‡
JSON_MEMORY_POOL


671 
±r
 -> ~
	`öã∫ÆJSONNode
();

672 
js⁄_öã∫Æ_mempoﬁ
.
	`dóŒoˇã
((*)
±r
);

673 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

674 
±r
 -> ~
	`öã∫ÆJSONNode
();

675 
libjs⁄_‰ì
<
öã∫ÆJSONNode
>(
±r
);

677 
dñëe
 
±r
;

679 
	}
}

681 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$√wI¡î«l
(
myty≥
) {

682 #ifde‡
JSON_MEMORY_POOL


683  
	`√w
((
öã∫ÆJSONNode
*)
js⁄_öã∫Æ_mempoﬁ
.
	`Æloˇã
()Ë
	`öã∫ÆJSONNode
(
myty≥
);

684 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

685  
	`√w
(
js⁄_mÆloc
<
öã∫ÆJSONNode
>(1)Ë
	`öã∫ÆJSONNode
(
myty≥
);

687  
√w
 
	`öã∫ÆJSONNode
(
myty≥
);

689 
	}
}

691 #ifde‡
JSON_READ_PRIORITY


692 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$√wI¡î«l
(c⁄° 
js⁄_°rög
 & 
u≈¨£d
) {

693 #ifde‡
JSON_MEMORY_POOL


694  
	`√w
((
öã∫ÆJSONNode
*)
js⁄_öã∫Æ_mempoﬁ
.
	`Æloˇã
()Ë
	`öã∫ÆJSONNode
(
u≈¨£d
);

695 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

696  
	`√w
(
js⁄_mÆloc
<
öã∫ÆJSONNode
>(1)Ë
	`öã∫ÆJSONNode
(
u≈¨£d
);

698  
√w
 
	`öã∫ÆJSONNode
(
u≈¨£d
);

700 
	}
}

702 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$√wI¡î«l
(c⁄° 
js⁄_°rög
 & 
«me_t
, c⁄° js⁄_°rög & 
vÆue_t
) {

703 #ifde‡
JSON_MEMORY_POOL


704  
	`√w
((
öã∫ÆJSONNode
*)
js⁄_öã∫Æ_mempoﬁ
.
	`Æloˇã
()Ë
	`öã∫ÆJSONNode
(
«me_t
, 
vÆue_t
);

705 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

706  
	`√w
(
js⁄_mÆloc
<
öã∫ÆJSONNode
>(1)Ë
	`öã∫ÆJSONNode
(
«me_t
, 
vÆue_t
);

708  
√w
 
	`öã∫ÆJSONNode
(
«me_t
, 
vÆue_t
);

710 
	}
}

714 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$√wI¡î«l
(c⁄° 
öã∫ÆJSONNode
 & 
‹ig
) {

715 #ifde‡
JSON_MEMORY_POOL


716  
	`√w
((
öã∫ÆJSONNode
*)
js⁄_öã∫Æ_mempoﬁ
.
	`Æloˇã
()Ë
	`öã∫ÆJSONNode
(
‹ig
);

717 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

718  
	`√w
(
js⁄_mÆloc
<
öã∫ÆJSONNode
>(1)Ë
	`öã∫ÆJSONNode
(
‹ig
);

720  
√w
 
	`öã∫ÆJSONNode
(
‹ig
);

722 
	}
}

724 #ifde‡
JSON_DEBUG


725 #i‚de‡
JSON_LIBRARY


726 
JSONNode
 
	göã∫ÆJSONNode
::
	$Dump
(
size_t
 & 
tŸÆbyãs
Ëc⁄° 
js⁄_nŸhrow
 {

727 
JSONNode
 
	`dum∑ge
(
JSON_NODE
);

728 
dum∑ge
.
	`£t_«me
(
	`JSON_TEXT
("internalJSONNode"));

729 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("this"), ()
this
)));

731 
START_MEM_SCOPE


732 
size_t
 
mem‹y
 = (
öã∫ÆJSONNode
);

733 
mem‹y
 +
_«me
.
	`ˇ∑côy
(Ë* (
js⁄_ch¨
);

734 
mem‹y
 +
_°rög
.
	`ˇ∑côy
(Ë* (
js⁄_ch¨
);

735 i‡(
	`isC⁄èöî
()){

736 
mem‹y
 +(
js⁄Chûdªn
);

737 
mem‹y
 +
CHILDREN
 -> 
	`ˇ∑côy
(Ë* (
JSONNode
*);

739 #ifde‡
JSON_COMMENTS


740 
mem‹y
 +
_commít
.
	`ˇ∑côy
(Ë* (
js⁄_ch¨
);

742 
tŸÆbyãs
 +
mem‹y
;

743 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("byã†u£d"), 
mem‹y
)));

744 
END_MEM_SCOPE


747 #ifde‡
JSON_REF_COUNT


748 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ªfcou¡"), 
ªfcou¡
)));

750 #ifde‡
JSON_MUTEX_CALLBACKS


751 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`DumpMuãx
()));

755 
	#DUMPCASE
(
ty
)\

756 
ty
:\

757 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_type"), JSON_TEXT(#ty))));\

758 ;

	)

760 
	`ty≥
()){

761 
	`DUMPCASE
(
JSON_NULL
)

762 
	`DUMPCASE
(
JSON_STRING
)

763 
	`DUMPCASE
(
JSON_NUMBER
)

764 
	`DUMPCASE
(
JSON_BOOL
)

765 
	`DUMPCASE
(
JSON_ARRAY
)

766 
	`DUMPCASE
(
JSON_NODE
)

768 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_type"), JSON_TEXT("Unknown"))));

771 
JSONNode
 
	`°r
(
JSON_NODE
);

772 
°r
.
	`£t_«me
(
	`JSON_TEXT
("_name"));

773 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`js⁄_°rög
(
	`JSON_TEXT
("vÆue")), 
_«me
)));

774 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("Àngth"), 
_«me
.
	`Àngth
())));

775 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ˇ∑˘iy"), 
_«me
.
	`ˇ∑côy
())));

777 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_«me_ícoded"), 
_«me_ícoded
)));

778 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
°r
));

779 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_°rög_ícoded"), 
_°rög_ícoded
)));

780 
°r
.
	`˛ór
();

781 
°r
.
	`£t_«me
(
	`JSON_TEXT
("_string"));

782 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`js⁄_°rög
(
	`JSON_TEXT
("vÆue")), 
_°rög
)));

783 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("Àngth"), 
_°rög
.
	`Àngth
())));

784 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ˇ∑˘iy"), 
_°rög
.
	`ˇ∑côy
())));

785 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
°r
));

787 i‡((
	`ty≥
(Ë=
JSON_BOOL
Ë|| (ty≥(Ë=
JSON_NUMBER
)){

788 
JSONNode
 
	`unio
(
JSON_NODE
);

789 
unio
.
	`£t_«me
(
	`JSON_TEXT
("_value"));

790 i‡(
	`ty≥
(Ë=
JSON_BOOL
){

791 
unio
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_boﬁ"), 
_vÆue
.
_boﬁ
)));

792 } i‡(
	`ty≥
(Ë=
JSON_NUMBER
){

793 
unio
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("_numbî"), 
_vÆue
.
_numbî
)));

795 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
unio
));

798 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

799 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("„tched"), 
„tched
)));

802 #ifde‡
JSON_COMMENTS


803 
°r
.
	`˛ór
();

804 
°r
.
	`£t_«me
(
	`JSON_TEXT
("_comment"));

805 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("vÆue"), 
_commít
)));

806 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("Àngth"), 
_commít
.
	`Àngth
())));

807 
°r
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ˇ∑˘iy"), 
_commít
.
	`ˇ∑côy
())));

808 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
°r
));

811 i‡(
	`isC⁄èöî
()){

812 
JSONNode
 
	`¨ø
(
JSON_NODE
);

813 
¨ø
.
	`£t_«me
(
	`JSON_TEXT
("Children"));

814 
¨ø
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("size"), 
CHILDREN
 -> 
	`size
())));

815 
¨ø
.
	`push_back
(
	`JSON_NEW
(
	`JSONNode
(
	`JSON_TEXT
("ˇ∑côy"), 
CHILDREN
 -> 
	`ˇ∑côy
())));

816 
JSONNode
 
	`chû
(
JSON_ARRAY
);

817 
chû
.
	`£t_«me
(
	`JSON_TEXT
("array"));

818 
	`js⁄_f‹óch
(
CHILDREN
, 
ô
){

819 
chû
.
	`push_back
(
	`JSON_NEW
((*
ô
Ë-> 
	`dump
(
tŸÆbyãs
)));

821 
¨ø
.
	`push_back
(
	`JSON_NEW
(
chû
));

822 
dum∑ge
.
	`push_back
(
	`JSON_NEW
(
¨ø
));

825  
dum∑ge
;

826 
	}
}

	@libjson/_internal/Source/internalJSONNode.h

1 #i‚de‡
INTERNAL_JSONNODE_H


2 
	#INTERNAL_JSONNODE_H


	)

4 
	~"JSONDebug.h
"

5 
	~"JSONChûdªn.h
"

6 
	~"JSONMem‹y.h
"

7 
	~"JSONGlobÆs.h
"

8 #ifde‡
JSON_DEBUG


9 
	~<˛imôs
>

11 
	~"JSONSh¨edSåög.h
"

13 #ifde‡
JSON_LESS_MEMORY


14 #ifde‡
__GNUC__


15 #¥agm®
∑ck
(
push
, 1)

16 #ñi‡
_MSC_VER


17 #¥agm®
∑ck
(
push
, 
öã∫ÆJSONNode_∑ck
, 1)

30 
˛ass
 
	gJSONNode
;

32 #i‚de‡
JSON_LIBRARY


33 
	#DECL_SET_INTEGER
(
ty≥
Ë
	`Së
—y≥Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
; Së(ty≥Ëjs⁄_nŸhrow js⁄_wrôe_¥i‹ôy;

	)

34 
	#DECL_CAST_OP
(
ty≥
Ë
›î©‹
 
	`ty≥
(Ëc⁄° 
js⁄_nŸhrow
; o≥øt‹ ty≥(Ëc⁄° js⁄_nŸhrow;

	)

37 #ifde‡
JSON_MUTEX_CALLBACKS


38 
	#öôülizeMuãx
(
x
Ë,
	`mylock
(x)

	)

40 
	#öôülizeMuãx
(
x
)

	)

43 #i‡
deföed
(
JSON_PREPARSE
Ë|| !deföed(
JSON_READ_PRIORITY
)

44 
	#SëFëched
(
b
Ë()0

	)

45 
	#Fëch
(Ë()0

	)

46 
	#öôülizeFëch
(
x
)

	)

48 
	#öôülizeFëch
(
x
Ë,
	`„tched
(x)

	)

51 #ifde‡
JSON_REF_COUNT


52 
	#öôülizeRefCou¡
(
x
Ë,
	`ªfcou¡
(x)

	)

54 
	#öôülizeRefCou¡
(
x
)

	)

57 #ifde‡
JSON_COMMENTS


58 
	#öôülizeCommít
(
x
Ë,
	`_commít
(x)

	)

60 
	#öôülizeCommít
(
x
)

	)

63 #ifde‡
JSON_LESS_MEMORY


64 
	#CHILDREN
 
_vÆue
.
Chûdªn


	)

65 
	#DELETE_CHILDREN
()\

66 i‡(
	`isC⁄èöî
()){\

67 
js⁄Chûdªn
::
	`dñëeChûdªn
(
CHILDREN
);\

68 }

	)

69 
	#CHILDREN_TO_NULL
(Ë()0

	)

70 
	#öôülizeChûdªn
(
x
)

	)

72 
	#CHILDREN
 
Chûdªn


	)

73 
	#DELETE_CHILDREN
()\

74 i‡(
CHILDREN
 !0Ë
js⁄Chûdªn
::
	`dñëeChûdªn
(CHILDREN);

	)

75 
	#CHILDREN_TO_NULL
(Ë
CHILDREN
 = 0

	)

76 
	#makeNŸC⁄èöî
(Ë()0

	)

77 
	#makeC⁄èöî
(Ëi‡(!
CHILDREN
ËCHILDREN = 
js⁄Chûdªn
::
	`√wChûdªn
()

	)

78 
	#öôülizeChûdªn
(
x
Ë,
	`CHILDREN
(x)

	)

81 ˛as†
	cöã∫ÆJSONNode
 {

82 
	mpublic
:

83 
LIBJSON_OBJECT
(
öã∫ÆJSONNode
);

84 
	$öã∫ÆJSONNode
(
myty≥
 = 
JSON_NULL
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

85 #ifde‡
JSON_READ_PRIORITY


86 
	$öã∫ÆJSONNode
(c⁄° 
js⁄_°rög
 & 
u≈¨£d
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

87 
	$öã∫ÆJSONNode
(c⁄° 
js⁄_°rög
 & 
«me_t
, c⁄° js⁄_°rög & 
vÆue_t
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

89 
	$öã∫ÆJSONNode
(c⁄° 
öã∫ÆJSONNode
 & 
‹ig
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

90 
öã∫ÆJSONNode
 & 
›î©‹
 = (c⁄° i¡î«lJSONNodê&Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

91 ~
	$öã∫ÆJSONNode
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

93 
öã∫ÆJSONNode
 * 
	$√wI¡î«l
(
myty≥
 = 
JSON_NULL
Ë
js⁄_hŸ
;

94 #ifde‡
JSON_READ_PRIORITY


95 
öã∫ÆJSONNode
 * 
	$√wI¡î«l
(c⁄° 
js⁄_°rög
 & 
u≈¨£d
Ë
js⁄_hŸ
;

96 
öã∫ÆJSONNode
 * 
	$√wI¡î«l
(c⁄° 
js⁄_°rög
 & 
«me_t
, c⁄° js⁄_°rög & 
vÆue_t
Ë
js⁄_hŸ
;

98 
öã∫ÆJSONNode
 * 
	$√wI¡î«l
(c⁄° 
öã∫ÆJSONNode
 & 
‹ig
Ë
js⁄_hŸ
;

99 
	$dñëeI¡î«l
(
öã∫ÆJSONNode
 * 
±r
Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

101 
js⁄_ödex_t
 
	$size
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

102 
boﬁ
 
	$em±y
(Ëc⁄° 
js⁄_nŸhrow
;

103 
	$ty≥
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

105 
js⁄_°rög
 
	$«me
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

106 
	$£äame
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

107 #ifde‡
JSON_COMMENTS


108 
	$£tcommít
(c⁄° 
js⁄_°rög
 & 
commít
Ë
js⁄_nŸhrow
;

109 
js⁄_°rög
 
	$gëcommít
(Ëc⁄° 
js⁄_nŸhrow
;

112 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& 
	$deföed
(
JSON_READ_PRIORITY
)

113 
	$¥ï¨£
(Ë
js⁄_nŸhrow
;

116 #ifde‡
JSON_LIBRARY


117 
	$push_back
(
JSONNode
 * 
node
Ë
js⁄_nŸhrow
;

119 
	$push_back
(c⁄° 
JSONNode
 & 
node
Ë
js⁄_nŸhrow
;

121 
	$ª£rve
(
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow
;

122 
	$push_‰⁄t
(c⁄° 
JSONNode
 & 
node
Ë
js⁄_nŸhrow
;

123 
JSONNode
 * 
	$p›_back
(
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
;

124 
JSONNode
 * 
	$p›_back
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

125 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


126 
JSONNode
 * 
	$p›_back_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

129 
JSONNode
 * 
	$©
(
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
;

131 
JSONNode
 ** 
	$©
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

132 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


133 
JSONNode
 ** 
	$©_noˇ£
(c⁄° 
js⁄_°rög
 & 
«me_t
Ë
js⁄_nŸhrow
;

136 
	$Së
(c⁄° 
js⁄_°rög
 & 
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

137 #ifde‡
JSON_LIBRARY


138 
	$Së
(
js⁄_numbî
 
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

139 
	$Së
(
js⁄_öt_t
 
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

140 
›î©‹
 
	$js⁄_öt_t
(Ëc⁄° 
js⁄_nŸhrow
;

141 
›î©‹
 
	$js⁄_numbî
(Ëc⁄° 
js⁄_nŸhrow
;

143 
	$DECL_SET_INTEGER
()

144 
	$DECL_SET_INTEGER
()

145 
	$DECL_SET_INTEGER
()

146 
	$DECL_SET_INTEGER
()

147 #i‚de‡
JSON_ISO_STRICT


148 
	$DECL_SET_INTEGER
()

149 
	$Së
(
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

151 
	$Së
(
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

152 
	$Së
(
vÆ
Ë
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

155 
	$DECL_CAST_OP
()

156 
	$DECL_CAST_OP
()

157 
	$DECL_CAST_OP
()

158 
	$DECL_CAST_OP
()

159 #i‚de‡
JSON_ISO_STRICT


160 
	$DECL_CAST_OP
()

161 
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
;

163 
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
;

164 
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
;

166 
›î©‹
 
	$js⁄_°rög
()c⁄° 
js⁄_nŸhrow
;

167 
›î©‹
 
	$boﬁ
(Ëc⁄° 
js⁄_nŸhrow
;

168 
	$Së
(
boﬁ
 
vÆ
Ë
js⁄_nŸhrow
;

170 
boﬁ
 
	$IsEquÆTo
(c⁄° 
js⁄_°rög
 & 
vÆ
Ëc⁄° 
js⁄_nŸhrow
;

171 
boﬁ
 
	$IsEquÆTo
(
boﬁ
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
;

172 
boﬁ
 
	$IsEquÆTo
(c⁄° 
öã∫ÆJSONNode
 * 
vÆ
Ëc⁄° 
js⁄_nŸhrow
;

174 
ãm∂©e
<
ty≥«me
 
T
>

175 
boﬁ
 
	$IsEquÆToNum
(
T
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
;

177 
öã∫ÆJSONNode
 * 
	$öcRef
(Ë
js⁄_nŸhrow
;

178 #ifde‡
JSON_REF_COUNT


179 
	$decRef
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

180 
boﬁ
 
	$hasNoRe„ªn˚s
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

182 
öã∫ÆJSONNode
 * 
	$makeUnique
(Ë
js⁄_nŸhrow
 
js⁄_hŸ
;

184 
JSONNode
 ** 
	$begö
(Ëc⁄° 
js⁄_nŸhrow
;

185 
JSONNode
 ** 
	$íd
(Ëc⁄° 
js⁄_nŸhrow
;

186 
boﬁ
 
	$Fëched
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_hŸ
;

187 #ifde‡
JSON_MUTEX_CALLBACKS


188 
	$_£t_muãx
(* 
muãx
, 
boﬁ
 
un£t
 = 
åue
Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

189 
	$_un£t_muãx
(Ë
js⁄_nŸhrow
 
js⁄_cﬁd
;

192 #ifde‡
JSON_WRITE_PRIORITY


193 
	$DumpRawSåög
(
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

194 
	$WrôeName
(
boﬁ
 
f‹m©ãd
, boﬁ 
¨øyChûd
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

195 #ifde‡
JSON_ARRAY_SIZE_ON_ONE_LINE


196 
	$WrôeChûdªnO√Löe
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

198 
	$WrôeChûdªn
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

199 
	$WrôeCommít
(
ödít
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

200 
	$Wrôe
(
ödít
, 
boﬁ
 
¨øyChûd
, 
js⁄_°rög
 & 
ouçut
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_wrôe_¥i‹ôy
;

204 
ölöe
 
boﬁ
 
	$isC⁄èöî
(Ëc⁄° 
js⁄_nŸhrow
 {

205  (
_ty≥
 =
JSON_NODE
 || _ty≥ =
JSON_ARRAY
);

207 
ölöe
 
boﬁ
 
	$isNŸC⁄èöî
(Ëc⁄° 
js⁄_nŸhrow
 {

208  (
_ty≥
 !
JSON_NODE
 && _ty≥ !
JSON_ARRAY
);

209 
	}
}

211 #ifde‡
JSON_LESS_MEMORY


212 
ölöe
 
	$makeNŸC⁄èöî
(){

213 i‡(
	`isC⁄èöî
()){

214 
js⁄Chûdªn
::
	`dñëeChûdªn
(
CHILDREN
);

216 
	}
}

217 
ölöe
 
	$makeC⁄èöî
(){

218 i‡(
	`isNŸC⁄èöî
()){

219 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

221 
	}
}

224 
	$NuŒify
(Ëc⁄° 
js⁄_nŸhrow
;

226 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& 
	$deföed
(
JSON_READ_PRIORITY
)

227 
	$SëFëched
(
boﬁ
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 
js⁄_hŸ
;

228 
	$Fëch
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_hŸ
;

231 #ifde‡
JSON_READ_PRIORITY


232 
	$FëchSåög
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

233 
	$FëchNode
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

234 
	$FëchAºay
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

236 
	$FëchNumbî
(Ëc⁄° 
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

238 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


239 
boﬁ
 
	$AªEquÆNoCa£
(c⁄° 
js⁄_ch¨
 * 
ch_⁄e
, c⁄° js⁄_ch¨ * 
ch_two
Ë
js⁄_nŸhrow
 
js⁄_ªad_¥i‹ôy
;

242 
ölöe
 
	$˛ó∫ame
(Ë
js⁄_nŸhrow
 {

243 
	`˛órSåög
(
_«me
);

244 
	}
}

246 #ifde‡
JSON_DEBUG


247 #i‚de‡
JSON_LIBRARY


248 
JSONNode
 
	$Dump
(
size_t
 & 
tŸÆmem‹y
Ëc⁄° 
js⁄_nŸhrow
;

249 
JSONNode
 
	$DumpMuãx
(Ëc⁄° 
js⁄_nŸhrow
;

254 
muèbÀ
 
_ty≥
 
	`BITS
(3);

256 
js⁄_°rög
 
_«me
;

257 
muèbÀ
 
boﬁ
 
_«me_ícoded
 
	`BITS
(1);

259 
muèbÀ
 
js⁄_°rög
 
_°rög
;

260 
muèbÀ
 
boﬁ
 
_°rög_ícoded
 
	`BITS
(1);

263 
	uvÆue_uni⁄_t
 {

264 
boﬁ
 
_boﬁ
 
	`BITS
(1);

265 
js⁄_numbî
 
_numbî
;

266 #ifde‡
JSON_LESS_MEMORY


267 
js⁄Chûdªn
 * 
Chûdªn
;

269 
	}
};

270 
muèbÀ
 
vÆue_uni⁄_t
 
	g_vÆue
;

272 #ifde‡
JSON_MUTEX_CALLBACKS


273 * 
	gmylock
;

276 #ifde‡
JSON_REF_COUNT


277 
size_t
 
ªfcou¡
 
PACKED
(20);

280 #i‡!
deföed
(
JSON_PREPARSE
Ë&& 
	$deföed
(
JSON_READ_PRIORITY
)

281 
muèbÀ
 
boﬁ
 
„tched
 
	`BITS
(1);

284 #ifde‡
JSON_COMMENTS


285 
js⁄_°rög
 
_commít
;

288 #i‚de‡
JSON_LESS_MEMORY


289 
js⁄Chûdªn
 * 
CHILDREN
;

291 
	}
};

293 
ölöe
 
	göã∫ÆJSONNode
::
	$öã∫ÆJSONNode
(
myty≥
Ë
js⁄_nŸhrow
 : 
	`_ty≥
(myty≥), 
	`_«me
(), 
	`_«me_ícoded
(), 
	`_°rög
(), 
	`_°rög_ícoded
(), 
	$_vÆue
()

294 
	$öôülizeMuãx
(0)

295 
	$öôülizeRefCou¡
(1)

296 
	$öôülizeFëch
(
åue
)

297 
	`öôülizeCommít
(
	$js⁄_globÆ
(
EMPTY_JSON_STRING
))

298 
	`öôülizeChûdªn
((
_ty≥
 =
JSON_NODE
 || _ty≥ =
JSON_ARRAY
Ë? 
js⁄Chûdªn
::
	$√wChûdªn
() : 0){

300 
LIBJSON_CTOR
;

302 #ifde‡
JSON_LESS_MEMORY


304 i‡(
	`isC⁄èöî
()){

305 
CHILDREN
 = 
js⁄Chûdªn
::
	`√wChûdªn
();

308 
	}
}

310 
ölöe
 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$öcRef
(Ë
js⁄_nŸhrow
 {

311 #ifde‡
JSON_REF_COUNT


312 ++
ªfcou¡
;

313  
this
;

315  
	`makeUnique
();

317 
	}
}

319 
ölöe
 
js⁄_ödex_t
 
	göã∫ÆJSONNode
::
	$size
(Ëc⁄° 
js⁄_nŸhrow
 {

320 i‡(
	`isNŸC⁄èöî
())  0;

321 
	`Fëch
();

322  
CHILDREN
 -> 
	`size
();

323 
	}
}

325 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$em±y
(Ëc⁄° 
js⁄_nŸhrow
 {

326 i‡(
	`isNŸC⁄èöî
()Ë 
åue
;

327 
	`Fëch
();

328  
CHILDREN
 -> 
	`em±y
();

329 
	}
}

331 
ölöe
 
	göã∫ÆJSONNode
::
	$ty≥
(Ëc⁄° 
js⁄_nŸhrow
 {

332  
_ty≥
;

333 
	}
}

335 
ölöe
 
js⁄_°rög
 
	göã∫ÆJSONNode
::
	$«me
(Ëc⁄° 
js⁄_nŸhrow
 {

336  
_«me
;

337 
	}
}

339 
ölöe
 
	göã∫ÆJSONNode
::
	$£äame
(c⁄° 
js⁄_°rög
 & 
√w«me
Ë
js⁄_nŸhrow
 {

340 #ifde‡
JSON_LESS_MEMORY


341 
	`JSON_ASSERT
(
√w«me
.
	`ˇ∑côy
(Ë=√w«me.
	`Àngth
(), 
	`JSON_TEXT
("name objectÅooÜarge"));

343 
_«me
 = 
√w«me
;

344 
_«me_ícoded
 = 
åue
;

345 
	}
}

347 #ifde‡
JSON_COMMENTS


348 
ölöe
 
	göã∫ÆJSONNode
::
	$£tcommít
(c⁄° 
js⁄_°rög
 & 
commít
Ë
js⁄_nŸhrow
 {

349 
_commít
 = 
commít
;

350 
	}
}

352 
ölöe
 
js⁄_°rög
 
	göã∫ÆJSONNode
::
	$gëcommít
(Ëc⁄° 
js⁄_nŸhrow
 {

353  
_commít
;

354 
	}
}

357 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$IsEquÆTo
(c⁄° 
js⁄_°rög
 & 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

358 i‡(
	`ty≥
(Ë!
JSON_STRING
Ë 
Ál£
;

359 
	`Fëch
();

360  
_°rög
 =
vÆ
;

361 
	}
}

363 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$IsEquÆTo
(
boﬁ
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

364 i‡(
	`ty≥
(Ë!
JSON_BOOL
Ë 
Ál£
;

365 
	`Fëch
();

366  
vÆ
 =
_vÆue
.
_boﬁ
;

367 
	}
}

369 
	gãm∂©e
<
ty≥«me
 
	gT
>

370 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$IsEquÆToNum
(
T
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

371 i‡(
	`ty≥
(Ë!
JSON_NUMBER
Ë 
Ál£
;

372 
	`Fëch
();

373  (
js⁄_numbî
)
vÆ
 =
_vÆue
.
_numbî
;

374 
	}
}

376 #ifde‡
JSON_REF_COUNT


377 
ölöe
 
	göã∫ÆJSONNode
::
	$decRef
(Ë
js⁄_nŸhrow
 {

378 
	`JSON_ASSERT
(
ªfcou¡
 !0, 
	`JSON_TEXT
("decRef oná 0Ñefcount internal"));

379 --
ªfcou¡
;

380 
	}
}

382 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$hasNoRe„ªn˚s
(Ë
js⁄_nŸhrow
 {

383  
ªfcou¡
 == 0;

384 
	}
}

387 
ölöe
 
öã∫ÆJSONNode
 * 
	göã∫ÆJSONNode
::
	$makeUnique
(Ë
js⁄_nŸhrow
 {

388 #ifde‡
JSON_REF_COUNT


389 i‡(
ªfcou¡
 > 1){

390 
	`decRef
();

391  
	`√wI¡î«l
(*
this
);

393 
	`JSON_ASSERT
(
ªfcou¡
 =1, 
	`JSON_TEXT
("makeUnique oná 0Ñefcount internal"));

394  
this
;

396  
	`√wI¡î«l
(*
this
);

398 
	}
}

400 #i‡!
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

401 
ölöe
 
	göã∫ÆJSONNode
::
	$SëFëched
(
boﬁ
 
vÆ
Ëc⁄° 
js⁄_nŸhrow
 {

402 
„tched
 = 
vÆ
;

403 
	}
}

406 
ölöe
 
boﬁ
 
	göã∫ÆJSONNode
::
	$Fëched
(Ëc⁄° 
js⁄_nŸhrow
 {

407 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

408  
„tched
;

410  
åue
;

412 
	}
}

414 
ölöe
 
JSONNode
 ** 
	göã∫ÆJSONNode
::
	$begö
(Ëc⁄° 
js⁄_nŸhrow
 {

415 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("begin"),  0;);

416 
	`Fëch
();

417  
CHILDREN
 -> 
	`begö
();

418 
	}
}

420 
ölöe
 
JSONNode
 ** 
	göã∫ÆJSONNode
::
	$íd
(Ëc⁄° 
js⁄_nŸhrow
 {

421 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("end"),  0;);

422 
	`Fëch
();

423  
CHILDREN
 -> 
	`íd
();

424 
	}
}

426 
ölöe
 
JSONNode
 * 
	göã∫ÆJSONNode
::
	$©
(
js⁄_ödex_t
 
pos
Ë
js⁄_nŸhrow
 {

427 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`JSON_TEXT
("callingát onÇon-containerÅype"),  0;);

428 
	`Fëch
();

429  (*
CHILDREN
)[
pos
];

430 
	}
}

432 #i‡
deföed
(
JSON_LESS_MEMORY
Ë&& deföed(
__GNUC__
)

433 
ölöe
 
	göã∫ÆJSONNode
::
ª£rve
(
js⁄_ödex_t
 
__©åibuã__
((
unu£d
)Ë
siz
Ë
js⁄_nŸhrow


435 
ölöe
 
öã∫ÆJSONNode
::
	$ª£rve
(
js⁄_ödex_t
 
siz
Ë
js⁄_nŸhrow


438 
	`JSON_ASSERT_SAFE
(
	`isC⁄èöî
(), 
	`js⁄_globÆ
(
ERROR_NON_CONTAINER
Ë+ 
	`JSON_TEXT
("reserve"), ;);

439 
	`Fëch
();

440 
js⁄Chûdªn
::
	`ª£rve2
(
CHILDREN
, 
siz
);

441 
	}
}

448 #i‚de‡
JSON_LIBRARY


449 #ifde‡
JSON_ISO_STRICT


450 
	#BASE_CONVERT_TYPE
 

	)

452 
	#BASE_CONVERT_TYPE
 

	)

455 
	#IMP_SMALLER_INT_CAST_OP
(
_ty≥
, 
ty≥_max
, 
ty≥_mö
)\

456 
ölöe
 
öã∫ÆJSONNode
::
›î©‹
 
	`_ty≥
(Ëc⁄° 
js⁄_nŸhrow
 {\

457 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 > 
ty≥_mö
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_LOWER_RANGE
Ë+ 
	`JSON_TEXT
(#_type));\

458 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 < 
ty≥_max
, 
_°rög
 + 
	`js⁄_globÆ
(
ERROR_UPPER_RANGE
Ë+ 
	`JSON_TEXT
(#_type));\

459 
	`JSON_ASSERT
(
_vÆue
.
_numbî
 =(
js⁄_numbî
)((
_ty≥
)(_vÆue._numbî)), 
	`js⁄_°rög
(
	`JSON_TEXT
("(")Ë+ js⁄_°rög(JSON_TEXT(#_ty≥)Ë+ js⁄_°rög(JSON_TEXT("Ëwû»åunˇã ")Ë+ 
_°rög
);\

460  (
_ty≥
)
°©ic_ˇ°
<
BASE_CONVERT_TYPE
>(*
this
);\

461 }

	)

463 
	$IMP_SMALLER_INT_CAST_OP
(, 
CHAR_MAX
, 
CHAR_MIN
)

464 
	$IMP_SMALLER_INT_CAST_OP
(, 
UCHAR_MAX
, 0)

465 
	$IMP_SMALLER_INT_CAST_OP
(, 
SHRT_MAX
, 
SHRT_MIN
)

466 
	$IMP_SMALLER_INT_CAST_OP
(, 
USHRT_MAX
, 0)

467 
	$IMP_SMALLER_INT_CAST_OP
(, 
INT_MAX
, 
INT_MIN
)

468 
	$IMP_SMALLER_INT_CAST_OP
(, 
UINT_MAX
, 0)

470 #i‚de‡
JSON_ISO_STRICT


471 
	$IMP_SMALLER_INT_CAST_OP
(, 
LONG_MAX
, 
LONG_MIN
)

472 
	$IMP_SMALLER_INT_CAST_OP
(, 
ULONG_MAX
, 0)

476 
ölöe
 
öã∫ÆJSONNode
::
›î©‹
 
	$js⁄_°rög
(Ëc⁄° 
js⁄_nŸhrow
 {

477 
	`Fëch
();

478  
_°rög
;

479 
	}
}

482 #i‚de‡
JSON_LIBRARY


483 #i‚de‡
JSON_ISO_STRICT


484 
ölöe
 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
 {

485  
°©ic_ˇ°
<>(°©ic_ˇ°<>(*
this
));

486 
	}
}

487 
ölöe
 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
 {

488  
°©ic_ˇ°
<>(°©ic_ˇ°<>(*
this
));

489 
	}
}

491 
ölöe
 
	göã∫ÆJSONNode
::
›î©‹
 (Ëc⁄° 
js⁄_nŸhrow
 {

492  
°©ic_ˇ°
<>(°©ic_ˇ°<>(*
this
));

493 
	}
}

497 #ifde‡
JSON_LESS_MEMORY


498 #ifde‡
__GNUC__


499 #¥agm®
∑ck
(
p›
)

500 #ñi‡
_MSC_VER


501 #¥agm®
∑ck
(
p›
, 
öã∫ÆJSONNode_∑ck
,)

	@libjson/_internal/Source/libjson.cpp

8 
	~"../../libjs⁄.h
"

9 #ifde‡
JSON_LIBRARY


11 
	~"JSONNode.h
"

12 
	~"JSONW‹kî.h
"

13 
	~"JSONVÆid©‹.h
"

14 
	~"JSONSåóm.h
"

15 
	~"JSONGlobÆs.h
"

16 
	~<°dex˚±
>

17 #ifde‡
JSON_MEMORY_MANAGE


18 
	#MANAGER_INSERT
(
x
Ë
	`js⁄_globÆ
(
NODE_HANDLER
).
	`ö£π
(x)

	)

19 
	#MANAGER_STREAM_INSERT
(
x
Ë
	`js⁄_globÆ
(
STREAM_HANDLER
).
	`ö£π
(x)

	)

21 
	#MANAGER_INSERT
(
x
Ë
	)
x

22 
	#MANAGER_STREAM_INSERT
(
x
Ë
	)
x

25 c⁄° 
js⁄_ch¨
 * 
EMPTY_CSTRING
(
JSON_TEXT
(""));

27 #ifde‡
JSON_MEMORY_POOL


28 
	~"JSONMem‹yPoﬁ.h
"

29 
mem‹y_poﬁ
<
NODEPOOL
> 
js⁄_node_mempoﬁ
;

32 
ölöe
 
js⁄_ch¨
 * 
	$toCSåög
(c⁄° 
js⁄_°rög
 & 
°r
Ë
js⁄_nŸhrow
 {

33 c⁄° 
size_t
 
Àn
 = (
°r
.
	`Àngth
(Ë+ 1Ë* (
js⁄_ch¨
);

34 #ifde‡
JSON_MEMORY_MANAGE


35  (
js⁄_ch¨
 *)
	`js⁄_globÆ
(
STRING_HANDLER
).
	`ö£π
(
°d
::
	`mem˝y
(
js⁄_mÆloc
<js⁄_ch¨>(
Àn
), 
°r
.
	`c_°r
(),Üen));

37  (
js⁄_ch¨
 *)
°d
::
	`mem˝y
(
js⁄_mÆloc
<js⁄_ch¨>(
Àn
), 
°r
.
	`c_°r
(),Üen);

39 
	}
}

41 
ölöe
 
js⁄_ch¨
 * 
	$ÆªadyCSåög
(
js⁄_ch¨
 * 
°r
Ë
js⁄_nŸhrow
 {

42 #ifde‡
JSON_MEMORY_MANAGE


43  (
js⁄_ch¨
 *)
	`js⁄_globÆ
(
STRING_HANDLER
).
	`ö£π
(
°r
);

45  
°r
;

47 
	}
}

52 
	$js⁄_‰ì
(* 
°r
){

53 
	`JSON_ASSERT_SAFE
(
°r
, 
	`JSON_TEXT
("freeingÇullÖtr"), ;);

54 #ifde‡
JSON_MEMORY_MANAGE


55 
	`js⁄_globÆ
(
STRING_HANDLER
).
	`ªmove
(
°r
);

57 
libjs⁄_‰ì
<>(
°r
);

58 
	}
}

60 
	$js⁄_dñëe
(
JSONNODE
 * 
node
){

61 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("deletingÇullÖtr"), ;);

62 #ifde‡
JSON_MEMORY_MANAGE


63 
	`js⁄_globÆ
(
NODE_HANDLER
).
	`ªmove
(
node
);

65 
JSONNode
::
	`dñëeJSONNode
((JSONNodê*)
node
);

66 
	}
}

68 #ifde‡
JSON_MEMORY_MANAGE


69 
	$js⁄_‰ì_Æl
(){

70 
	`js⁄_globÆ
(
STRING_HANDLER
).
	`˛ór
();

71 
	}
}

73 
	$js⁄_dñëe_Æl
(){

74 
	`js⁄_globÆ
(
NODE_HANDLER
).
	`˛ór
();

75 
	}
}

78 #ifde‡
JSON_READ_PRIORITY


79 
JSONNODE
 * 
	$js⁄_∑r£
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

80 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nullÖtrÅo json_parse"),  0;);

81 
js⁄_åy
 {

83  
	`MANAGER_INSERT
(
JSONNode
::
	`√wJSONNode_ShÆlow
(
JSONW‹kî
::
	`∑r£
(
	`TOCONST_CSTR
(
js⁄
))));

84 } 
	`js⁄_ˇtch
 (
°d
::
övÆid_¨gumít
, ()0; )

85 #i‚de‡
JSON_NO_EXCEPTIONS


88 
	}
}

90 
JSONNODE
 * 
	$js⁄_∑r£_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

91 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nullÖtrÅo json_parse"),  0;);

92 
js⁄_åy
 {

94  
	`MANAGER_INSERT
(
JSONNode
::
	`√wJSONNode_ShÆlow
(
JSONW‹kî
::
	`∑r£_unf‹m©ãd
(
	`TOCONST_CSTR
(
js⁄
))));

95 } 
	`js⁄_ˇtch
(
°d
::
övÆid_¨gumít
, ()0; )

96 #i‚de‡
JSON_NO_EXCEPTIONS


99 
	}
}

102 
js⁄_ch¨
 * 
	$js⁄_°rù_whôe_•a˚
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

103 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nullÖtrÅo json_strip_white_space"),  0;);

104  
	`ÆªadyCSåög
(
JSONW‹kî
::
	`RemoveWhôeS∑˚AndCommítsC
(
	`TOCONST_CSTR
(
js⁄
), 
Ál£
));

105 
	}
}

107 #ifde‡
JSON_VALIDATE


108 #ifde‡
JSON_DEPRECATED_FUNCTIONS


109 
JSONNODE
 * 
	$js⁄_vÆid©e
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

110 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nullÖtrÅo json_validate"),  0;);

111 i‡(
	`js⁄_is_vÆid
(
js⁄
)){

112  
	`js⁄_∑r£
(
js⁄
);

115 
	}
}

117 
js⁄_boﬁ_t
 
	$js⁄_is_vÆid
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

118 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nuŒÖåÅÿjs⁄_is_vÆid"),  (
js⁄_boﬁ_t
)
Ál£
;);

119 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


120 i‡(
	`js⁄_u∆ikñy
(
	`js⁄_°æí
(
js⁄
Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

121 
	`JSON_FAIL
(
	`JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

122  
Ál£
;

125 
js⁄_auto
<
js⁄_ch¨
> 
s
;

126 
s
.
	`£t
(
JSONW‹kî
::
	`RemoveWhôeS∑˚AndCommítsC
(
js⁄
, 
Ál£
));

127  (
js⁄_boﬁ_t
)
JSONVÆid©‹
::
	`isVÆidRoŸ
(
s
.
±r
);

128 
	}
}

130 
js⁄_boﬁ_t
 
	$js⁄_is_vÆid_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
){

131 
	`JSON_ASSERT_SAFE
(
js⁄
, 
	`JSON_TEXT
("nuŒÖåÅÿjs⁄_is_vÆid_unf‹m©ãd"),  (
js⁄_boﬁ_t
)
åue
;);

132 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


133 i‡(
	`js⁄_u∆ikñy
(
	`js⁄_°æí
(
js⁄
Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

134 
	`JSON_FAIL
(
	`JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

135  
Ál£
;

138  (
js⁄_boﬁ_t
)
JSONVÆid©‹
::
	`isVÆidRoŸ
(
js⁄
);

139 
	}
}

142 #i‡
deföed
 
JSON_DEBUG
 && !deföed 
JSON_STDERROR


144 
	$js⁄_ªgi°î_debug_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
){

145 
JSONDebug
::
	`ªgi°î_ˇŒback
(
ˇŒback
);

146 
	}
}

149 #ifde‡
JSON_MUTEX_CALLBACKS


150 #ifde‡
JSON_MUTEX_MANAGE


151 
	$js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, js⁄_muãx_ˇŒback_à
de°roy
, * 
m™agî_lock
){

152 
JSONNode
::
	`ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

153 
JSONNode
::
	`ªgi°î_muãx_de°ru˘‹
(
de°roy
);

154 
	}
}

157 
	$js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
){

158 
JSONNode
::
	`ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

159 
	}
}

162 
	$js⁄_£t_globÆ_muãx
(* 
muãx
){

163 
JSONNode
::
	`£t_globÆ_muãx
(
muãx
);

164 
	}
}

166 
	$js⁄_£t_muãx
(
JSONNODE
 * 
node
, * 
muãx
){

167 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_mutex"), ;);

168 ((
JSONNode
*)
node
Ë-> 
	`£t_muãx
(
muãx
);

169 
	}
}

171 
	$js⁄_lock
(
JSONNODE
 * 
node
, 
thªadid
){

172 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_lock"), ;);

173 ((
JSONNode
*)
node
Ë-> 
	`lock
(
thªadid
);

174 
	}
}

176 
	$js⁄_u∆ock
(
JSONNODE
 * 
node
, 
thªadid
){

177 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_unlock"), ;);

178 ((
JSONNode
*)
node
Ë-> 
	`u∆ock
(
thªadid
);

179 
	}
}

182 #ifde‡
JSON_MEMORY_CALLBACKS


183 
	$js⁄_ªgi°î_mem‹y_ˇŒbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
){

184 
JSONMem‹y
::
	`ªgi°îMem‹yCÆlbacks
(
mÆ
, 
ªÆ
, 
‰e
);

185 
	}
}

188 #ifde‡
JSON_STREAM


189 
	$js⁄_°ªam_push
(
JSONSTREAM
 * 
°ªam
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
addídum
){

190 (*((
JSONSåóm
*)
°ªam
)Ë<< 
addídum
;

191 
	}
}

193 
	$js⁄_dñëe_°ªam
(
JSONSTREAM
 * 
°ªam
){

194 
	`JSON_ASSERT_SAFE
(
°ªam
, 
	`JSON_TEXT
("deletingÇullÖtr"), ;);

195 #ifde‡
JSON_MEMORY_MANAGE


196 
	`js⁄_globÆ
(
STREAM_HANDLER
).
	`ªmove
(
°ªam
);

198 
JSONSåóm
::
	`dñëeJSONSåóm
((JSONSåóm *)
°ªam
);

199 
	}
}

201 
JSONSTREAM
 * 
	$js⁄_√w_°ªam
(
js⁄_°ªam_ˇŒback_t
 
ˇŒback
, 
js⁄_°ªam_e_ˇŒback_t
 
e_ˇŒback
, * 
idítifõr
){

202  
	`MANAGER_STREAM_INSERT
(
JSONSåóm
::
	`√wJSONSåóm
(
ˇŒback
, 
e_ˇŒback
, 
idítifõr
));

203 
	}
}

205 
	$js⁄_°ªam_ª£t
(
JSONSTREAM
 * 
°ªam
){

206 
	`JSON_ASSERT_SAFE
(
°ªam
, 
	`JSON_TEXT
("resettingÇullÖtr"), ;);

207 ((
JSONSåóm
*)
°ªam
Ë-> 
	`ª£t
();

208 
	}
}

216 
JSONNODE
 * 
	$js⁄_√w_a
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, js⁄_c⁄° js⁄_ch¨ * 
vÆue
){

217 i‡(!
«me
Ë«mê
EMPTY_CSTRING
;

218 
	`JSON_ASSERT_SAFE
(
vÆue
, 
	`JSON_TEXT
("nuŒ vÆuêtÿjs⁄_√w_a"), vÆuê
EMPTY_CSTRING
;);

219 #ifde‡
JSON_MEMORY_POOL


220  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
	`js⁄_°rög
(TOCONST_CSTR(
vÆue
))));

221 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

222  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
	`js⁄_°rög
(TOCONST_CSTR(
vÆue
))));

224  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
	`js⁄_°rög
(TOCONST_CSTR(
vÆue
))));

226 
	}
}

228 
JSONNODE
 * 
	$js⁄_√w_i
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_öt_t
 
vÆue
){

229 i‡(!
«me
Ë«mê
EMPTY_CSTRING
;

230 #ifde‡
JSON_MEMORY_POOL


231  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

232 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

233  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

235  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

237 
	}
}

239 
JSONNODE
 * 
	$js⁄_√w_f
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_numbî
 
vÆue
){

240 i‡(!
«me
Ë«mê
EMPTY_CSTRING
;

241 #ifde‡
JSON_MEMORY_POOL


242  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

243 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

244  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

246  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
vÆue
));

248 
	}
}

250 
JSONNODE
 * 
	$js⁄_√w_b
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_boﬁ_t
 
vÆue
){

251 i‡(!
«me
Ë«mê
EMPTY_CSTRING
;

252 #ifde‡
JSON_MEMORY_POOL


253  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
°©ic_ˇ°
<
boﬁ
>(
vÆue
)));

254 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

255  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
°©ic_ˇ°
<
boﬁ
>(
vÆue
)));

257  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(
	`TOCONST_CSTR
(
«me
), 
°©ic_ˇ°
<
boﬁ
>(
vÆue
)));

259 
	}
}

261 
JSONNODE
 * 
	$js⁄_√w
(
ty≥
){

262 #ifde‡
JSON_MEMORY_POOL


263  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(
ty≥
));

264 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

265  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(
ty≥
));

267  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(
ty≥
));

269 
	}
}

271 
JSONNODE
 * 
	$js⁄_c›y
(
js⁄_c⁄°
 
JSONNODE
 * 
‹ig
){

272 
	`JSON_ASSERT_SAFE
(
‹ig
, 
	`JSON_TEXT
("null origÅo json_copy"),  0;);

273 #ifde‡
JSON_MEMORY_POOL


274  
	`MANAGER_INSERT
(
	`√w
((
JSONNode
*)
js⁄_node_mempoﬁ
.
	`Æloˇã
()Ë
	`JSONNode
(*((JSONNode*)
‹ig
)));

275 #ñi‡
	`deföed
(
JSON_MEMORY_CALLBACKS
)

276  
	`MANAGER_INSERT
(
	`√w
(
js⁄_mÆloc
<
JSONNode
>(1)Ë
	`JSONNode
(*((JSONNode*)
‹ig
)));

278  
	`MANAGER_INSERT
(
√w
 
	`JSONNode
(*((
JSONNode
*)
‹ig
)));

280 
	}
}

282 
JSONNODE
 * 
	$js⁄_du∂iˇã
(
js⁄_c⁄°
 
JSONNODE
 * 
‹ig
){

283 
	`JSON_ASSERT_SAFE
(
‹ig
, 
	`JSON_TEXT
("null origÅo json_duplicate"),  0;);

284  
	`MANAGER_INSERT
(
JSONNode
::
	`√wJSONNode_ShÆlow
(((JSONNode*)
‹ig
Ë-> 
	`du∂iˇã
()));

285 
	}
}

288 
	$js⁄_£t_a
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
vÆue
){

289 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_a"), ;);

290 
	`JSON_ASSERT_SAFE
(
vÆue
, 
	`JSON_TEXT
("nuŒ vÆuêtÿjs⁄_£t_a"), vÆuê
EMPTY_CSTRING
;);

291 *((
JSONNode
*)
node
Ë
	`js⁄_°rög
(
	`TOCONST_CSTR
(
vÆue
));

292 
	}
}

294 
	$js⁄_£t_i
(
JSONNODE
 * 
node
, 
js⁄_öt_t
 
vÆue
){

295 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_i"), ;);

296 *((
JSONNode
*)
node
Ë
vÆue
;

297 
	}
}

299 
	$js⁄_£t_f
(
JSONNODE
 * 
node
, 
js⁄_numbî
 
vÆue
){

300 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_f"), ;);

301 *((
JSONNode
*)
node
Ë
vÆue
;

302 
	}
}

304 
	$js⁄_£t_b
(
JSONNODE
 * 
node
, 
js⁄_boﬁ_t
 
vÆue
){

305 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_b"), ;);

306 *((
JSONNode
*)
node
Ë
°©ic_ˇ°
<
boﬁ
>(
vÆue
);

307 
	}
}

309 
	$js⁄_£t_n
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 JSONNODE * 
‹ig
){

310 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_n"), ;);

311 
	`JSON_ASSERT_SAFE
(
‹ig
, 
	`JSON_TEXT
("nullÇodeÅo json_set_n"), ;);

312 *((
JSONNode
*)
node
Ë*((JSONNode*)
‹ig
);

313 
	}
}

317 
	$js⁄_ty≥
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

318 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_ty≥"),  
JSON_NULL
;);

319  ((
JSONNode
*)
node
Ë-> 
	`ty≥
();

320 
	}
}

322 
js⁄_ödex_t
 
	$js⁄_size
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

323 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_size"),  0;);

324  ((
JSONNode
*)
node
Ë-> 
	`size
();

325 
	}
}

327 
js⁄_boﬁ_t
 
	$js⁄_em±y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

328 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_em±y"),  
åue
;);

329  (
js⁄_boﬁ_t
)(((
JSONNode
*)
node
Ë-> 
	`em±y
());

330 
	}
}

332 
js⁄_ch¨
 * 
	$js⁄_«me
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

333 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_«me"),  
	`toCSåög
(
EMPTY_CSTRING
););

334  
	`toCSåög
(((
JSONNode
*)
node
Ë-> 
	`«me
());

335 
	}
}

337 #ifde‡
JSON_COMMENTS


338 
js⁄_ch¨
 * 
	$js⁄_gë_commít
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

339 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_gë_commít"),  
	`toCSåög
(
EMPTY_CSTRING
););

340  
	`toCSåög
(((
JSONNode
*)
node
Ë-> 
	`gë_commít
());

341 
	}
}

344 
js⁄_ch¨
 * 
	$js⁄_as_°rög
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

345 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_as_°rög"),  
	`toCSåög
(
EMPTY_CSTRING
););

346  
	`toCSåög
(((
JSONNode
*)
node
Ë-> 
	`as_°rög
());

348 
	}
}

350 
js⁄_öt_t
 
	$js⁄_as_öt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

351 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_as_int"),  0;);

352  ((
JSONNode
*)
node
Ë-> 
	`as_öt
();

354 
	}
}

356 
js⁄_numbî
 
	$js⁄_as_Êﬂt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

357 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_as_float"),  0.0f;);

358  ((
JSONNode
*)
node
Ë-> 
	`as_Êﬂt
();

360 
	}
}

362 
js⁄_boﬁ_t
 
	$js⁄_as_boﬁ
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

363 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_as_boﬁ"),  
Ál£
;);

364  ((
JSONNode
*)
node
Ë-> 
	`as_boﬁ
();

366 
	}
}

368 #ifde‡
JSON_CASTABLE


369 
JSONNODE
 * 
	$js⁄_as_node
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

370 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_as_node"),  0;);

371  
	`MANAGER_INSERT
(
JSONNode
::
	`√wJSONNode_ShÆlow
(((JSONNode*)
node
Ë-> 
	`as_node
()));

372 
	}
}

374 
JSONNODE
 * 
	$js⁄_as_¨øy
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

375 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_as_array"),  0;);

376  
	`MANAGER_INSERT
(
JSONNode
::
	`√wJSONNode_ShÆlow
(((JSONNode*)
node
Ë-> 
	`as_¨øy
()));

377 
	}
}

380 #i‡
deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

381 * 
ªtu∫Decode64
(c⁄° 
°d
::
°rög
 & 
ªsu…
, * 
size
Ë
js⁄_nŸhrow
 
	gjs⁄_cﬁd
;

382 * 
ªtu∫Decode64
(c⁄° 
°d
::
°rög
 & 
ªsu…
, * 
size
Ë
	gjs⁄_nŸhrow
 {

383 c⁄° 
size_t
 
	gÀn
 = 
ªsu…
.
Àngth
();

384 i‡(
js⁄_likñy
(
size
)Ë*
	gsize
 = (
js⁄_ödex_t
)
Àn
;

385 #ifde‡
JSON_SAFE


386 i‡(
js⁄_u∆ikñy
(
ªsu…
.
em±y
()))  0;

388 #ifde‡
JSON_MEMORY_MANAGE


389  
js⁄_globÆ
(
STRING_HANDLER
).
ö£π
(
°d
::
mem˝y
(
js⁄_mÆloc
<>(
Àn
), 
ªsu…
.
d©a
(),Üen));

391  
	g°d
::
mem˝y
(
js⁄_mÆloc
<>(
Àn
), 
ªsu…
.
d©a
(),Üen);

396 #ifde‡
JSON_BINARY


397 * 
	$js⁄_as_bö¨y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
, * 
size
){

398 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_as_bö¨y"), i‡(
size
){*size = 0;}  0;);

399  
	`ªtu∫Decode64
(((
JSONNode
*)
node
Ë-> 
	`as_bö¨y
(), 
size
);

401 
	}
}

404 #ifde‡
JSON_EXPOSE_BASE64


405 
	~"JSON_Ba£64.h
"

406 
js⁄_ch¨
 * 
	$js⁄_ícode64
(
js⁄_c⁄°
 * 
bö¨y
, 
js⁄_ödex_t
 
byãs
){

407 c⁄° 
js⁄_°rög
 
	`ªsu…
(
JSONBa£64
::
	`js⁄_ícode64
((c⁄° *)
bö¨y
, (
size_t
)
byãs
));

408 #ifde‡
JSON_MEMORY_MANAGE


409  (
js⁄_ch¨
*)
	`js⁄_globÆ
(
STRING_HANDLER
).
	`ö£π
((js⁄_ch¨*)
°d
::
	`mem˝y
(
js⁄_mÆloc
<js⁄_ch¨>(
ªsu…
.
	`Àngth
(Ë+ 1),Ñesu….
	`c_°r
(), (result.length() + 1) * (json_char)));

411  (
js⁄_ch¨
*)
°d
::
	`mem˝y
(
js⁄_mÆloc
<js⁄_ch¨>(
ªsu…
.
	`Àngth
(Ë+ 1),Ñesu….
	`c_°r
(), (result.length() + 1) * (json_char));

413 
	}
}

415 * 
	$js⁄_decode64
(c⁄° 
js⁄_ch¨
 * 
ãxt
, * 
size
){

416  
	`ªtu∫Decode64
(
JSONBa£64
::
	`js⁄_decode64
(
ãxt
), 
size
);

417 
	}
}

420 #ifde‡
JSON_WRITE_PRIORITY


421 
js⁄_ch¨
 * 
	$js⁄_wrôe
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

422 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_wrôe"),  
	`toCSåög
(
EMPTY_CSTRING
););

423  
	`toCSåög
(((
JSONNode
*)
node
Ë-> 
	`wrôe
());

424 
	}
}

426 
js⁄_ch¨
 * 
	$js⁄_wrôe_f‹m©ãd
(
js⁄_c⁄°
 
JSONNODE
 * 
node
){

427 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_wrôe_f‹m©ãd"),  
	`toCSåög
(
EMPTY_CSTRING
););

428  
	`toCSåög
(((
JSONNode
*)
node
Ë-> 
	`wrôe_f‹m©ãd
());

429 
	}
}

433 
	$js⁄_£t_«me
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

434 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_name"), ;);

435 
	`JSON_ASSERT_SAFE
(
«me
, 
	`JSON_TEXT
("nuŒÇamêtÿjs⁄_£t_«me"),Çamê
EMPTY_CSTRING
;);

436 ((
JSONNode
*)
node
Ë-> 
	`£t_«me
(
	`TOCONST_CSTR
(
«me
));

437 
	}
}

439 #ifde‡
JSON_COMMENTS


440 
	$js⁄_£t_commít
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
commít
){

441 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_set_comment"), ;);

442 
	`JSON_ASSERT_SAFE
(
commít
, 
	`JSON_TEXT
("nuŒÇamêtÿjs⁄_£t_commít"), commíà
EMPTY_CSTRING
;);

443 ((
JSONNode
*)
node
Ë-> 
	`£t_commít
(
	`TOCONST_CSTR
(
commít
));

444 
	}
}

447 
	$js⁄_˛ór
(
JSONNODE
 * 
node
){

448 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_clear"), ;);

449 ((
JSONNode
*)
node
Ë-> 
	`˛ór
();

450 
	}
}

452 
	$js⁄_nuŒify
(
JSONNODE
 * 
node
){

453 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_nullify"), ;);

454 ((
JSONNode
*)
node
Ë-> 
	`nuŒify
();

455 
	}
}

457 
	$js⁄_sw≠
(
JSONNODE
 * 
node
, JSONNODE * 
node2
){

458 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_swap"), ;);

459 
	`JSON_ASSERT_SAFE
(
node2
, 
	`JSON_TEXT
("nullÇodeÅo json_swap"), ;);

460 ((
JSONNode
*)
node
Ë-> 
	`sw≠
(*(JSONNode*)
node2
);

461 
	}
}

463 
	$js⁄_mîge
(
JSONNODE
 * 
node
, JSONNODE * 
node2
){

464 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_merge"), ;);

465 
	`JSON_ASSERT_SAFE
(
node2
, 
	`JSON_TEXT
("nullÇodeÅo json_merge"), ;);

466 ((
JSONNode
*)
node
Ë-> 
	`mîge
(*(JSONNode*)
node2
);

467 
	}
}

469 #i‡!
deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

470 
	$js⁄_¥ï¨£
(
JSONNODE
 * 
node
){

471 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_preparse"), ;);

472 ((
JSONNode
*)
node
Ë-> 
	`¥ï¨£
();

473 
	}
}

476 #ifde‡
JSON_BINARY


477 
	$js⁄_£t_bö¨y
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 * 
d©a
, 
Àngth
){

478 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_swap"), ;);

479 
	`JSON_ASSERT_SAFE
(
d©a
, 
	`JSON_TEXT
("nuŒ d©®tÿjs⁄_£t_bö¨y"), *((
JSONNode
*)
node
Ë
EMPTY_CSTRING
; ;);

480 ((
JSONNode
*)
node
Ë-> 
	`£t_bö¨y
((*)
d©a
, (
size_t
)
Àngth
);

481 
	}
}

484 #ifde‡
JSON_CASTABLE


485 
	$js⁄_ˇ°
(
JSONNODE
 * 
node
, 
ty≥
){

486 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_cast"), ;);

487 ((
JSONNode
*)
node
Ë-> 
	`ˇ°
(
ty≥
);

488 
	}
}

492 
	$js⁄_ª£rve
(
JSONNODE
 * 
node
, 
js⁄_ödex_t
 
siz
){

493 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_reserve"), ;);

494 ((
JSONNode
*)
node
Ë-> 
	`ª£rve
(
siz
);

495 
	}
}

497 
JSONNODE
 * 
	$js⁄_©
(
JSONNODE
 * 
node
, 
pos
){

498 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_at"),  0;);

499 
js⁄_åy
 {

500  &((
JSONNode
*)
node
Ë-> 
	`©
(
pos
);

501 } 
	`js⁄_ˇtch
 (
°d
::
out_of_ønge
, ()0; )

502 #i‚de‡
JSON_NO_EXCEPTIONS


505 
	}
}

507 
JSONNODE
 * 
	$js⁄_gë
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

508 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_get"),  0;);

509 
	`JSON_ASSERT_SAFE
(
«me
, 
	`JSON_TEXT
("nullÇodeÅo json_get. Did you meanÅo use json_at?"),  0;);

510 
js⁄_åy
 {

511  &((
JSONNode
*)
node
Ë-> 
	`©
(
	`TOCONST_CSTR
(
«me
));

512 } 
	`js⁄_ˇtch
 (
°d
::
out_of_ønge
, ()0; )

513 #i‚de‡
JSON_NO_EXCEPTIONS


516 
	}
}

519 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


520 
JSONNODE
 * 
	$js⁄_gë_noˇ£
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

521 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_at_nocase"),  0;);

522 
	`JSON_ASSERT_SAFE
(
«me
, 
	`JSON_TEXT
("nullÇameÅo json_at_nocase"),  0;);

523 
js⁄_åy
 {

524  &((
JSONNode
*)
node
Ë-> 
	`©_noˇ£
(
	`TOCONST_CSTR
(
«me
));

525 } 
	`js⁄_ˇtch
 (
°d
::
out_of_ønge
, ()0; )

526 #i‚de‡
JSON_NO_EXCEPTIONS


529 
	}
}

531 
JSONNODE
 * 
	$js⁄_p›_back_noˇ£
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

532 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_pop_back_nocase"),  0;);

533 
	`JSON_ASSERT_SAFE
(
«me
, 
	`JSON_TEXT
("nullÇameÅo json_pop_back_nocase"),  0;);

534  
	`MANAGER_INSERT
(((
JSONNode
*)
node
Ë-> 
	`p›_back_noˇ£
(
	`TOCONST_CSTR
(
«me
)));

535 
	}
}

538 
	$js⁄_push_back
(
JSONNODE
 * 
node
, JSONNODE * 
node2
){

539 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_push_back"), ;);

540 
	`JSON_ASSERT_SAFE
(
node2
, 
	`JSON_TEXT
("nullÇode2Åo json_push_back"), ;);

541 #ifde‡
JSON_MEMORY_MANAGE


542 
	`js⁄_globÆ
(
NODE_HANDLER
).
	`ªmove
(
node2
);

544 ((
JSONNode
*)
node
Ë-> 
	`push_back
((JSONNode*)
node2
);

545 
	}
}

547 
JSONNODE
 * 
	$js⁄_p›_back_©
(
JSONNODE
 * 
node
, 
pos
){

548 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_pop_back_i"),  0;);

549  
	`MANAGER_INSERT
(((
JSONNode
*)
node
Ë-> 
	`p›_back
(
pos
));

550 
	}
}

552 
JSONNODE
 * 
	$js⁄_p›_back
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

553 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nullÇodeÅo json_pop_back"),  0;);

554 
	`JSON_ASSERT_SAFE
(
«me
, 
	`JSON_TEXT
("nullÇameÅo json_pop_back. Did you meanÅo use json_pop_back_at?"),  0;);

555  
	`MANAGER_INSERT
(((
JSONNode
*)
node
Ë-> 
	`p›_back
(
	`TOCONST_CSTR
(
«me
)));

556 
	}
}

558 #ifde‡
JSON_ITERATORS


559 
JSONNODE_ITERATOR
 
	$js⁄_föd
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

560  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`föd
(
	`TOCONST_CSTR
(
«me
)));

561 
	}
}

563 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


564 
JSONNODE_ITERATOR
 
	$js⁄_föd_noˇ£
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
){

565  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`föd_noˇ£
(
	`TOCONST_CSTR
(
«me
)));

566 
	}
}

569 
JSONNODE_ITERATOR
 
	$js⁄_îa£
(
JSONNODE
 * 
node
, 
JSONNODE_ITERATOR
 
ô
){

570  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`îa£
((JSONNode**)
ô
));

571 
	}
}

573 
JSONNODE_ITERATOR
 
	$js⁄_îa£_mu…i
(
JSONNODE
 * 
node
, 
JSONNODE_ITERATOR
 
°¨t
, JSONNODE_ITERATOR 
íd
){

574  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`îa£
((JSONNode**)
°¨t
, (JSONNode**)
íd
));

575 
	}
}

577 
JSONNODE_ITERATOR
 
	$js⁄_ö£π
(
JSONNODE
 * 
node
, 
JSONNODE_ITERATOR
 
ô
, JSONNODE * 
node2
){

578 #ifde‡
JSON_MEMORY_MANAGE


579 
	`js⁄_globÆ
(
NODE_HANDLER
).
	`ªmove
(
node2
);

581  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`ö£π
((JSONNode**)
ô
, (JSONNode*)
node2
));

582 
	}
}

584 
JSONNODE_ITERATOR
 
	$js⁄_ö£π_mu…i
(
JSONNODE
 * 
node
, 
JSONNODE_ITERATOR
 
ô
, JSONNODE_ITERATOR 
°¨t
, JSONNODE_ITERATOR 
íd
){

585  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`ö£π
((JSONNode**)
ô
, (JSONNode**)
°¨t
, (JSONNode**)
íd
));

586 
	}
}

589 
JSONNODE_ITERATOR
 
	$js⁄_begö
(
JSONNODE
 * 
node
){

590  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`begö
());

591 
	}
}

593 
JSONNODE_ITERATOR
 
	$js⁄_íd
(
JSONNODE
 * 
node
){

594  (
JSONNODE_ITERATOR
)(((
JSONNode
*)
node
Ë-> 
	`íd
());

595 
	}
}

599 
js⁄_boﬁ_t
 
	$js⁄_equÆ
(
JSONNODE
 * 
node
, JSONNODE * 
node2
){

600 
	`JSON_ASSERT_SAFE
(
node
, 
	`JSON_TEXT
("nuŒÇodêtÿjs⁄_equÆ"),  
Ál£
;);

601 
	`JSON_ASSERT_SAFE
(
node2
, 
	`JSON_TEXT
("nuŒÇode2Åÿjs⁄_equÆ"),  
Ál£
;);

602  (
js⁄_boﬁ_t
)(*((
JSONNode
*)
node
Ë=*((JSONNode*)
node2
));

603 
	}
}

	@libjson/_internal/TestSuite/All/main.cpp

1 
	~<io°ªam
>

2 
	~<°rög
>

3 
	~<s°ªam
>

4 
	~<ve˘‹
>

5 
	~<f°ªam
>

6 
	~<c°dio
>

7 
	~<c°dlib
>

8 
	~<m≠
>

9 
	~<sys/°©.h
>

10 
	~"../UnôTe°.h
"

12 
usög
 
«me•a˚
 
	g°d
;

14 
	gm≠
<
	g°rög
, såög> 
	g›ti⁄s
;

15 
	gve˘‹
<
	g°rög
> 
	glöes
;

16 
	gve˘‹
<> 
	glöe_numbîs
;

17 
size_t
 
	gcou¡î
 = 0;

18 
°rög
 
	gmake
;

19 
°rög
 
	gArchivedO±i⁄s
;

20 
°rög
 
	gmakeStyÀ
;

22 
°rög
 
	gmakeO±i⁄s
[] = {

28 
	$makeM≠
(){

29 
›ti⁄s
["LIBRARY"] = "#define JSON_LIBRARY";

30 
›ti⁄s
["DEBUG"] = "#define JSON_DEBUG";

31 
›ti⁄s
["STREAM"] = "#define JSON_STREAM";

32 
›ti⁄s
["SAFE"] = "#define JSON_SAFE";

33 
›ti⁄s
["STDERROR"] = "#define JSON_STDERROR";

34 
›ti⁄s
["PREPARSE"] = "#define JSON_PREPARSE";

35 
›ti⁄s
["LESS_MEMORY"] = "#define JSON_LESS_MEMORY";

36 
›ti⁄s
["UNICODE"] = "#define JSON_UNICODE";

37 
›ti⁄s
["REF_COUNT"] = "#define JSON_REF_COUNT";

38 
›ti⁄s
["BINARY"] = "#define JSON_BINARY";

39 
›ti⁄s
["MEMORY_CALLBACKS"] = "#define JSON_MEMORY_CALLBACKS";

40 
›ti⁄s
["MEMORY_MANAGE"] = "#define JSON_MEMORY_MANAGE";

41 
›ti⁄s
["MUTEX_CALLBACKS"] = "#define JSON_MUTEX_CALLBACKS";

42 
›ti⁄s
["MUTEX_MANAGE"] = "#define JSON_MUTEX_MANAGE";

43 
›ti⁄s
["ITERATORS"] = "#define JSON_ITERATORS";

44 
›ti⁄s
["WRITER"] = "#define JSON_WRITE_PRIORITY MID";

45 
›ti⁄s
["READER"] = "#define JSON_READ_PRIORITY HIGH";

46 
›ti⁄s
["NEWLINE"] = "#define JSON_NEWLINE \"\\r\\n\"";

47 
›ti⁄s
["COMMENTS"] = "#define JSON_COMMENTS";

48 
›ti⁄s
["INDENT"] = "#define JSON_INDENT \" \"";

49 
›ti⁄s
["WRITE_BASH_COMMENTS"] = "#define JSON_WRITE_BASH_COMMENTS";

50 
›ti⁄s
["WRITE_SINGLE_LINE_COMMENTS"] = "#define JSON_WRITE_SINGLE_LINE_COMMENTS";

51 
›ti⁄s
["VALIDATE"] = "#define JSON_VALIDATE";

52 
›ti⁄s
["UNIT_TEST"] = "#define JSON_UNIT_TEST";

53 
›ti⁄s
["INDEX_TYPE"] = "#define JSON_INDEX_TYPE unsigned int";

54 
›ti⁄s
["CASE_INSENSITIVE_FUNCTIONS"] = "#define JSON_CASE_INSENSITIVE_FUNCTIONS";

55 
›ti⁄s
["ESCAPE_WRITES"] = "#define JSON_ESCAPE_WRITES";

56 
›ti⁄s
["STRINGU_HEADER"] = "#define JSON_STRING_HEADER \"../TestSuite/UStringTest.h\"";

57 
›ti⁄s
["STRING_HEADER"] = "#define JSON_STRING_HEADER \"../TestSuite/StringTest.h\"";

58 
›ti⁄s
["CASTABLE"] = "#define JSON_CASTABLE";

59 
›ti⁄s
["STRICT"] = "#define JSON_STRICT";

60 
›ti⁄s
["MEMORY_POOL"] = "#define JSON_MEMORY_POOL 524288";

61 
	}
}

63 
	$ã°RuÀs
(
i
){

64 
	`ªmove
("./testapp");

65 
q
 = 
	`sy°em
(
make
.
	`c_°r
());

66 
boﬁ
 
Archive
 = 
Ál£
;

67 i‡(
FILE
 * 
Â
 = 
	`f›í
("./testapp", "r")){

68 
	`f˛o£
(
Â
);

70 
	`ªmove
("./out.html");

71 
q
 = 
	`sy°em
("./testapp");

72 i‡(
FILE
 * 
Â
 = 
	`f›í
("./out.html", "r")){

73 
buf„r
[255];

74 
size_t
 
qq
 = 
	`‰ód
(&
buf„r
[0], 255, 1, 
Â
);

75 
buf„r
[254] = '\0';

76 
	`f˛o£
(
Â
);

77 
°rög
 
	`buf
(&
buf„r
[0]);

78 
size_t
 
pos
 = 
buf
.
	`föd
("Failed Tests: <c style=\"color:#CC0000\">");

79 i‡(
pos
 =
°rög
::
≈os
){

80 
	`FAIL
("Something Wrong");

82 if(
buf
[
pos
 + 39] == '0'){

83 
	`PASS
("GOOD");

85 
size_t
 
µ
 = 
buf
.
	`föd
('<', 
pos
 + 39);

86 
	`FAIL
(
	`°rög
("Didn'à∑s†"Ë+ 
buf
.
	`sub°r
(
pos
 + 39, 
µ
 -Öos - 39) + "Åests");

87 
ArchivedO±i⁄s
 = 
°d
::
	`°rög
("Fail_") + ArchivedOptions;

88 
Archive
 = 
åue
;

92 
	`FAIL
("Running crashed");

93 
ArchivedO±i⁄s
 = 
°d
::
	`°rög
("Crashed_") + ArchivedOptions;

94 
Archive
 = 
åue
;

97 
	`FAIL
(
	`°rög
("Compû©i⁄ faûed - "Ë+ 
löes
[
i
]);

98 
ArchivedO±i⁄s
 = 
°d
::
	`°rög
("Compile_") + ArchivedOptions;

99 
Archive
 = 
åue
;

103 i‡(
Archive
){

104 i‡(
FILE
 * 
Â
 = 
	`f›í
("../JSONOptions.h", "r")){

105 
ArchivedO±i⁄s
 = 
°d
::
	`°rög
("../") + ArchivedOptions;

106 i‡(
FILE
 * 
oÂ
 = 
	`f›í
(
ArchivedO±i⁄s
.
	`c_°r
(), "w")){

107 
buf„r
[2048] = {'\0'};

108 
size_t
 
qq
 = 
	`‰ód
(&
buf„r
[0], 2048, 1, 
Â
);

109 
	`fwrôe
(&
buf„r
[0], 
	`°æí
(&buf„r[0]), 1, 
oÂ
);

110 
	`f˛o£
(
oÂ
);

112 
	`f˛o£
(
Â
);

115 
	}
}

117 
boﬁ
 
	$makeTempO±i⁄s
(
i
){

118 
°rög
 & 
löe
 = 
löes
[
i
];

120 i‡(
FILE
 * 
Â
 = 
	`f›í
("../JSONOptions.h", "w")){

121 
°rög
 
	`ªs
("#ifndef JSON_OPTIONS_H\n#define JSON_OPTIONS_H\n");

123 
m≠
<
°rög
, såög>::
ôî©‹
 
ru¬î
 = 
›ti⁄s
.
	`begö
(), 
íd
 = o±i⁄s.
	`íd
();

124 
ru¬î
 !
íd
;

125 ++
ru¬î
){

127 i‡(
löe
.
	`föd
(
ru¬î
 -> 
fú°
Ë!
°rög
::
≈os
){

128 
ªs
 +
ru¬î
 -> 
£c⁄d
 + "\n";

131 
ªs
 += "#endif\n";

133 
	`fwrôe
(
ªs
.
	`c_°r
(),Ñes.
	`Àngth
(), 1, 
Â
);

134 
	`f˛o£
(
Â
);

135  
åue
;

137  
Ál£
;

138 
	}
}

140 
boﬁ
 
	$hideGoodO±i⁄s
(){

141 
°©
 
°FûeInfo
;

142 i‡(
	`°©
("../__JSONO±i⁄s.h", &
°FûeInfo
)){

143 
	`ªmove
("../JSONOptions.h");

144  
åue
;

146  (
	`ª«me
("../JSONOptions.h", "../__JSONOptions.h") == 0);

147 
	}
}

149 
boﬁ
 
	$lﬂdTe°s
(){

150 
if°ªam
 
	`öfûe
("All/Options.txt");

152 i‡(!
öfûe
){

153  
Ál£
;

156 
°rög
 
löe
;

157 
iii
 = 0;

158 
	`gëlöe
(
öfûe
, 
löe
)){

159 ++
iii
;

160 
size_t
 
pos
 = 
löe
.
	`föd_fú°_nŸ_of
(' ');

161 i‡(
pos
 !
°rög
::
≈os
){

162 
löe
 =Üöe.
	`sub°r
(
pos
);

163 
pos
 = 
löe
.
	`föd_fú°_nŸ_of
("\r\n\t ");

164 i‡((
löe
.
	`Àngth
() > 5) && (line[0] != '#')){

165 c⁄° 
°rög
 
	`ãmp
(
löe
.
	`sub°r
(
pos
));

166 
löes
.
	`push_back
(
	`°rög
("READER, "Ë+ 
ãmp
);

167 
löe_numbîs
.
	`push_back
(
iii
);

168 i‡((
ãmp
.
	`föd
("VALIDATE"Ë=
°rög
::
≈os
) && (temp.find("STREAM") == string::npos)){

169 
löes
.
	`push_back
(
ãmp
);

170 
löe_numbîs
.
	`push_back
(
iii
);

175 
öfûe
.
	`˛o£
();

176  
åue
;

177 
	}
}

179 
RunTe°
(c⁄° 
°d
::
°rög
 & 
vîsi⁄
, 
i
){

180 if(
makeTempO±i⁄s
(
i
)){

181 
°rög°ªam
 
	gmy°ªam
;

182 
	gmy°ªam
 << 
	gvîsi⁄
 << " Löê" << 
	glöe_numbîs
[
i
];

183 
	gcout
 << "Compûög " << ++
	gcou¡î
 << " o‡" << 
	glöe_numbîs
.
size
(Ë* 3 << " - " << 
	gmy°ªam
.
°r
(Ë<< 
	gídl
;

184 
	gcout
 << " " << 
	glöes
[
i
] << 
	gídl
;

185 
	gUnôTe°
::
SëPªfix
(
my°ªam
.
°r
());

186 
°rög°ªam
 
	g›ti⁄s_
;

187 
	g›ti⁄s_
 << 
	gvîsi⁄
 << "_Löe_" << 
	glöe_numbîs
[
i
] << "_JSONOptions.h";

188 
	gArchivedO±i⁄s
 = 
›ti⁄s_
.
°r
();

189 
ã°RuÀs
(
i
);

190 
ªmove
("../JSONOptions.h");

191 
	gUnôTe°
::
SaveTo
("progress.html");

195 
Go
(c⁄° 
°d
::
°rög
 & 
vîsi⁄
, 
ã°
){

196 
echo
(
make
);

197 i‡(
	gmakeStyÀ
.
em±y
(Ë|| (makeStyÀ =
vîsi⁄
)){

198 
makeStyÀ
.
˛ór
();

199 
	gi
 = 
ã°
; i < 
	glöes
.
size
(); ++i){

200 
RunTe°
(
vîsi⁄
, 
i
);

203 
echo
("skipping");

208 
	$RunTe°s
(
ã°
){

209 i‡(
	`hideGoodO±i⁄s
()){

210 if(
	`lﬂdTe°s
()){

211 
	`makeM≠
();

212 
i
 = 0; i < (
makeO±i⁄s
); ++i){

213 
make
 = "makê-j4 " + 
makeO±i⁄s
[
i
];

214 
	`Go
(
makeO±i⁄s
[
i
], 
ã°
);

217 
	`FAIL
("couldn't open options");

219 
	`ª«me
("../__JSONOptions.h", "../JSONOptions.h");

221 
	`FAIL
("Couldn'tÖrotect JSONOptions");

223 
	}
}

225 
	$maö
 (
¨gc
, * c⁄° 
¨gv
[]) {

226 
UnôTe°
::
	`SèπTime
();

227 
ã°
 = 0;

228 i‡(
¨gc
 == 3){

229 
ã°
 = 
	`©oi
(
¨gv
[2]) - 1;

230 
cou¡î
 = 
ã°
;

231 
	`echo
("°¨tög o¿ã° " << 
ã°
);

232 
makeStyÀ
 = 
¨gv
[1];

233 
	`echo
("°¨tög wôh makê" << 
makeStyÀ
);

234 } i‡(
¨gc
 == 2){

235 
ã°
 = 0;

236 
cou¡î
 = 
ã°
;

237 
	`echo
("°¨tög o¿ã° " << 
ã°
);

238 
makeStyÀ
 = 
¨gv
[1];

239 
	`echo
("°¨tög wôh makê" << 
makeStyÀ
);

242 
	`RunTe°s
(
ã°
);

244 
UnôTe°
::
	`SaveTo
("out.html");

246 
	}
}

	@libjson/_internal/TestSuite/Benchmark/main.cpp

10 
	~<io°ªam
>

11 
	~<°rög
>

12 
	~<˘ime
>

13 
	~"../../libjs⁄.h
"

15 
usög
 
«me•a˚
 
	g°d
;

17 #i‚de‡
JSON_LIBRARY


18 #îr‹, 
JSON_LIBRARY
 
nŸ
 
⁄


21 #ifde‡
JSON_STRICT


22 #îr‹, 
JSON_STRICT
 
⁄


25 #ifde‡
JSON_DEBUG


26 #îr‹, 
JSON_DEBUG
 
⁄


29 #ifde‡
JSON_ISO_STRICT


30 #îr‹, 
JSON_ISO_STRICT
 
⁄


33 #i‚de‡
JSON_SAFE


34 #îr‹, 
JSON_SAFE
 
nŸ
 
⁄


37 #i‚de‡
JSON_CASTABLE


38 #îr‹, 
JSON_CASTABLE
 
nŸ
 
⁄


41 #ifde‡
JSON_STDERROR


42 #îr‹, 
JSON_STDERROR
 
⁄


45 #ifde‡
JSON_PREPARSE


46 #îr‹, 
JSON_PREPARSE
 
⁄


49 #ifde‡
JSON_LESS_MEMORY


50 #îr‹, 
JSON_LESS_MEMORY
 
⁄


53 #ifde‡
JSON_UNICODE


54 #îr‹, 
JSON_UNICODE
 
⁄


57 #i‚de‡
JSON_REF_COUNT


58 #îr‹, 
JSON_REF_COUNT
 
nŸ
 
⁄


61 #i‚de‡
JSON_BINARY


62 #îr‹, 
JSON_BINARY
 
nŸ
 
⁄


65 #i‚de‡
JSON_EXPOSE_BASE64


66 #îr‹, 
JSON_EXPOSE_BASE64
 
nŸ
 
⁄


69 #i‚de‡
JSON_ITERATORS


70 #îr‹, 
JSON_ITERATORS
 
nŸ
 
⁄


73 #i‚de‡
JSON_STREAM


74 #îr‹, 
JSON_STREAM
 
nŸ
 
⁄


77 #ifde‡
JSON_MEMORY_CALLBACKS


78 #îr‹, 
JSON_MEMORY_CALLBACKS
 
⁄


81 #ifde‡
JSON_MEMORY_MANAGE


82 #îr‹, 
JSON_MEMORY_MANAGE
 
⁄


85 #ifde‡
JSON_MUTEX_CALLBACKS


86 #îr‹, 
JSON_MUTEX_CALLBACKS
 
⁄


89 #ifde‡
JSON_MUTEX_MANAGE


90 #îr‹, 
JSON_MUTEX_MANAGE
 
⁄


93 #ifde‡
JSON_NO_C_CONSTS


94 #îr‹, 
JSON_NO_C_CONSTS
 
⁄


97 #ifde‡
JSON_OCTAL


98 #îr‹, 
JSON_OCTAL
 
⁄


101 #i‡(
JSON_READ_PRIORITY
 !
HIGH
)

102 #îr‹ 
JSON_READ_PRIORITY
 
nŸ
 
high


105 #i‡(
JSON_WRITE_PRIORITY
 !
MED
)

106 #îr‹ 
JSON_WRITE_PRIORITY
 
nŸ
 
med


109 #ifde‡
JSON_NEWLINE


110 #îr‹, 
JSON_NEWLINE
 
⁄


113 #ifde‡
JSON_INDENT


114 #îr‹, 
JSON_INDENT
 
⁄


117 #i‚de‡
JSON_ESCAPE_WRITES


118 #îr‹, 
JSON_ESCAPE_WRITES
 
nŸ
 
⁄


121 #i‚de‡
JSON_COMMENTS


122 #îr‹, 
JSON_COMMENTS
 
nŸ
 
⁄


125 #ifde‡
JSON_WRITE_BASH_COMMENTS


126 #îr‹, 
JSON_WRITE_BASH_COMMENTS
 
⁄


129 #ifde‡
JSON_WRITE_SINGLE_LINE_COMMENTS


130 #îr‹, 
JSON_WRITE_SINGLE_LINE_COMMENTS
 
⁄


133 #ifde‡
JSON_ARRAY_ON_ONE_LINE


134 #îr‹, 
JSON_ARRAY_ON_ONE_LINE
 
⁄


137 #i‚de‡
JSON_VALIDATE


138 #îr‹, 
JSON_VALIDATE
 
nŸ
 
⁄


141 #i‚de‡
JSON_CASE_INSENSITIVE_FUNCTIONS


142 #îr‹, 
JSON_CASE_INSENSITIVE_FUNCTIONS
 
nŸ
 
⁄


145 #ifde‡
JSON_INDEX_TYPE


146 #îr‹, 
JSON_INDEX_TYPE
 
⁄


149 #ifde‡
JSON_BOOL_TYPE


150 #îr‹, 
JSON_BOOL_TYPE
 
⁄


153 #ifde‡
JSON_INT_TYPE


154 #îr‹, 
JSON_INT_TYPE
 
⁄


157 #ifde‡
JSON_STRING_HEADER


158 #îr‹, 
JSON_STRING_HEADER
 
⁄


161 #ifde‡
JSON_NO_EXCEPTIONS


162 #îr‹, 
JSON_NO_EXCEPTIONS
 
⁄


165 #i‚de‡
JSON_DEPRECATED_FUNCTIONS


166 #îr‹, 
JSON_DEPRECATED_FUNCTIONS
 
nŸ
 
⁄


169 #i‡(
JSON_SECURITY_MAX_NEST_LEVEL
 != 128)

170 #îr‹ 
JSON_SECURITY_MAX_NEST_LEVEL
 
nŸ
 128

173 #i‡(
JSON_SECURITY_MAX_STRING_LENGTH
 != 33554432)

174 #îr‹ 
JSON_SECURITY_MAX_STRING_LENGTH
 
nŸ
 33554432

177 #i‡(
JSON_SECURITY_MAX_STREAM_OBJECTS
 != 128)

178 #îr‹ 
JSON_SECURITY_MAX_STREAM_OBJECTS
 
nŸ
 128

181 #ifde‡
JSON_MEMORY_POOL


182 #îr‹ 
JSON_MEMORY_POOL
 
is
 
⁄


185 #ifde‡
JSON_UNIT_TEST


186 #îr‹, 
JSON_UNIT_TEST
 
⁄


189 
	#IT_COUNT
 50000

	)

190 
°rög
 
	$makeBigF‹m©ãd
(){

191 
°rög
 
js⁄
 = "{\n";

192 
i
 = 0; i < 
IT_COUNT
; ++i){

193 
js⁄
 += "\t//This isán object\r\n\t{\n\t\t\"name\" : 14.783,\n\t\t/* This isá multilen commenet */\n\t\t\"another\" : \"Iámá stirng\"\n\t},";

194 
js⁄
 += "\n\n\t//This isánárray\r\n\t[4, 16,Årue, false, 78.98],\n";

196 
js⁄
 += "\t\"number\" :Çull\n}";

197  
js⁄
;

198 
	}
}

200 
°rög
 
	$makeBig
(){

201 
°rög
 
js⁄
 = "{";

202 
i
 = 0; i < 
IT_COUNT
; ++i){

203 
js⁄
 += "{\"name\":14.783,\"another\":\"Iámá stirng\"},";

204 
js⁄
 += "[4, 16,Årue, false, 78.98],";

206 
js⁄
 += "\"number\":null}";

207  
js⁄
;

208 
	}
}

210 
	$maö
 (
¨gc
, * c⁄° 
¨gv
[]) {

211 
JSONNODE
 * 
node
;

212 
°rög
 
my°r
 = 
	`makeBigF‹m©ãd
();

213 
˛ock_t
 
°¨t
 = 
	`˛ock
();

214 
i
 = 0; i < 100; ++i){

215 
node
 = 
	`js⁄_∑r£
(
my°r
.
	`c_°r
());

216 
j
 = 0; j < 
IT_COUNT
; ++j){

217 
JSONNODE
 * 
meh
 = 
	`js⁄_©
(
node
, 
j
 * 2);

218 
	`js⁄_as_Êﬂt
(
	`js⁄_gë
(
meh
, "name"));

219 * 
°r
 = 
	`js⁄_as_°rög
(
	`js⁄_gë
(
meh
, "another"));

220 
	`js⁄_‰ì
(
°r
);

222 
meh
 = 
	`js⁄_©
(
node
, 
j
 * 2 + 1);

223 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 0));

224 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 1));

225 
	`js⁄_as_boﬁ
(
	`js⁄_©
(
meh
, 2));

226 
	`js⁄_as_boﬁ
(
	`js⁄_©
(
meh
, 3));

227 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 4));

229 
	`js⁄_dñëe
(
node
);

231 
cout
 << "Ródög: " << 
	`˛ock
(Ë- 
°¨t
 << 
ídl
;

235 
my°r
 = 
	`makeBig
();

236 
°¨t
 = 
	`˛ock
();

237 
i
 = 0; i < 100; ++i){

238 
node
 = 
	`js⁄_∑r£
(
my°r
.
	`c_°r
());

239 
j
 = 0; j < 
IT_COUNT
; ++j){

240 
JSONNODE
 * 
meh
 = 
	`js⁄_©
(
node
, 
j
 * 2);

241 
	`js⁄_as_Êﬂt
(
	`js⁄_gë
(
meh
, "name"));

242 * 
°r
 = 
	`js⁄_as_°rög
(
	`js⁄_gë
(
meh
, "another"));

243 
	`js⁄_‰ì
(
°r
);

245 
meh
 = 
	`js⁄_©
(
node
, 
j
 * 2 + 1);

246 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 0));

247 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 1));

248 
	`js⁄_as_boﬁ
(
	`js⁄_©
(
meh
, 2));

249 
	`js⁄_as_boﬁ
(
	`js⁄_©
(
meh
, 3));

250 
	`js⁄_as_öt
(
	`js⁄_©
(
meh
, 4));

252 
	`js⁄_dñëe
(
node
);

254 
cout
 << "Ródög Unf‹m©ãd: " << 
	`˛ock
(Ë- 
°¨t
 << 
ídl
;

257 
°¨t
 = 
	`˛ock
();

258 
i
 = 0; i < 100; ++i){

259 
node
 = 
	`js⁄_√w
(
JSON_NODE
);

260 
j
 = 0; j < 
IT_COUNT
; ++j){

261 
JSONNODE
 * 
meh
 = 
	`js⁄_√w
(
JSON_NODE
);

262 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_f
("name", 14.783));

263 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_a
("another", "Iámá string"));

264 
	`js⁄_push_back
(
node
, 
meh
);

266 
meh
 = 
	`js⁄_√w
(
JSON_ARRAY
);

267 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_i
(
NULL
, 14));

268 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_i
("", 1));

269 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_b
(
NULL
, 
åue
));

270 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_b
("", 
Ál£
));

271 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_f
(
NULL
, 14.3243));

272 
	`js⁄_push_back
(
node
, 
meh
);

274 
	`js⁄_dñëe
(
node
);

276 
cout
 << "Buûdög: " << 
	`˛ock
(Ë- 
°¨t
 << 
ídl
;

280 
node
 = 
	`js⁄_√w
(
JSON_NODE
);

281 
j
 = 0; j < 
IT_COUNT
; ++j){

282 
JSONNODE
 * 
meh
 = 
	`js⁄_√w
(
JSON_NODE
);

283 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_f
("name", 14.783));

284 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_a
("another", "Iámá string"));

285 
	`js⁄_push_back
(
node
, 
meh
);

287 
meh
 = 
	`js⁄_√w
(
JSON_ARRAY
);

288 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_i
(
NULL
, 14));

289 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_i
("", 1));

290 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_b
(
NULL
, 
åue
));

291 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_b
("", 
Ál£
));

292 
	`js⁄_push_back
(
meh
, 
	`js⁄_√w_f
(
NULL
, 14.3243));

293 
	`js⁄_push_back
(
node
, 
meh
);

295 
°¨t
 = 
	`˛ock
();

296 
i
 = 0; i < 100; ++i){

297 * 
°r
 = 
	`js⁄_wrôe_f‹m©ãd
(
node
);

298 
	`js⁄_‰ì
(
°r
);

300 
cout
 << "Wrôög: " << 
	`˛ock
(Ë- 
°¨t
 << 
ídl
;

302 
°¨t
 = 
	`˛ock
();

303 
i
 = 0; i < 100; ++i){

304 * 
°r
 = 
	`js⁄_wrôe
(
node
);

305 
	`js⁄_‰ì
(
°r
);

307 
cout
 << "Wrôög Unf‹m©ãd: " << 
	`˛ock
(Ë- 
°¨t
 << 
ídl
;

308 
	`js⁄_dñëe
(
node
);

311 
	}
}

	@libjson/_internal/TestSuite/RunTestSuite2.cpp

1 
	~"RunTe°Suôe2.h
"

2 
	~"../Te°Suôe2/Ba£Te°.h
"

3 
	~"../Te°Suôe2/JSON_Ba£64/js⁄_decode64.h
"

4 
	~"../Te°Suôe2/JSON_Ba£64/js⁄_ícode64.h
"

5 
	~"../Te°Suôe2/JSONDebug/JSON_ASSERT.h
"

6 
	~"../Te°Suôe2/JSONDebug/JSON_ASSERT_SAFE.h
"

7 
	~"../Te°Suôe2/JSONDebug/JSON_FAIL.h
"

8 
	~"../Te°Suôe2/JSONDebug/JSON_FAIL_SAFE.h
"

9 
	~"../Te°Suôe2/JSONGlobÆs/js⁄SögÀt⁄.h
"

10 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidAºay.h
"

11 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidMembî.h
"

12 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidNamedObje˘.h
"

13 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidNumbî.h
"

14 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidObje˘.h
"

15 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidP¨tülRoŸ.h
"

16 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidRoŸ.h
"

17 
	~"../Te°Suôe2/JSONVÆid©‹/isVÆidSåög.h
"

18 
	~"../Te°Suôe2/JSONVÆid©‹/Resour˚s/vÆidyMa¸os.h
"

19 
	~"../Te°Suôe2/JSONVÆid©‹/£curôyTe°.h
"

20 
	~"../Te°Suôe2/NumbîToSåög/_¨eFlﬂtsEquÆ.h
"

21 
	~"../Te°Suôe2/NumbîToSåög/_©of.h
"

22 
	~"../Te°Suôe2/NumbîToSåög/_·ﬂ.h
"

23 
	~"../Te°Suôe2/NumbîToSåög/_ôﬂ.h
"

24 
	~"../Te°Suôe2/NumbîToSåög/_uôﬂ.h
"

25 
	~"../Te°Suôe2/NumbîToSåög/gëLíSize.h
"

26 
	~"../Te°Suôe2/NumbîToSåög/isNumîic.h
"

28 
	#RUNTEST
(
«me
Ë
ât
.
	`£tUp
(#«me);Åâ.
	`«me
();Åâ.
	`ã¨Down
()

	)

30 
	gRunTe°Suôe2
::
	$RunTe°s
(){

32 
ã°JSON_Ba£64__js⁄_decode64
 
	`ât
("testJSON_Base64__json_decode64");

33 
	`RUNTEST
(
ã°NŸBa£64
);

36 
ã°JSON_Ba£64__js⁄_ícode64
 
	`ât
("testJSON_Base64__json_encode64");

37 
	`RUNTEST
(
ã°Revî£EachOthî
);

38 
	`RUNTEST
(
ã°AŒCh¨s
);

41 
ã°JSONDebug_JSON_ASSERT
 
	`ât
("testJSONDebug_JSON_ASSERT");

42 
	`RUNTEST
(
ã°Pass
);

43 
	`RUNTEST
(
ã°Faû
);

46 
ã°JSONDebug_JSON_ASSERT_SAFE
 
	`ât
("testJSONDebug_JSON_ASSERT_SAFE");

47 
	`RUNTEST
(
ã°Pass
);

48 
	`RUNTEST
(
ã°Faû
);

51 
ã°JSONDebug_JSON_FAIL
 
	`ât
("testJSONDebug_JSON_FAIL");

52 
	`RUNTEST
(
ã°Faû
);

55 
ã°JSONDebug_JSON_FAIL_SAFE
 
	`ât
("testJSONDebug_JSON_FAIL_SAFE");

56 
	`RUNTEST
(
ã°Faû
);

59 
ã°JSONGlobÆs__js⁄SögÀt⁄
 
	`ât
("testJSONGlobals__jsonSingleton");

60 
	`RUNTEST
(
ã°VÆue
);

61 
	`RUNTEST
(
ã°NoVÆue
);

64 
ã°JSONVÆid©‹__isVÆidMembî
 
	`ât
("testJSONValidator__isValidMember");

65 
	`RUNTEST
(
ã°Membîs
);

66 
	`RUNTEST
(
ã°Såi˘
);

67 
	`RUNTEST
(
ã°NŸSåi˘
);

68 
	`RUNTEST
(
ã°NŸMembîs
);

69 
	`RUNTEST
(
ã°SuddíEnd
);

72 
ã°JSONVÆid©‹__isVÆidNumbî
 
	`ât
("testJSONValidator__isValidNumber");

73 
	`RUNTEST
(
ã°Posôive
);

74 
	`RUNTEST
(
ã°Neg©ive
);

75 
	`RUNTEST
(
ã°Posôive_Scõ¡ificNŸ©i⁄
);

76 
	`RUNTEST
(
ã°Neg©ive_Scõ¡ificNŸ©i⁄
);

77 
	`RUNTEST
(
ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
);

78 
	`RUNTEST
(
ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
);

79 
	`RUNTEST
(
ã°SuddíEnd
);

82 
ã°JSONVÆid©‹__isVÆidRoŸ
 
	`ât
("testJSONValidator__isValidRoot");

83 
	`RUNTEST
(
ã°RoŸs
);

84 
	`RUNTEST
(
ã°NŸRoŸs
);

85 
	`RUNTEST
(
ã°SuddíEnd
);

88 
ã°JSONVÆid©‹__isVÆidSåög
 
	`ât
("testJSONValidator__isValidString");

89 
	`RUNTEST
(
ã°N‹mÆ
);

90 
	`RUNTEST
(
ã°Unicode
);

91 
	`RUNTEST
(
ã°Såi˘
);

92 
	`RUNTEST
(
ã°NŸSåi˘
);

93 
	`RUNTEST
(
ã°NŸSåög
);

94 
	`RUNTEST
(
ã°SuddíEnd
);

97 
ã°JSONVÆid©‹__£curôyTe°
 
	`ât
("testJSONValidator__securityTest");

98 
	`RUNTEST
(
ã°£curôy
);

101 
ã°NumbîToSåög__¨eFlﬂtsEquÆ
 
	`ât
("testNumberToString__areFloatsEqual");

102 
	`RUNTEST
(
ã°EquÆ
);

103 
	`RUNTEST
(
ã°NŸEquÆ
);

104 
	`RUNTEST
(
ã°Clo£Enough
);

108 
ã°NumbîToSåög__©of
 
	`ât
("testNumberToString__atof");

109 
	`RUNTEST
(
ã°Posôive
);

110 
	`RUNTEST
(
ã°Neg©ive
);

111 
	`RUNTEST
(
ã°Posôive_Scõ¡ificNŸ©i⁄
);

112 
	`RUNTEST
(
ã°Neg©ive_Scõ¡ificNŸ©i⁄
);

113 
	`RUNTEST
(
ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
);

114 
	`RUNTEST
(
ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
);

115 
	`RUNTEST
(
ã°Såi˘
);

116 
	`RUNTEST
(
ã°NŸNumbîs
);

120 
ã°NumbîToSåög__·ﬂ
 
	`ât
("testNumberToString__ftoa");

121 
	`RUNTEST
(
ã°R™domNumbîs
);

122 
	`RUNTEST
(
ã°S≥cülizedI¡s
);

125 
ã°NumbîToSåög__ôﬂ
 
	`ât
("testNumberToString__itoa");

126 
	`RUNTEST
(
ã°Ch¨
);

127 
	`RUNTEST
(
ã°Sh‹t
);

128 
	`RUNTEST
(
ã°I¡
);

129 
	`RUNTEST
(
ã°L⁄g
);

130 
	`RUNTEST
(
ã°L⁄gL⁄g
);

133 
ã°NumbîToSåög__uôﬂ
 
	`ât
("testNumberToString__uitoa");

134 
	`RUNTEST
(
ã°Ch¨
);

135 
	`RUNTEST
(
ã°Sh‹t
);

136 
	`RUNTEST
(
ã°I¡
);

137 
	`RUNTEST
(
ã°L⁄g
);

138 
	`RUNTEST
(
ã°L⁄gL⁄g
);

141 
ã°NumbîToSåög__gëLíSize
 
	`ât
("testNumberToString__getLenSize");

142 
	`RUNTEST
(
ã°Såu˘
);

145 
ã°NumbîToSåög__isNumîic
 
	`ât
("testNumberToString__isNumeric");

146 
	`RUNTEST
(
ã°Posôive
);

147 
	`RUNTEST
(
ã°Neg©ive
);

148 
	`RUNTEST
(
ã°Posôive_Scõ¡ificNŸ©i⁄
);

149 
	`RUNTEST
(
ã°Neg©ive_Scõ¡ificNŸ©i⁄
);

150 
	`RUNTEST
(
ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
);

151 
	`RUNTEST
(
ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
);

152 
	`RUNTEST
(
ã°NŸNumbîs
);

154 
	}
}

	@libjson/_internal/TestSuite/RunTestSuite2.h

1 #i‚de‡
RUN_TEST_SUITE2_H


2 
	#RUN_TEST_SUITE2_H


	)

4 ˛as†
	cRunTe°Suôe2
 {

5 
	mpublic
:

6 
RunTe°s
();

	@libjson/_internal/TestSuite/StringTest.h

1 #i‚de‡
STRING_TEST_H


2 
	#STRING_TEST_H


	)

9 
	~<c°rög
>

10 
	~<c°dlib
>

12 
	tmych¨
;

14 
size_t
 
	$my°æí
(c⁄° 
mych¨
 * 
°r
){

15 
i
 = 0;

16 c⁄° 
mych¨
 * 
ô
 = 
°r
; *ô; ++ô, ++
i
){

19  
i
;

20 
	}
}

22 ˛as†
	cjs⁄_°rög
 {

23 
	mpublic
:

24 
	sc⁄°_ôî©‹
 {

25 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 ++(Ë{ ++
ô
;  *
	mthis
; }

26 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 --(Ë{ --
	mô
;  *
	mthis
; }

27 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 +=(
i
Ë{ 
ô
 +i;  *
	mthis
; }

28 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 -=(
i
Ë{ 
ô
 -i;  *
	mthis
; }

29 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 ++() {

30 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

31 ++
	mô
;

32  
	mªsu…
;

34 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 --() {

35 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

36 --
	mô
;

37  
	mªsu…
;

39 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 +(
	mi
) const {

40 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

41 
	mªsu…
.
	mô
 +
i
;

42  
	mªsu…
;

44 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 -(
	mi
) const {

45 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

46 
	mªsu…
.
	mô
 -
i
;

47  
	mªsu…
;

49 
ölöe
 
size_t
 
	m›î©‹
 -(
c⁄°_ôî©‹
 
	mŸhî
) const {

50  
	mô
 - 
	mŸhî
.it;

52 
ölöe
 
	mmych¨
 & 
	m›î©‹
 [](
size_t
 
	mpos
Ëc⁄° {  
	mô
[
pos
]; };

53 
ölöe
 
	mmych¨
 & 
	m›î©‹
 *(Ëc⁄° {  *
	mô
; }

54 
ölöe
 
boﬁ
 
	m›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 == other.it; }

55 
ölöe
 
boﬁ
 
	m›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 != other.it; }

56 
ölöe
 
boﬁ
 
	m›î©‹
 > (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° {  
	mô
 > other.it; }

57 
ölöe
 
boﬁ
 
	m›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 >= other.it; }

58 
ölöe
 
boﬁ
 
	m›î©‹
 < (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° {  
	mô
 < other.it; }

59 
ölöe
 
boﬁ
 
	m›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 <= other.it; }

60 
ölöe
 
	mc⁄°_ôî©‹
 & 
	m›î©‹
 = (c⁄° 
c⁄°_ôî©‹
 & 
‹ig
Ë{ 
ô
 = orig.ô;  *
	mthis
; }

61 
c⁄°_ôî©‹
 (c⁄° c⁄°_ôî©‹ & 
‹ig
Ë: 
ô
(orig.it) {}

62 
c⁄°_ôî©‹
 (c⁄° 
mych¨
 * 
∂a˚
Ë: 
ô
((mychar*)place) {}

63 
c⁄°_ôî©‹
(Ë: 
ô
(0) {};

65 
mych¨
 * 
	mô
;

68 
	sôî©‹
 {

69 
ölöe
 
	gôî©‹
& 
	g›î©‹
 ++(Ë{ ++
	gô
;  *
	gthis
; }

70 
ölöe
 
	gôî©‹
& 
	g›î©‹
 --(Ë{ --
	gô
;  *
	gthis
; }

71 
ölöe
 
	gôî©‹
& 
	g›î©‹
 +=(
i
Ë{ 
ô
 +i;  *
	gthis
; }

72 
ölöe
 
	gôî©‹
& 
	g›î©‹
 -=(
i
Ë{ 
ô
 -i;  *
	gthis
; }

73 
ölöe
 
ôî©‹
 
	g›î©‹
 ++() {

74 
ôî©‹
 
ªsu…
(*
this
);

75 ++
	gô
;

76  
	gªsu…
;

78 
ölöe
 
ôî©‹
 
	g›î©‹
 --() {

79 
ôî©‹
 
ªsu…
(*
this
);

80 --
	gô
;

81  
	gªsu…
;

83 
ölöe
 
ôî©‹
 
	g›î©‹
 +(
	gi
) const {

84 
ôî©‹
 
ªsu…
(*
this
);

85 
	gªsu…
.
	gô
 +
i
;

86  
	gªsu…
;

88 
ölöe
 
ôî©‹
 
	g›î©‹
 -(
	gi
) const {

89 
ôî©‹
 
ªsu…
(*
this
);

90 
	gªsu…
.
	gô
 -
i
;

91  
	gªsu…
;

93 
ölöe
 
	gmych¨
 & 
	g›î©‹
 [](
size_t
 
	gpos
Ëc⁄° {  
	gô
[
pos
]; };

94 
ölöe
 
	gmych¨
 & 
	g›î©‹
 *(Ëc⁄° {  *
	gô
; }

95 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 == other.it; }

96 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 != other.it; }

97 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° {  
	gô
 > other.it; }

98 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 >= other.it; }

99 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° {  
	gô
 < other.it; }

100 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 <= other.it; }

101 
ölöe
 
	gôî©‹
 & 
	g›î©‹
 = (c⁄° 
ôî©‹
 & 
‹ig
Ë{ 
ô
 = orig.ô;  *
	gthis
; }

102 
ölöe
 
›î©‹
 
c⁄°_ôî©‹
(Ëc⁄° 
	gjs⁄_nŸhrow
 {  c⁄°_ôî©‹(
ô
); }

103 
ôî©‹
 (c⁄° iãøt‹ & 
‹ig
Ë: 
ô
(orig.it) {}

104 
ôî©‹
 (c⁄° 
mych¨
 * 
∂a˚
Ë: 
ô
((mychar*)place) {}

106 
mych¨
 * 
ô
;

111 c⁄° 
size_t
 
	g≈os
 = 0xFFFFFFFF;

112 
	$js⁄_°rög
(Ë: 
	`Àn
(0), 
	$°r
(0){

113 
	`£tToCSå
("", 0);

114 
	}
}

116 
	$js⁄_°rög
(c⁄° 
mych¨
 * 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

117 
	`£tToCSå
(
meh
, 
	`my°æí
(meh));

118 
	}
}

120 
	$js⁄_°rög
(c⁄° 
mych¨
 * 
meh
, 
size_t
 
l
Ë: 
	`Àn
÷), 
	$°r
(0){

121 
	`£tToCSå
(
meh
, 
l
);

122 
°r
[
Àn
] = '\0';

123 
	}
}

125 
	$js⁄_°rög
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
Ë: 
	`Àn
(0), 
	$°r
(0){

126 
	`£tToCSå
(
beg
.
ô
, 
í
.it - beg.it);

127 
°r
[
Àn
] = '\0';

128 
	}
}

130 
	$js⁄_°rög
(c⁄° 
c⁄°_ôî©‹
 & 
beg
, c⁄° c⁄°_ôî©‹ & 
í
Ë: 
	`Àn
(0), 
	$°r
(0){

131 
	`£tToCSå
(
beg
.
ô
, 
í
.it - beg.it);

132 
°r
[
Àn
] = '\0';

133 
	}
}

135 
	$js⁄_°rög
(c⁄° 
js⁄_°rög
 & 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

136 
	`£tToCSå
(
meh
.
	`c_°r
(), meh.
Àn
);

137 
	}
}

139 ~
	$js⁄_°rög
(){ 
°d
::
	`‰ì
(
°r
); 
	}
};

141 
	$js⁄_°rög
(
l
, 
mych¨
 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

142 
°r
 = (
mych¨
*)
°d
::
	`mÆloc
((
l
 + 1) * (mychar));

143 
Àn
 = 
l
;

144 
i
 = 0; i < 
l
; ++i){

145 
°r
[
i
] = 
meh
;

147 
°r
[
l
] = '\0';

148 
	}
}

150 
	$sw≠
(
js⁄_°rög
 & 
meh
){

151 
size_t
 
_Àn
 = 
Àn
;

152 
mych¨
 * 
_°r
 = 
°r
;

153 
Àn
 = 
meh
.len;

154 
°r
 = 
meh
.str;

155 
meh
.
Àn
 = 
_Àn
;

156 
meh
.
°r
 = 
_°r
;

157 
	}
}

159 
ôî©‹
 
	$begö
(){  
	`ôî©‹
(
°r
); 
	}
};

160 
ôî©‹
 
	$íd
(){  
	`ôî©‹
(
°r
 + 
	`Àngth
()); 
	}
};

161 c⁄° 
ôî©‹
 
	$begö
(Ëc⁄° {  
	`ôî©‹
(
°r
); 
	}
};

162 c⁄° 
ôî©‹
 
	$íd
(Ëc⁄° {  
	`ôî©‹
(
°r
 + 
	`Àngth
()); 
	}
};

163 
	$assign
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
){

164 
	`js⁄_°rög
(
beg
, 
í
).
	`sw≠
(*
this
);

165 
	}
}

166 
	gjs⁄_°rög
 & 
	$≠≥nd
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
){

167 
js⁄_°rög
 
	`ãmp
(
beg
, 
í
);

168  *
this
 +
ãmp
;

169 
	}
}

171 c⁄° 
mych¨
 * 
	$c_°r
(Ëc⁄° {  
°r
; 
	}
};

172 c⁄° 
mych¨
 * 
	$d©a
(Ëc⁄° {  
°r
; 
	}
};

173 
size_t
 
	$Àngth
(Ëc⁄° {  
Àn
; 
	}
};

174 
size_t
 
	$ˇ∑côy
(Ëc⁄° {  
Àn
; 
	}
};

175 
boﬁ
 
	$em±y
(Ëc⁄° {  
Àn
 =0; 
	}
};

177 
boﬁ
 
	g›î©‹
 ==(c⁄° 
js⁄_°rög
 & 
Ÿhî
) const {

178 i‡(
Àn
 !
Ÿhî
.ÀnË 
Ál£
;

179  
memcmp
(
°r
, 
Ÿhî
.°r, 
Àn
 * (
mych¨
)) == 0;

182 
boﬁ
 
	g›î©‹
 !=(c⁄° 
js⁄_°rög
 & 
Ÿhî
) const {

183  !(*
this
 =
Ÿhî
);

186 c⁄° & 
	g›î©‹
[] (
size_t
 
	gpos
Ëc⁄° {  
	g°r
[
pos
]; }

187 & 
	g›î©‹
[] ( 
size_t
 
	gpos
 ){  
	g°r
[
pos
]; }

189 
	gjs⁄_°rög
 & 
	g›î©‹
 = (c⁄° 
js⁄_°rög
 & 
meh
) {

190 
°d
::
‰ì
(
°r
);

191 
£tToCSå
(
meh
.
c_°r
(), meh.
Àn
);

192  *
	gthis
;

195 
	gjs⁄_°rög
 & 
	g›î©‹
 = (c⁄° 
mych¨
 * 
meh
) {

196 
°d
::
‰ì
(
°r
);

197 
£tToCSå
(
meh
, 
my°æí
(meh));

198  *
	gthis
;

201 
	gjs⁄_°rög
 & 
	g›î©‹
 +(c⁄° 
js⁄_°rög
 & 
Ÿhî
) {

202 
size_t
 
√wÀn
 = 
Àn
 + 
Ÿhî
.len;

203 
mych¨
 * 
	g√w°r
 = (mych¨*)
°d
::
mÆloc
((
√wÀn
 + 1) * (mychar));

204 
	g°d
::
mem˝y
(
√w°r
, 
°r
, 
Àn
 * (
mych¨
));

205 
	g°d
::
mem˝y
(
√w°r
 + 
Àn
, 
Ÿhî
.
°r
, (Ÿhî.À¿+ 1Ë* (
mych¨
));

206 
	gÀn
 = 
√wÀn
;

207 
	g°d
::
‰ì
(
°r
);

208 
	g°r
 = 
√w°r
;

209  *
	gthis
;

212 c⁄° 
js⁄_°rög
 
	g›î©‹
 + (c⁄° 
	gjs⁄_°rög
 & 
	gŸhî
) const {

213 
js⁄_°rög
 
	gªsu…
 = *
this
;

214 
	gªsu…
 +
Ÿhî
;

215  
	gªsu…
;

218 
	gjs⁄_°rög
 & 
	g›î©‹
 +(c⁄° 
mych¨
 
Ÿhî
) {

219 
mych¨
 
ãmp
[2] = {
Ÿhî
, '\0'};

220 
js⁄_°rög
 
ãmp_s
(
ãmp
);

221  (*
	gthis
Ë+
ãmp_s
;

224 c⁄° 
js⁄_°rög
 
	g›î©‹
 + (c⁄° 
mych¨
 
	gŸhî
) const {

225 
js⁄_°rög
 
	gªsu…
 = *
this
;

226 
	gªsu…
 +
Ÿhî
;

227  
	gªsu…
;

230 
	$ª£rve
(
size_t
){
	}
};

231 
	$˛ór
(){
	`£tToCSå
("", 0);
	}
}

233 
js⁄_°rög
 
	$sub°r
(
size_t
 
pos
 = 0, size_à
n
 = 
≈os
) const {

234 
js⁄_°rög
 
	`ªs
(
Ál£
, false, false);

235 i‡(
n
 > 
Àn
)Ç =Üen;

236 i‡(
n
 + 
pos
 > 
Àn
)Ç =Üen -Öos;

237 
ªs
.
	`£tToCSå
(
°r
 + 
pos
, 
n
);

238 
ªs
.
°r
[
n
] = 
L
'\0';

239  
ªs
;

240 
	}
}

243 
size_t
 
	$föd
 ( 
mych¨
 
c
, 
size_t
 
pos
 = 0 ) const {

244 i‡(
pos
 > 
Àn
Ë 
≈os
;

245 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

246 i‡(*
i
 =
c
Ë i - 
°r
;

248  
≈os
;

249 
	}
}

251 
size_t
 
	$föd_fú°_nŸ_of
 ( c⁄° 
mych¨
* 
s
, 
size_t
 
pos
 = 0 ) const {

252 i‡(
pos
 > 
Àn
Ë 
≈os
;

253 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

254 
boﬁ
 
found
 = 
Ál£
;

255 c⁄° 
mych¨
 * 
k
 = 
s
; *k; ++k){

256 i‡(*
i
 =*
k
){

257 
found
 = 
åue
;

261 i‡(!
found
Ë 
i
 - 
°r
;

263  
≈os
;

264 
	}
}

266 
size_t
 
	$föd_fú°_of
 ( c⁄° 
mych¨
* 
s
, 
size_t
 
pos
 = 0 ) const {

267 i‡(
pos
 > 
Àn
Ë 
≈os
;

268 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

269 c⁄° 
mych¨
 * 
k
 = 
s
; *k; ++k){

270 i‡(*
i
 =*
k
){

271  
i
 - 
°r
;

275  
≈os
;

276 
	}
}

278 
ôî©‹
 
	$îa£
(
ôî©‹
 
ô
, iãøt‹ 
ô2
){

279 
size_t
 
mov
 = 
ô2
.
ô
 - it.it;

280 
°d
::
	`memmove
(
°r
, 
ô2
.
ô
, (
Àn
 - 
mov
 + 1Ë* (
mych¨
));

281 
Àn
 -
mov
;

282  
ô
;

283 
	}
}

284 
	g¥iv©e
:

285 
	$js⁄_°rög
(
boﬁ
, boﬁ, boﬁË: 
	`Àn
(0), 
	$°r
(0){
	}
};

287 
	$£tToCSå
(c⁄° 
mych¨
 * 
°
, 
size_t
 
l
){

288 
Àn
 = 
l
;

289 
°r
 = (
mych¨
*)
°d
::
	`mem˝y
(°d::
	`mÆloc
((
Àn
 + 1Ë* (mych¨)), 
°
, (len + 1) * (mychar));

290 
	}
}

292 
size_t
 
	gÀn
;

293 
mych¨
 * 
	g°r
;

	@libjson/_internal/TestSuite/TestAssign.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 
	gTe°Suôe
::
	$Te°Assignög
(){

5 
UnôTe°
::
	`SëPªfix
("TestAssign.cpp - Assigning");

6 #ifde‡
JSON_LIBRARY


8 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

9 
	`js⁄_£t_«me
(
ã°1
, 
	`JSON_TEXT
("hello world"));

10 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_«me
(
ã°1
);

11 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello world"));

12 
	`js⁄_‰ì
(
ªs
);

15 
	`js⁄_£t_a
(
ã°1
, 
	`JSON_TEXT
("Hello world"));

16 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_STRING
);

17 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

18 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("Hello world"));

19 
	`js⁄_‰ì
(
ªs
);

22 
	`js⁄_£t_i
(
ã°1
, 13);

23 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NUMBER
);

24 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

25 #ifde‡
JSON_CASTABLE


26 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("13"));

28 
	`js⁄_‰ì
(
ªs
);

29 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ã°1
), 13);

30 
	`as£πEquÆs
(
	`js⁄_as_Êﬂt
(
ã°1
), 13.0f);

33 
	`js⁄_£t_f
(
ã°1
, 13.7f);

34 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NUMBER
);

35 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

36 #ifde‡
JSON_CASTABLE


37 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("13.7"));

39 
	`js⁄_‰ì
(
ªs
);

40 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ã°1
), 13);

41 
	`as£πEquÆs
(
	`js⁄_as_Êﬂt
(
ã°1
), 13.7f);

44 
	`js⁄_£t_f
(
ã°1
, 13.0f);

45 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NUMBER
);

46 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

47 #ifde‡
JSON_CASTABLE


48 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("13"));

50 
	`js⁄_‰ì
(
ªs
);

51 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ã°1
), 13);

52 
	`as£πEquÆs
(
	`js⁄_as_Êﬂt
(
ã°1
), 13.0f);

55 
	`js⁄_£t_b
(
ã°1
, ()
åue
);

56 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_BOOL
);

57 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

58 #ifde‡
JSON_CASTABLE


59 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("true"));

61 
	`js⁄_‰ì
(
ªs
);

62 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°1
), 
åue
);

65 
	`js⁄_£t_b
(
ã°1
, 
Ál£
);

66 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_BOOL
);

67 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

68 #ifde‡
JSON_CASTABLE


69 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("false"));

71 
	`js⁄_‰ì
(
ªs
);

72 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°1
), 
Ál£
);

75 
	`js⁄_nuŒify
(
ã°1
);

76 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NULL
);

77 
ªs
 = 
	`js⁄_as_°rög
(
ã°1
);

78 #ifde‡
JSON_CASTABLE


79 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("null"));

81 
	`js⁄_‰ì
(
ªs
);

83 
	`js⁄_dñëe
(
ã°1
);

87 
JSONNode
 
ã°1
;

88 
ã°1
.
	`£t_«me
(
	`JSON_TEXT
("hello world"));

89 
	`as£πEquÆs
(
ã°1
.
	`«me
(), 
	`JSON_TEXT
("hello world"));

92 
ã°1
 = 
	`JSON_TEXT
("Hello world");

93 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_STRING
);

94 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("Hello world"));

97 
ã°1
 = 
	`JSON_TEXT
('\0');

98 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NUMBER
);

99 #ifde‡
JSON_CASTABLE


100 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("0"));

102 
	`as£πEquÆs
(
ã°1
.
	`as_öt
(), 0);

103 
	`as£πEquÆs
(
ã°1
.
	`as_Êﬂt
(), 0.0f);

106 
ã°1
 = 13;

107 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NUMBER
);

108 #ifde‡
JSON_CASTABLE


109 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("13"));

111 
	`as£πEquÆs
(
ã°1
.
	`as_öt
(), 13);

112 
	`as£πEquÆs
(
ã°1
.
	`as_Êﬂt
(), 13.0f);

115 
ã°1
 = 13.7f;

116 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NUMBER
);

117 #ifde‡
JSON_CASTABLE


118 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("13.7"));

120 
	`as£πEquÆs
(
ã°1
.
	`as_öt
(), 13);

121 
	`as£πEquÆs
(
ã°1
.
	`as_Êﬂt
(), 13.7f);

124 
ã°1
 = 13.0f;

125 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NUMBER
);

126 #ifde‡
JSON_CASTABLE


127 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("13"));

129 
	`as£πEquÆs
(
ã°1
.
	`as_öt
(), 13);

130 
	`as£πEquÆs
(
ã°1
.
	`as_Êﬂt
(), 13.0f);

133 
ã°1
 = 
åue
;

134 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_BOOL
);

135 #ifde‡
JSON_CASTABLE


136 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("true"));

138 
	`as£πEquÆs
(
ã°1
.
	`as_boﬁ
(), 
åue
);

141 
ã°1
 = 
Ál£
;

142 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_BOOL
);

143 #ifde‡
JSON_CASTABLE


144 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("false"));

146 
	`as£πEquÆs
(
ã°1
.
	`as_boﬁ
(), 
Ál£
);

149 
ã°1
.
	`nuŒify
();

150 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NULL
);

151 #ifde‡
JSON_CASTABLE


152 
	`as£πEquÆs
(
ã°1
.
	`as_°rög
(), 
	`JSON_TEXT
("null"));

155 
	}
}

	@libjson/_internal/TestSuite/TestBinary.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSON_Ba£64.h
"

4 #i‡
deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

5 
	gTe°Suôe
::
	$Te°Ba£64
(){

6 
UnôTe°
::
	`SëPªfix
("TestBinary.cpp - Base 64");

8 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"A", 1)), "A");

9 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"AB", 2)), "AB");

10 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABC", 3)), "ABC");

11 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCD", 4)), "ABCD");

12 #ifde‡
JSON_SAFE


13 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"", 0)), "");

14 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123!abc")), "");

15 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123=abc")), "");

16 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123abc===")), "");

19 
ãmp
[255];

20 
i
 = 0; i < 255; ++i){

21 
ãmp
[
i
] = ()i;

23 
js⁄_°rög
 
ts
 = 
JSONBa£64
::
	`js⁄_ícode64
(
ãmp
, 255);

24 
°d
::
°rög
 
rs
 = 
JSONBa£64
::
	`js⁄_decode64
(
ts
);

25 
	`as£πEquÆs
(
rs
.
	`size
(), 255);

26 
	`as£πEquÆs
(
	`memcmp
(
rs
.
	`d©a
(), 
ãmp
, 255), 0);

28 #i‡
	`deföed
(
JSON_LIBRARY
Ë&& deföed(
JSON_EXPOSE_BASE64
)

29 
js⁄_ch¨
 * 
ã°
 = 
	`js⁄_ícode64
(
ãmp
, 255);

30 
	`as£πNŸNuŒ
(
ã°
);

31 
_size
;

32 * 
bö
 = 
	`js⁄_decode64
(
ã°
, & 
_size
);

33 
	`as£πNŸNuŒ
(
bö
);

34 
	`as£πEquÆs
(
_size
, 255);

35 
	`as£πEquÆs
(
	`memcmp
(
bö
, 
ãmp
, 255), 0);

36 
	`js⁄_‰ì
(
ã°
);

37 
	`js⁄_‰ì
(
bö
);

39 
	}
}

	@libjson/_internal/TestSuite/TestChildren.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 
	gTe°Suôe
::
	$Te°Chûdªn
(){

5 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children");

6 #ifde‡
JSON_LIBRARY


7 
	#as£πChûd
(
node
, 
ödex
, 
func
, 
vÆue
)\

8 i‡(
JSONNODE
 * 
bœbœ
 = 
	`js⁄_©
(
node
, 
ödex
)){\

9 
	`as£πEquÆs
(
	`func
(
bœbœ
), 
vÆue
);\

11 
	`FAIL
("no child");\

12 }

	)

14 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

15 
JSONNODE
 * 
ã°2
 = 
	`js⁄_√w
(
JSON_NODE
);

18 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

19 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

21 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NODE
);

22 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°2
), 
JSON_NODE
);

23 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 0);

24 
	`as£πEquÆs
(
	`js⁄_size
(
ã°2
), 0);

25 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

28 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

29 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 1);

30 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

31 
	`js⁄_push_back
(
ã°2
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

32 
	`as£πEquÆs
(
	`js⁄_size
(
ã°2
), 1);

33 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

35 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

36 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

38 
	`js⁄_mîge
(
ã°1
, 
ã°2
);

39 #ifde‡
JSON_UNIT_TEST


40 #ifde‡
JSON_REF_COUNT


41 
	`as£πEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

43 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

47 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children 2");

49 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_©
(
ã°1
, 0)){

50 
js⁄_ch¨
 * 
°r
 = 
	`js⁄_as_°rög
(
ãmp
);

51 
	`as£πCSåögSame
(
°r
, 
	`JSON_TEXT
("world"));

52 
	`js⁄_‰ì
(
°r
);

53 
°r
 = 
	`js⁄_«me
(
ãmp
);

54 
	`as£πCSåögSame
(
°r
, 
	`JSON_TEXT
("hi"));

55 
	`js⁄_‰ì
(
°r
);

57 
	`FAIL
("at failed");

60 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

61 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

63 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 1);

64 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back_©
(
ã°1
, 0)){

65 
js⁄_ch¨
 * 
°r
 = 
	`js⁄_as_°rög
(
ãmp
);

66 
	`as£πCSåögSame
(
°r
, 
	`JSON_TEXT
("world"));

67 
	`js⁄_‰ì
(
°r
);

68 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 0);

69 
	`js⁄_dñëe
(
ãmp
);

71 
	`FAIL
("POP FAILED");

74 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children 3");

76 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

77 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back
(
ã°1
, 
	`JSON_TEXT
("hi"))){

78 
js⁄_ch¨
 * 
°r
 = 
	`js⁄_as_°rög
(
ãmp
);

79 
	`as£πCSåögSame
(
°r
, 
	`JSON_TEXT
("world"));

80 
	`js⁄_‰ì
(
°r
);

81 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 0);

82 
	`js⁄_dñëe
(
ãmp
);

84 
	`FAIL
("POPÇame FAILED");

87 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


88 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

89 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back_noˇ£
(
ã°1
, 
	`JSON_TEXT
("HI"))){

90 
js⁄_ch¨
 * 
°r
 = 
	`js⁄_as_°rög
(
ãmp
);

91 
	`as£πCSåögSame
(
°r
, 
	`JSON_TEXT
("world"));

92 
	`js⁄_‰ì
(
°r
);

93 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 0);

94 
	`js⁄_dñëe
(
ãmp
);

96 
	`FAIL
("POPÇame FAILED");

100 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

101 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

103 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children 4");

106 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 0);

107 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("one"), 1));

108 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("two"), 2));

109 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("three"), 3));

110 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("four"), 4));

111 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("five"), 5));

112 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_i
(
	`JSON_TEXT
("six"), 6));

113 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 6);

115 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

116 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

119 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back
(
ã°1
, 
	`JSON_TEXT
("four"))){

120 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ãmp
), 4);

121 
	`as£πChûd
(
ã°1
, 0, 
js⁄_as_öt
, 1);

122 
	`as£πChûd
(
ã°1
, 1, 
js⁄_as_öt
, 2);

123 
	`as£πChûd
(
ã°1
, 2, 
js⁄_as_öt
, 3);

124 
	`as£πChûd
(
ã°1
, 3, 
js⁄_as_öt
, 5);

125 
	`as£πChûd
(
ã°1
, 4, 
js⁄_as_öt
, 6);

126 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 5);

128 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

129 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

130 
	`js⁄_dñëe
(
ãmp
);

132 
	`FAIL
("noÖop");

135 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children 5");

137 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


138 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back_noˇ£
(
ã°1
, 
	`JSON_TEXT
("SIX"))){

140 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back
(
ã°1
, 
	`JSON_TEXT
("six"))){

142 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ãmp
), 6);

143 
	`as£πChûd
(
ã°1
, 0, 
js⁄_as_öt
, 1);

144 
	`as£πChûd
(
ã°1
, 1, 
js⁄_as_öt
, 2);

145 
	`as£πChûd
(
ã°1
, 2, 
js⁄_as_öt
, 3);

146 
	`as£πChûd
(
ã°1
, 3, 
js⁄_as_öt
, 5);

147 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 4);

149 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

150 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

151 
	`js⁄_dñëe
(
ãmp
);

153 
	`FAIL
("noÖop_nocase");

156 
UnôTe°
::
	`SëPªfix
("TestChildren.cpp - Children 6");

158 i‡(
JSONNODE
 * 
ãmp
 = 
	`js⁄_p›_back_©
(
ã°1
, 2)){

159 
	`as£πEquÆs
(
	`js⁄_as_öt
(
ãmp
), 3);

160 
	`as£πChûd
(
ã°1
, 0, 
js⁄_as_öt
, 1);

161 
	`as£πChûd
(
ã°1
, 1, 
js⁄_as_öt
, 2);

162 
	`as£πChûd
(
ã°1
, 2, 
js⁄_as_öt
, 5);

163 
	`as£πEquÆs
(
	`js⁄_size
(
ã°1
), 3);

165 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

166 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

167 
	`js⁄_dñëe
(
ãmp
);

169 
	`FAIL
("noÖop 2");

172 
	`js⁄_dñëe
(
ã°1
);

173 
	`js⁄_dñëe
(
ã°2
);

175 #ifde‡
JSON_UNIT_TEST


176 
JSONNODE
 * 
‰esh
 = 
	`js⁄_√w
(
JSON_NODE
);

177 
	`js⁄_ª£rve
(
‰esh
, 3);

178 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

179 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 0);

180 
	`js⁄_push_back
(
‰esh
, 
	`js⁄_√w
(
JSON_NULL
));

181 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

182 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 1);

183 
	`js⁄_push_back
(
‰esh
, 
	`js⁄_√w
(
JSON_NULL
));

184 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

185 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 2);

186 
	`js⁄_push_back
(
‰esh
, 
	`js⁄_√w
(
JSON_NULL
));

187 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

188 
	`as£πEquÆs
(((
JSONNode
*)
‰esh
Ë-> 
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 3);

189 
	`js⁄_dñëe
(
‰esh
);

194 
JSONNode
 
ã°1
;

195 
JSONNode
 
ã°2
;

196 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

197 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

199 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NODE
);

200 
	`as£πEquÆs
(
ã°2
.
	`ty≥
(), 
JSON_NODE
);

201 
	`as£πEquÆs
(
ã°1
.
	`size
(), 0);

202 
	`as£πEquÆs
(
ã°2
.
	`size
(), 0);

203 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

204 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

205 
	`as£πEquÆs
(
ã°1
.
	`size
(), 1);

206 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

207 
ã°2
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

208 
	`as£πEquÆs
(
ã°2
.
	`size
(), 1);

209 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

211 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

212 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

214 
ã°1
.
	`mîge
(
ã°2
);

215 #ifde‡
JSON_UNIT_TEST


216 #ifde‡
JSON_REF_COUNT


217 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

219 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

223 
åy
 {

224 
	`as£πEquÆs
(
ã°1
.
	`©
(0), 
	`JSON_TEXT
("world"));

225 
	`as£πEquÆs
(
ã°1
.
	`©
(0).
	`«me
(), 
	`JSON_TEXT
("hi"));

226 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

227 
	`FAIL
("exception caught");

230 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

231 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

233 
	`as£πEquÆs
(
ã°1
.
	`size
(), 1);

234 
åy
 {

235 
JSONNode
 
ªs
 = 
ã°1
.
	`p›_back
(0);

236 
	`as£πEquÆs
(
ªs
, 
	`JSON_TEXT
("world"));

237 
	`as£πEquÆs
(
ã°1
.
	`size
(), 0);

238 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

239 
ªs
 = 
ã°1
.
	`p›_back
(
	`JSON_TEXT
("hi"));

240 
	`as£πEquÆs
(
ªs
, 
	`JSON_TEXT
("world"));

241 
	`as£πEquÆs
(
ã°1
.
	`size
(), 0);

242 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


243 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

244 
ªs
 = 
ã°1
.
	`p›_back_noˇ£
(
	`JSON_TEXT
("HI"));

245 
	`as£πEquÆs
(
ªs
, 
	`JSON_TEXT
("world"));

246 
	`as£πEquÆs
(
ã°1
.
	`size
(), 0);

248 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

249 
	`FAIL
("exception caught 2");

252 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

253 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

256 
	`as£πEquÆs
(
ã°1
.
	`size
(), 0);

257 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("one"), 1));

258 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("two"), 2));

259 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("three"), 3));

260 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("four"), 4));

261 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("five"), 5));

262 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("six"), 6));

263 
	`as£πEquÆs
(
ã°1
.
	`size
(), 6);

265 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

266 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

270 
JSONNode
 
ªs
;

272 
åy
 {

273 
ªs
 = 
ã°1
.
	`p›_back
(
	`JSON_TEXT
("four"));

274 
	`as£πEquÆs
(
ªs
, 4);

275 
	`as£πEquÆs
(
ã°1
[0], 1);

276 
	`as£πEquÆs
(
ã°1
[1], 2);

277 
	`as£πEquÆs
(
ã°1
[2], 3);

278 
	`as£πEquÆs
(
ã°1
[3], 5);

279 
	`as£πEquÆs
(
ã°1
[4], 6);

280 
	`as£πEquÆs
(
ã°1
.
	`size
(), 5);

282 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

283 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

284 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

285 
	`FAIL
("exception caughtÖop");

288 
åy
 {

289 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


290 
ªs
 = 
ã°1
.
	`p›_back_noˇ£
(
	`JSON_TEXT
("SIX"));

292 
ªs
 = 
ã°1
.
	`p›_back
(
	`JSON_TEXT
("six"));

294 
	`as£πEquÆs
(
ªs
, 6);

295 
	`as£πEquÆs
(
ã°1
[0], 1);

296 
	`as£πEquÆs
(
ã°1
[1], 2);

297 
	`as£πEquÆs
(
ã°1
[2], 3);

298 
	`as£πEquÆs
(
ã°1
[3], 5);

299 
	`as£πEquÆs
(
ã°1
.
	`size
(), 4);

301 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

302 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

303 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

304 
	`FAIL
("exception caughtÖop_nocase");

307 
åy
 {

308 
ªs
 = 
ã°1
.
	`p›_back
(2);

309 
	`as£πEquÆs
(
ªs
, 3);

310 
	`as£πEquÆs
(
ã°1
[0], 1);

311 
	`as£πEquÆs
(
ã°1
[1], 2);

312 
	`as£πEquÆs
(
ã°1
[2], 5);

313 
	`as£πEquÆs
(
ã°1
.
	`size
(), 3);

315 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

316 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

317 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

318 
	`FAIL
("exception caughtÖop 2");

322 #ifde‡
JSON_UNIT_TEST


323 
JSONNode
 
	`‰esh
(
JSON_NODE
);

324 
‰esh
.
	`ª£rve
(3);

325 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

327 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 0);

328 
‰esh
.
	`push_back
(
	`JSONNode
(
JSON_NULL
));

329 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

331 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 1);

332 
‰esh
.
	`push_back
(
	`JSONNode
(
JSON_NULL
));

333 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

334 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 2);

335 
‰esh
.
	`push_back
(
	`JSONNode
(
JSON_NULL
));

336 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
myˇ∑côy
, 3);

337 
	`as£πEquÆs
(
‰esh
.
öã∫Æ
 -> 
CHILDREN
 -> 
mysize
, 3);

340 
	}
}

	@libjson/_internal/TestSuite/TestComments.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 #ifde‡
JSON_COMMENTS


5 
	gTe°Suôe
::
	$Te°Commíts
(){

6 
UnôTe°
::
	`SëPªfix
("TestComments.cpp - Comments");

7 #ifde‡
JSON_READ_PRIORITY


8 #ifde‡
JSON_LIBRARY


10 
JSONNODE
 * 
⁄e
 = 
	`js⁄_√w
(
JSON_NULL
);

11 
	`js⁄_£t_i
(
⁄e
, 15);

12 
JSONNODE
 * 
two
 = 
	`js⁄_√w
(
JSON_NULL
);

13 
	`js⁄_£t_i
(
two
, 15);

14 
	`as£πTrue
(
	`js⁄_equÆ
(
⁄e
, 
two
));

15 
	`js⁄_£t_commít
(
⁄e
, 
	`JSON_TEXT
("Number"));

16 
	`as£πTrue
(
	`js⁄_equÆ
(
⁄e
, 
two
));

17 
	`js⁄_dñëe
(
⁄e
);

18 
	`js⁄_dñëe
(
two
);

20 
JSONNODE
 * 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("#oneÜine comment\n{\"hello\":\"world\"}"));

21 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

22 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

23 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

24 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

25 
	`js⁄_‰ì
(
ªs
);

26 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

27 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

28 
	`js⁄_‰ì
(
ªs
);

29 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

30 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

31 
	`js⁄_‰ì
(
ªs
);

32 
	`js⁄_dñëe
(
ã°
);

34 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("//oneÜine comment\n{\"hello\":\"world\"}"));

35 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

36 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

37 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

38 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

39 
	`js⁄_‰ì
(
ªs
);

40 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

41 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

42 
	`js⁄_‰ì
(
ªs
);

43 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

44 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

45 
	`js⁄_‰ì
(
ªs
);

46 
	`js⁄_dñëe
(
ã°
);

48 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*/{\"hello\":\"world\"}"));

49 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

50 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

51 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

52 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

53 
	`js⁄_‰ì
(
ªs
);

54 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

55 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

56 
	`js⁄_‰ì
(
ªs
);

57 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

58 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

59 
	`js⁄_‰ì
(
ªs
);

60 
	`js⁄_dñëe
(
ã°
);

62 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("#oneÜine comment\n#another\n{\"hello\":\"world\"}"));

63 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

64 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

65 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

66 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

67 
	`js⁄_‰ì
(
ªs
);

68 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

69 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

70 
	`js⁄_‰ì
(
ªs
);

71 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

72 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

73 
	`js⁄_‰ì
(
ªs
);

74 
	`js⁄_dñëe
(
ã°
);

76 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("//oneÜine comment\n//another\n{\"hello\":\"world\"}"));

77 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

78 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

79 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

80 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

81 
	`js⁄_‰ì
(
ªs
);

82 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

83 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

84 
	`js⁄_‰ì
(
ªs
);

85 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

86 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

87 
	`js⁄_‰ì
(
ªs
);

88 
	`js⁄_dñëe
(
ã°
);

90 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{\"hello\":\"world\"}"));

91 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

92 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

93 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

94 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

95 
	`js⁄_‰ì
(
ªs
);

96 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

97 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

98 
	`js⁄_‰ì
(
ªs
);

99 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

100 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

101 
	`js⁄_‰ì
(
ªs
);

102 
	`js⁄_dñëe
(
ã°
);

104 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("#oneÜine comment\n{#comment\n\"hello\":\"world\"}"));

105 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

106 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

107 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

108 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

109 
	`js⁄_‰ì
(
ªs
);

110 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

111 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

112 
	`js⁄_‰ì
(
ªs
);

113 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

114 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

115 
	`js⁄_‰ì
(
ªs
);

116 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

117 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment"));

118 
	`js⁄_‰ì
(
ªs
);

119 
	`js⁄_dñëe
(
ã°
);

121 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("//oneÜine comment\n{//comment\n\"hello\":\"world\"}"));

122 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

123 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

124 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

125 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

126 
	`js⁄_‰ì
(
ªs
);

127 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

128 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

129 
	`js⁄_‰ì
(
ªs
);

130 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

131 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

132 
	`js⁄_‰ì
(
ªs
);

133 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

134 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment"));

135 
	`js⁄_‰ì
(
ªs
);

136 
	`js⁄_dñëe
(
ã°
);

138 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*/{/*comment*/\"hello\":\"world\"}"));

139 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

140 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

141 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

142 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment"));

143 
	`js⁄_‰ì
(
ªs
);

144 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

145 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

146 
	`js⁄_‰ì
(
ªs
);

147 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

148 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

149 
	`js⁄_‰ì
(
ªs
);

150 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

151 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment"));

152 
	`js⁄_‰ì
(
ªs
);

153 
	`js⁄_dñëe
(
ã°
);

156 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("#oneÜine comment\n#another\n{#comment\n#comment2\n\"hello\":\"world\"}"));

157 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

158 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

159 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

160 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

161 
	`js⁄_‰ì
(
ªs
);

162 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

163 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

164 
	`js⁄_‰ì
(
ªs
);

165 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

166 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

167 
	`js⁄_‰ì
(
ªs
);

168 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

169 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment\ncomment2"));

170 
	`js⁄_‰ì
(
ªs
);

171 
	`js⁄_dñëe
(
ã°
);

173 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("//oneÜine comment\n//another\n{//comment\n//comment2\n\"hello\":\"world\"}"));

174 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

175 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

176 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

177 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

178 
	`js⁄_‰ì
(
ªs
);

179 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

180 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

181 
	`js⁄_‰ì
(
ªs
);

182 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

183 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

184 
	`js⁄_‰ì
(
ªs
);

185 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

186 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment\ncomment2"));

187 
	`js⁄_‰ì
(
ªs
);

188 
	`js⁄_dñëe
(
ã°
);

190 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\"}"));

191 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

192 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

193 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

194 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

195 
	`js⁄_‰ì
(
ªs
);

196 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

197 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

198 
	`js⁄_‰ì
(
ªs
);

199 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

200 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

201 
	`js⁄_‰ì
(
ªs
);

202 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

203 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment\ncomment2"));

204 
	`js⁄_‰ì
(
ªs
);

205 
	`js⁄_dñëe
(
ã°
);

207 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\", #comment\n\"hi\" : \"mars\"}"));

208 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

209 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 2);

210 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

211 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

212 
	`js⁄_‰ì
(
ªs
);

213 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

214 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

215 
	`js⁄_‰ì
(
ªs
);

216 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

217 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

218 
	`js⁄_‰ì
(
ªs
);

219 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

220 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment\ncomment2"));

221 
	`js⁄_‰ì
(
ªs
);

222 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1));

223 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("mars"));

224 
	`js⁄_‰ì
(
ªs
);

225 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 1));

226 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hi"));

227 
	`js⁄_‰ì
(
ªs
);

228 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 1));

229 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment"));

230 
	`js⁄_‰ì
(
ªs
);

231 
	`js⁄_dñëe
(
ã°
);

234 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\", #comment\n\"hi\" : \"mars\", //comment 2\n\"and\" : \"pluto\"}"));

235 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

236 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

237 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

238 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("oneÜine comment\nanother"));

239 
	`js⁄_‰ì
(
ªs
);

240 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

241 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

242 
	`js⁄_‰ì
(
ªs
);

243 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

244 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

245 
	`js⁄_‰ì
(
ªs
);

246 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

247 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment\ncomment2"));

248 
	`js⁄_‰ì
(
ªs
);

249 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1));

250 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("mars"));

251 
	`js⁄_‰ì
(
ªs
);

252 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 1));

253 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hi"));

254 
	`js⁄_‰ì
(
ªs
);

255 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 1));

256 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment"));

257 
	`js⁄_‰ì
(
ªs
);

258 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2));

259 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("pluto"));

260 
	`js⁄_‰ì
(
ªs
);

261 
ªs
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 2));

262 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("and"));

263 
	`js⁄_‰ì
(
ªs
);

264 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 2));

265 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("comment 2"));

266 
	`js⁄_‰ì
(
ªs
);

267 
	`js⁄_dñëe
(
ã°
);

269 
ã°
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("#array\n [#one\n\"hello\", //two\n\"world\", /*three*/\"mars\"]\r\n"));

270 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_ARRAY
);

271 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

272 
ªs
 = 
	`js⁄_gë_commít
(
ã°
);

273 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("array"));

274 
	`js⁄_‰ì
(
ªs
);

275 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0));

276 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

277 
	`js⁄_‰ì
(
ªs
);

278 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 0));

279 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("one"));

280 
	`js⁄_‰ì
(
ªs
);

281 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1));

282 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

283 
	`js⁄_‰ì
(
ªs
);

284 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 1));

285 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("two"));

286 
	`js⁄_‰ì
(
ªs
);

287 
ªs
 = 
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2));

288 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("mars"));

289 
	`js⁄_‰ì
(
ªs
);

290 
ªs
 = 
	`js⁄_gë_commít
(
	`js⁄_©
(
ã°
, 2));

291 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("three"));

292 
	`js⁄_‰ì
(
ªs
);

293 
	`js⁄_dñëe
(
ã°
);

297 
JSONNode
 
⁄e
;

298 
⁄e
 = 15;

299 
JSONNode
 
two
;

300 
two
 = 15;

301 
	`as£πEquÆs
(
⁄e
, 
two
);

302 
⁄e
.
	`£t_commít
(
	`JSON_TEXT
("Number"));

303 
	`as£πEquÆs
(
⁄e
, 
two
);

305 
JSONNode
 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("#oneÜine comment\n{\"hello\":\"world\"}"));

306 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

307 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

308 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

309 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

310 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

312 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("//oneÜine comment\n{\"hello\":\"world\"}"));

313 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

314 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

315 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

316 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

317 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

319 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*/{\"hello\":\"world\"}"));

320 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

321 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

322 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

323 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

324 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

326 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("#oneÜine comment\n#another\n{\"hello\":\"world\"}"));

327 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

328 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

329 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

330 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

331 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

333 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("//oneÜine comment\n//another\n{\"hello\":\"world\"}"));

334 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

335 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

336 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

337 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

338 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

340 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{\"hello\":\"world\"}"));

341 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

342 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

343 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

344 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

345 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

348 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("#oneÜine comment\n{#comment\n\"hello\":\"world\"}"));

349 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

350 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

351 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

352 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

353 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

354 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment"));

356 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("//oneÜine comment\n{//comment\n\"hello\":\"world\"}"));

357 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

358 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

359 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

360 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

361 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

362 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment"));

364 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*/{/*comment*/\"hello\":\"world\"}"));

365 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

366 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

367 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment"));

368 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

369 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

370 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment"));

372 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("#oneÜine comment\n#another\n{#comment\n#comment2\n\"hello\":\"world\"}"));

373 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

374 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

375 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

376 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

377 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

378 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment\ncomment2"));

380 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("//oneÜine comment\n//another\n{//comment\n//comment2\n\"hello\":\"world\"}"));

381 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

382 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

383 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

384 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

385 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

386 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment\ncomment2"));

388 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\"}"));

389 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

390 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

391 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

392 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

393 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

394 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment\ncomment2"));

397 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\", #comment\n\"hi\" : \"mars\"}"));

398 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

399 
	`as£πEquÆs
(
ã°
.
	`size
(), 2);

400 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

401 
	`as£πEquÆs
(
ã°
[1].
	`«me
(), 
	`JSON_TEXT
("hi"));

402 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

403 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("mars"));

404 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

405 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment\ncomment2"));

406 
	`as£πEquÆs
(
ã°
[1].
	`gë_commít
(), 
	`JSON_TEXT
("comment"));

408 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("/*oneÜine comment*//*another*/{/*comment*//*comment2*/\"hello\":\"world\", #comment\n\"hi\" : \"mars\", //comment 2\n\"and\" : \"pluto\"}"));

409 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

410 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

411 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

412 
	`as£πEquÆs
(
ã°
[1].
	`«me
(), 
	`JSON_TEXT
("hi"));

413 
	`as£πEquÆs
(
ã°
[2].
	`«me
(), 
	`JSON_TEXT
("and"));

414 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

415 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("mars"));

416 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("pluto"));

417 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("oneÜine comment\nanother"));

418 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("comment\ncomment2"));

419 
	`as£πEquÆs
(
ã°
[1].
	`gë_commít
(), 
	`JSON_TEXT
("comment"));

420 
	`as£πEquÆs
(
ã°
[2].
	`gë_commít
(), 
	`JSON_TEXT
("comment 2"));

422 
ã°
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("#array\n [#one\n\"hello\", //two\n\"world\", /*three*/\"mars\"]\r\n"));

423 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_ARRAY
);

424 
	`as£πEquÆs
(
ã°
.
	`gë_commít
(), 
	`JSON_TEXT
("array"));

425 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

426 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("hello"));

427 
	`as£πEquÆs
(
ã°
[0].
	`gë_commít
(), 
	`JSON_TEXT
("one"));

428 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("world"));

429 
	`as£πEquÆs
(
ã°
[1].
	`gë_commít
(), 
	`JSON_TEXT
("two"));

430 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("mars"));

431 
	`as£πEquÆs
(
ã°
[2].
	`gë_commít
(), 
	`JSON_TEXT
("three"));

434 
	}
}

	@libjson/_internal/TestSuite/TestConverters.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/NumbîToSåög.h
"

3 
	~"../Sour˚/JSONNode.h
"

5 
	gTe°Suôe
::
	$Te°C⁄vîãrs
(){

6 
UnôTe°
::
	`SëPªfix
("TestConverters.cpp - Converters");

8 
	`as£πEquÆs
((), 1);

9 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

10 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

11 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

12 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

13 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

15 
	`as£πEquÆs
((), 2);

16 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

17 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

18 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

19 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

20 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-32767), 
	`JSON_TEXT
("-32767"));

22 
	`as£πEquÆs
((), 4);

23 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(2147483647), 
	`JSON_TEXT
("2147483647"));

24 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(15), 
	`JSON_TEXT
("15"));

25 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(0), 
	`JSON_TEXT
("0"));

26 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(-15), 
	`JSON_TEXT
("-15"));

27 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(-2147483647), 
	`JSON_TEXT
("-2147483647"));

29 #ifde‡
TEST_LONG_EXTREMES


30 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(9223372036854775807L), 
	`JSON_TEXT
("9223372036854775807"));

31 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(-9223372036854775807L), 
	`JSON_TEXT
("-9223372036854775807"));

32 #i‚de‡
JSON_LIBRARY


33 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(18446744073709551615UL), 
	`JSON_TEXT
("18446744073709551615"));

36 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(15), 
	`JSON_TEXT
("15"));

37 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(0), 
	`JSON_TEXT
("0"));

38 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(-15), 
	`JSON_TEXT
("-15"));

40 #i‚de‡
JSON_LIBRARY


41 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(255), 
	`JSON_TEXT
("255"));

42 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(15), 
	`JSON_TEXT
("15"));

43 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(0), 
	`JSON_TEXT
("0"));

45 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(65535), 
	`JSON_TEXT
("65535"));

46 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(15), 
	`JSON_TEXT
("15"));

47 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(0), 
	`JSON_TEXT
("0"));

49 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(4294967295u), 
	`JSON_TEXT
("4294967295"));

50 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(15), 
	`JSON_TEXT
("15"));

51 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(0), 
	`JSON_TEXT
("0"));

53 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(15), 
	`JSON_TEXT
("15"));

54 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(0), 
	`JSON_TEXT
("0"));

57 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)1.0), 
	`JSON_TEXT
("1"));

58 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)1.002), 
	`JSON_TEXT
("1.002"));

59 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)10.0), 
	`JSON_TEXT
("10"));

60 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)-1.0), 
	`JSON_TEXT
("-1"));

61 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)-1.002), 
	`JSON_TEXT
("-1.002"));

62 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)-10.0), 
	`JSON_TEXT
("-10"));

63 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)0.0), 
	`JSON_TEXT
("0"));

65 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(1.1, 1.1));

66 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(1.000000001, 1.0));

67 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(1.0, 1.000000001));

68 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(1.0, 1.0001));

69 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(1.0001, 1.0));

71 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


72 #ifde‡
JSON_UNIT_TEST


73 
UnôTe°
::
	`SëPªfix
("TestConverters.cpp - Checking case-insensitive");

74 
	`as£πTrue
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hello"), JSON_TEXT("HeLLo")));

75 
	`as£πTrue
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hell5o"), JSON_TEXT("HELL5O")));

76 
	`as£πTrue
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("HeLLo"), JSON_TEXT("hello")));

77 
	`as£πTrue
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("HELL5O"), JSON_TEXT("hell5o")));

79 
	`as£πFÆ£
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hello"), JSON_TEXT("Hello ")));

80 
	`as£πFÆ£
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hello"), JSON_TEXT("hi")));

81 
	`as£πFÆ£
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hello"), JSON_TEXT("55555")));

82 
	`as£πFÆ£
(
öã∫ÆJSONNode
::
	`AªEquÆNoCa£
(
	`JSON_TEXT
("hello"), JSON_TEXT("jonny")));

86 #ifde‡
JSON_SAFE


87 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0")));

88 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1")));

89 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.")));

90 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.")));

91 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0")));

92 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0")));

93 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e2")));

94 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e2")));

95 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.e2")));

96 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e2")));

97 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0e2")));

98 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e2")));

99 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e-2")));

100 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e-2")));

101 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.e-2")));

102 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e-2")));

103 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0e-2")));

104 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e-2")));

105 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e+2")));

106 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e+2")));

107 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.e+2")));

108 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e+2")));

109 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0e+2")));

110 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e+2")));

112 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0")));

113 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1")));

114 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.")));

115 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.")));

116 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0")));

117 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0")));

118 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e2")));

119 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e2")));

120 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e2")));

121 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e2")));

122 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e2")));

123 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e2")));

124 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e-2")));

125 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e-2")));

126 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e-2")));

127 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e-2")));

128 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e-2")));

129 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e-2")));

130 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e+2")));

131 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e+2")));

132 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e+2")));

133 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e+2")));

134 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e+2")));

135 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e+2")));

138 #ifde‡
JSON_STRICT


139 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCD")));

140 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0124")));

141 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0")));

142 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1")));

143 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.")));

144 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.")));

145 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0")));

146 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0")));

147 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e2")));

148 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e2")));

149 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e2")));

150 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e2")));

151 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e2")));

152 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e2")));

153 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-2")));

154 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e-2")));

155 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e-2")));

156 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-2")));

157 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e-2")));

158 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-2")));

159 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+2")));

160 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e+2")));

161 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e+2")));

162 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+2")));

163 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e+2")));

164 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+2")));

166 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCD")));

167 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0124")));

168 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0")));

169 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1")));

170 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.")));

171 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.")));

172 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0")));

173 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0")));

174 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e2")));

175 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e2")));

176 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e2")));

177 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e2")));

178 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e2")));

179 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e2")));

180 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-2")));

181 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e-2")));

182 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e-2")));

183 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-2")));

184 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e-2")));

185 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-2")));

186 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+2")));

187 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e+2")));

188 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e+2")));

189 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+2")));

190 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e+2")));

191 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+2")));

193 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCDv")));

194 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00124")));

195 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("09124")));

196 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0no")));

197 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("no")));

198 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("n1234")));

199 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("12no")));

200 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0en5")));

203 
	}
}

	@libjson/_internal/TestSuite/TestCtors.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 
	gTe°Suôe
::
	$Te°C⁄°ru˘‹s
(){

5 
UnôTe°
::
	`SëPªfix
("TestCtor.cpp - Constructors");

6 #ifde‡
JSON_LIBRARY


7 
JSONNODE
 * 
ã°
 = 
	`js⁄_√w
(
JSON_NULL
);

8 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NULL
);

9 
	`js⁄_dñëe
(
ã°
);

11 
ã°
 = 
	`js⁄_√w_a
(
	`JSON_TEXT
("hello"), JSON_TEXT("world"));

12 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

13 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("world"));

14 
	`js⁄_‰ì
(
ªs
);

15 
ªs
 = 
	`js⁄_«me
(
ã°
);

16 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

17 
	`js⁄_‰ì
(
ªs
);

18 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_STRING
);

19 
	`js⁄_dñëe
(
ã°
);

21 
ã°
 = 
	`js⁄_√w_i
(
	`JSON_TEXT
("hello"), 15);

22 #ifde‡
JSON_CASTABLE


23 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

24 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("15"));

25 
	`js⁄_‰ì
(
ªs
);

27 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 15);

28 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 15.0f);

29 
ªs
 = 
	`js⁄_«me
(
ã°
);

30 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

31 
	`js⁄_‰ì
(
ªs
);

32 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NUMBER
);

33 
	`js⁄_dñëe
(
ã°
);

35 
ã°
 = 
	`js⁄_√w_f
(
	`JSON_TEXT
("hello"), 15.5f);

36 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 15);

37 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 15.5f);

38 #ifde‡
JSON_CASTABLE


39 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

40 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("15.5"));

41 
	`js⁄_‰ì
(
ªs
);

43 
ªs
 = 
	`js⁄_«me
(
ã°
);

44 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

45 
	`js⁄_‰ì
(
ªs
);

46 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NUMBER
);

47 
	`js⁄_dñëe
(
ã°
);

49 
ã°
 = 
	`js⁄_√w_b
(
	`JSON_TEXT
("hñlo"), ()
åue
);

50 #ifde‡
JSON_CASTABLE


51 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

52 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("true"));

53 
	`js⁄_‰ì
(
ªs
);

55 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), ()
åue
);

56 
ªs
 = 
	`js⁄_«me
(
ã°
);

57 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("hello"));

58 
	`js⁄_‰ì
(
ªs
);

59 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_BOOL
);

61 
JSONNODE
 * 
˝y
 = 
	`js⁄_c›y
(
ã°
);

62 
	`as£πTrue
(
	`js⁄_equÆ
(
˝y
, 
ã°
));

63 
	`js⁄_dñëe
(
˝y
);

65 
	`js⁄_dñëe
(
ã°
);

67 
JSONNode
 
ã°
 = 
	`JSONNode
(
JSON_NULL
);

68 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NULL
);

70 
ã°
 = 
	`JSONNode
(
	`JSON_TEXT
("hello"), JSON_TEXT("world"));

71 
	`as£πEquÆs
(
ã°
, 
	`JSON_TEXT
("world"));

72 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("world"));

73 
	`as£πEquÆs
(
ã°
.
	`«me
(), 
	`JSON_TEXT
("hello"));

74 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_STRING
);

76 
ã°
 = 
	`JSONNode
(
	`JSON_TEXT
("hello"), 15);

77 
	`as£πEquÆs
(
ã°
, 15);

78 #ifde‡
JSON_CASTABLE


79 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("15"));

81 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 15);

82 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 15.0f);

83 
	`as£πEquÆs
(
ã°
.
	`«me
(), 
	`JSON_TEXT
("hello"));

84 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NUMBER
);

86 
ã°
 = 
	`JSONNode
(
	`JSON_TEXT
("hello"), 15.5f);

87 
	`as£πEquÆs
(
ã°
, 15.5f);

88 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 15);

89 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 15.5f);

90 #ifde‡
JSON_CASTABLE


91 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("15.5"));

93 
	`as£πEquÆs
(
ã°
.
	`«me
(), 
	`JSON_TEXT
("hello"));

94 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NUMBER
);

96 
ã°
 = 
	`JSONNode
(
	`JSON_TEXT
("hñlo"), 
åue
);

97 
	`as£πEquÆs
(
ã°
, 
åue
);

98 #ifde‡
JSON_CASTABLE


99 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("true"));

101 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
åue
);

102 
	`as£πEquÆs
(
ã°
.
	`«me
(), 
	`JSON_TEXT
("hello"));

103 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_BOOL
);

105 
ã°
 = 
	`JSONNode
(
	`js⁄_°rög
(
	`JSON_TEXT
("hello")), JSON_TEXT('\0'));

106 
	`as£πEquÆs
(
ã°
, 0);

107 #ifde‡
JSON_CASTABLE


108 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("0"));

110 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 0);

111 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 0.0f);

112 
	`as£πEquÆs
(
ã°
.
	`«me
(), 
	`JSON_TEXT
("hello"));

113 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NUMBER
);

115 
	}
}

	@libjson/_internal/TestSuite/TestEquality.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 
	gTe°Suôe
::
	$Te°EquÆôy
(){

5 
UnôTe°
::
	`SëPªfix
("TestEquality.cpp - Equality");

6 #ifde‡
JSON_LIBRARY


7 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

8 
JSONNODE
 * 
ã°2
 = 
	`js⁄_√w
(
JSON_NODE
);

9 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

12 
	`js⁄_£t_n
(
ã°2
, 
ã°1
);

13 #ifde‡
JSON_UNIT_TEST


14 #ifde‡
JSON_REF_COUNT


15 
	`as£πEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

17 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

20 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

22 
	`js⁄_£t_a
(
ã°1
, 
	`JSON_TEXT
("hello"));

23 
	`js⁄_£t_a
(
ã°2
, 
	`JSON_TEXT
("hello"));

24 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

26 
	`js⁄_£t_f
(
ã°1
, 13.5f);

27 
	`js⁄_£t_f
(
ã°2
, 13.5f);

28 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

30 
	`js⁄_£t_i
(
ã°1
, 13);

31 
	`js⁄_£t_f
(
ã°2
, 13.0f);

32 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

34 
	`js⁄_£t_b
(
ã°1
, 
åue
);

35 
	`js⁄_£t_b
(
ã°2
, ()
åue
);

36 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

38 
	`js⁄_£t_b
(
ã°1
, 
Ál£
);

39 
	`js⁄_£t_b
(
ã°2
, ()
Ál£
);

40 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

42 
	`js⁄_nuŒify
(
ã°1
);

43 
	`js⁄_nuŒify
(
ã°2
);

44 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

45 
JSONNODE
 * 
ã°3
 = 
	`js⁄_√w
(
JSON_NULL
);

46 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°3
));

47 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°3
,Åest3));

49 
	`js⁄_dñëe
(
ã°1
);

50 
	`js⁄_dñëe
(
ã°2
);

51 
	`js⁄_dñëe
(
ã°3
);

53 
JSONNode
 
ã°1
;

54 
JSONNode
 
ã°2
;

55 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

58 
ã°2
 = 
ã°1
;

59 #ifde‡
JSON_UNIT_TEST


60 #ifde‡
JSON_REF_COUNT


61 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

63 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

66 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

68 
ã°1
 = 
	`JSON_TEXT
("hello");

69 
ã°2
 = 
	`JSON_TEXT
("hello");

70 
	`as£πEquÆs
(
ã°1
, 
	`JSON_TEXT
("hello"));

71 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

73 
ã°1
 = 13.5f;

74 
ã°2
 = 13.5f;

75 
	`as£πEquÆs
(
ã°1
, 13.5f);

76 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

78 
ã°1
 = 13;

79 
ã°2
 = 13.0f;

80 
	`as£πEquÆs
(
ã°1
, 13.0f);

81 
	`as£πEquÆs
(
ã°1
, 13);

82 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

84 
ã°1
 = 
åue
;

85 
ã°2
 = 
åue
;

86 
	`as£πEquÆs
(
ã°1
, 
åue
);

87 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

89 
ã°1
 = 
Ál£
;

90 
ã°2
 = 
Ál£
;

91 
	`as£πEquÆs
(
ã°1
, 
Ál£
);

92 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

94 
ã°1
.
	`nuŒify
();

95 
ã°2
.
	`nuŒify
();

96 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

97 
JSONNode
 
ã°3
 = 
	`JSONNode
(
JSON_NULL
);

98 
	`as£πEquÆs
(
ã°1
, 
ã°3
);

99 
	`as£πEquÆs
(
ã°2
, 
ã°3
);

101 
	}
}

	@libjson/_internal/TestSuite/TestFunctions.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 
	gTe°Suôe
::
	$Te°Fun˘i⁄s
(){

5 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Swap");

6 #ifde‡
JSON_LIBRARY


7 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

8 
JSONNODE
 * 
ã°2
 = 
	`js⁄_√w
(
JSON_NODE
);

9 
	`js⁄_£t_i
(
ã°1
, 14);

10 
	`js⁄_£t_i
(
ã°2
, 35);

11 
	`js⁄_sw≠
(
ã°1
, 
ã°2
);

12 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°1
), 35);

13 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°2
), 14);

15 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Duplicate");

16 
	`js⁄_dñëe
(
ã°1
);

17 
ã°1
 = 
	`js⁄_du∂iˇã
(
ã°2
);

18 #ifde‡
JSON_UNIT_TEST


19 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

21 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

24 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Duplicate with children");

25 
JSONNODE
 * 
node
 = 
	`js⁄_√w
(
JSON_NODE
);

26 
	`js⁄_push_back
(
node
, 
	`js⁄_√w_i
(
	`JSON_TEXT
(""), 15));

27 
	`js⁄_push_back
(
node
, 
	`js⁄_√w_f
(
	`JSON_TEXT
(""), 27.4f));

28 
	`js⁄_push_back
(
node
, 
	`js⁄_√w_b
(
	`JSON_TEXT
(""), 
åue
));

30 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
node
);

32 
JSONNODE
 * 
dup
 = 
	`js⁄_du∂iˇã
(
node
);

33 
	`as£πEquÆs
(
	`js⁄_size
(
dup
), 3);

34 #ifde‡
JSON_UNIT_TEST


35 
	`as£πNŸEquÆs
(((
JSONNode
*)
node
Ë-> 
öã∫Æ
, ((JSONNode*)
dup
) -> internal);

37 
	`as£πEquÆs
(
	`js⁄_ty≥
(
dup
), 
JSON_NODE
);

39 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
node
);

40 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
dup
);

42 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
	`js⁄_©
(
dup
, 0)), 15);

43 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
	`js⁄_©
(
dup
, 1)), 27.4f);

44 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
	`js⁄_©
(
dup
, 2)), 
åue
);

45 
	`as£πTrue
(
	`js⁄_equÆ
(
	`js⁄_©
(
dup
, 0), js⁄_©(
node
, 0)));

46 
	`as£πTrue
(
	`js⁄_equÆ
(
	`js⁄_©
(
dup
, 1), js⁄_©(
node
, 1)));

47 
	`as£πTrue
(
	`js⁄_equÆ
(
	`js⁄_©
(
dup
, 2), js⁄_©(
node
, 2)));

50 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
dup
);

52 #ifde‡
JSON_ITERATORS


53 
JSONNODE_ITERATOR
 
ô
 = 
	`js⁄_begö
(
node
), 
íd
 = 
	`js⁄_íd
“ode), 
dup_ô
 = js⁄_begö(
dup
);

54 
ô
 !
íd
;

55 ++
ô
, ++
dup_ô
){

56 
	`as£πTrue
(
	`js⁄_equÆ
(*
ô
, *
dup_ô
));

57 #ifde‡
JSON_UNIT_TEST


58 
	`as£πNŸEquÆs
(((
JSONNode
*)(*
ô
)Ë-> 
öã∫Æ
, ((JSONNode*)(*
dup_ô
)) -> internal);

63 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Nullify");

64 
	`js⁄_nuŒify
(
ã°1
);

65 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NULL
);

66 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_«me
(
ã°1
);

67 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
(""));

68 
	`js⁄_‰ì
(
ªs
);

70 #ifde‡
JSON_CASTABLE


71 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Cast");

72 
	`js⁄_ˇ°
(
ã°1
, 
JSON_NULL
);

73 
	`js⁄_£t_i
(
ã°2
, 1);

74 
	`js⁄_ˇ°
(
ã°2
, 
JSON_BOOL
);

75 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NULL
);

76 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°2
), 
JSON_BOOL
);

77 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°2
), 
åue
);

78 
	`js⁄_£t_b
(
ã°2
, 
åue
);

79 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°2
), 
åue
);

81 
	`js⁄_ˇ°
(
ã°2
, 
JSON_NUMBER
);

82 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°2
), 1.0f);

83 
	`js⁄_£t_f
(
ã°2
, 0.0f);

84 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°2
), 0.0f);

85 
	`js⁄_ˇ°
(
ã°2
, 
JSON_BOOL
);

86 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°2
), 
Ál£
);

89 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Merge");

90 
	`js⁄_£t_a
(
ã°1
, 
	`JSON_TEXT
("hello"));

91 
	`js⁄_£t_a
(
ã°2
, 
	`JSON_TEXT
("hello"));

92 #ifde‡
JSON_UNIT_TEST


93 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

95 
	`as£πTrue
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

96 
	`js⁄_mîge
(
ã°1
, 
ã°2
);

97 #ifde‡
JSON_UNIT_TEST


98 #ifde‡
JSON_REF_COUNT


99 
	`as£πEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

101 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

105 #ifde‡
JSON_CASTABLE


106 
	`js⁄_ˇ°
(
ã°1
, 
JSON_NODE
);

107 
	`js⁄_ˇ°
(
ã°2
, 
JSON_NODE
);

108 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°1
), 
JSON_NODE
);

109 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°2
), 
JSON_NODE
);

110 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

111 
	`js⁄_push_back
(
ã°2
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

113 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

114 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

116 
	`js⁄_mîge
(
ã°1
, 
ã°2
);

117 #ifde‡
JSON_UNIT_TEST


118 #ifde‡
JSON_REF_COUNT


119 
	`as£πEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

121 
	`as£πNŸEquÆs
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°2
) -> internal);

125 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

126 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

129 
	`js⁄_dñëe
(
ã°1
);

130 
	`js⁄_dñëe
(
ã°2
);

131 
	`js⁄_dñëe
(
node
);

132 
	`js⁄_dñëe
(
dup
);

134 
JSONNode
 
ã°1
;

135 
JSONNode
 
ã°2
;

136 
ã°1
 = 
	`JSON_TEXT
("hello");

137 
ã°2
 = 
	`JSON_TEXT
("world");

138 
ã°1
.
	`sw≠
(
ã°2
);

139 
	`as£πEquÆs
(
ã°1
, 
	`JSON_TEXT
("world"));

140 
	`as£πEquÆs
(
ã°2
, 
	`JSON_TEXT
("hello"));

142 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Duplicate");

143 
ã°1
 = 
ã°2
.
	`du∂iˇã
();

144 #ifde‡
JSON_UNIT_TEST


145 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

147 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

149 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Duplicate with children");

150 
JSONNode
 
node
 = 
	`JSONNode
(
JSON_NODE
);

151 
node
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 15));

152 
node
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), JSON_TEXT("hello world")));

153 
node
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 
åue
));

155 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
node
);

157 
JSONNode
 
dup
 = 
node
.
	`du∂iˇã
();

158 
	`as£πEquÆs
(
dup
.
	`size
(), 3);

159 #ifde‡
JSON_UNIT_TEST


160 
	`as£πNŸEquÆs
(
node
.
öã∫Æ
, 
dup
.internal);

162 
	`as£πEquÆs
(
dup
.
	`ty≥
(), 
JSON_NODE
);

164 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
node
);

165 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
dup
);

167 
åy
 {

168 
	`as£πEquÆs
(
dup
.
	`©
(0), 15);

169 
	`as£πEquÆs
(
dup
.
	`©
(1), 
	`JSON_TEXT
("hello world"));

170 
	`as£πEquÆs
(
dup
.
	`©
(2), 
åue
);

171 
	`as£πEquÆs
(
dup
.
	`©
(0), 
node
.at(0));

172 
	`as£πEquÆs
(
dup
.
	`©
(1), 
node
.at(1));

173 
	`as£πEquÆs
(
dup
.
	`©
(2), 
node
.at(2));

174 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

175 
	`FAIL
("exception caught");

178 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
dup
);

180 #ifde‡
JSON_ITERATORS


181 
JSONNode
::
ôî©‹
 
ô
 = 
node
.
	`begö
(), 
íd
 =Çode.
	`íd
(), 
dup_ô
 = 
dup
.begin();

182 
ô
 !
íd
;

183 ++
ô
, ++
dup_ô
){

184 
	`as£πEquÆs
(*
ô
, *
dup_ô
);

185 #ifde‡
JSON_UNIT_TEST


186 
	`as£πNŸEquÆs
((*
ô
).
öã∫Æ
, (*
dup_ô
).internal);

191 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Nullify");

192 
ã°1
.
	`nuŒify
();

193 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NULL
);

194 
	`as£πEquÆs
(
ã°1
.
	`«me
(), 
	`JSON_TEXT
(""));

196 #ifde‡
JSON_CASTABLE


197 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Cast");

198 
ã°1
.
	`ˇ°
(
JSON_NULL
);

199 
ã°2
 = 1;

200 
ã°2
.
	`ˇ°
(
JSON_BOOL
);

201 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NULL
);

202 
	`as£πEquÆs
(
ã°2
.
	`ty≥
(), 
JSON_BOOL
);

203 
	`as£πEquÆs
(
ã°2
, 
åue
);

204 
ã°2
 = 
åue
;

205 
	`as£πEquÆs
(
ã°2
, 
åue
);

206 
ã°2
.
	`ˇ°
(
JSON_NUMBER
);

207 
	`as£πEquÆs
(
ã°2
, 1.0f);

208 
ã°2
 = 0.0f;

209 
	`as£πEquÆs
(
ã°2
, 0.0f);

210 
ã°2
.
	`ˇ°
(
JSON_BOOL
);

211 
	`as£πEquÆs
(
ã°2
, 
Ál£
);

214 
UnôTe°
::
	`SëPªfix
("TestFunctions.cpp - Merge");

215 
ã°1
 = 
	`JSON_TEXT
("hello");

216 
ã°2
 = 
	`JSON_TEXT
("hello");

217 #ifde‡
JSON_UNIT_TEST


218 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

220 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

221 
ã°1
.
	`mîge
(
ã°2
);

222 #ifde‡
JSON_UNIT_TEST


223 #ifde‡
JSON_REF_COUNT


224 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

226 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

230 #ifde‡
JSON_CASTABLE


231 
ã°1
.
	`ˇ°
(
JSON_NODE
);

232 
ã°2
.
	`ˇ°
(
JSON_NODE
);

234 
ã°1
 = 
	`JSONNode
(
JSON_NODE
);

235 
ã°2
 = 
	`JSONNode
(
JSON_NODE
);

237 
	`as£πEquÆs
(
ã°1
.
	`ty≥
(), 
JSON_NODE
);

238 
	`as£πEquÆs
(
ã°2
.
	`ty≥
(), 
JSON_NODE
);

239 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

240 
ã°2
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

242 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

243 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

245 
ã°1
.
	`mîge
(
ã°2
);

246 #ifde‡
JSON_UNIT_TEST


247 #ifde‡
JSON_REF_COUNT


248 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

250 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

254 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

255 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

257 
	}
}

	@libjson/_internal/TestSuite/TestInequality.cpp

1 
	~"Te°Suôe.h
"

3 
	gTe°Suôe
::
	$Te°I√quÆôy
(){

4 
UnôTe°
::
	`SëPªfix
("TestInequality.cpp - Inequality");

5 #ifde‡
JSON_LIBRARY


6 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

7 
JSONNODE
 * 
ã°2
 = 
	`js⁄_√w
(
JSON_NODE
);

8 
	`js⁄_£t_a
(
ã°1
, 
	`JSON_TEXT
("hello"));

9 
	`js⁄_£t_a
(
ã°2
, 
	`JSON_TEXT
("world"));

10 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

12 
	`js⁄_£t_i
(
ã°2
,13);

13 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

15 
	`js⁄_£t_f
(
ã°2
, 13.5f);

16 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

18 
	`js⁄_£t_b
(
ã°2
, 
åue
);

19 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

21 
	`js⁄_£t_b
(
ã°2
, 
Ál£
);

22 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

24 
	`js⁄_nuŒify
(
ã°2
);

25 
	`as£πFÆ£
(
	`js⁄_equÆ
(
ã°1
, 
ã°2
));

26 
	`js⁄_dñëe
(
ã°1
);

27 
	`js⁄_dñëe
(
ã°2
);

29 
JSONNode
 
ã°1
;

30 
JSONNode
 
ã°2
;

31 
ã°1
 = 
	`JSON_TEXT
("hello");

32 
ã°2
 = 
	`JSON_TEXT
("world");

33 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

34 
	`as£πNŸEquÆs
(
ã°1
, 
	`JSON_TEXT
("hi"));

35 
	`as£πNŸEquÆs
(
ã°2
, 13.5f);

36 
	`as£πNŸEquÆs
(
ã°2
, 14);

37 
	`as£πNŸEquÆs
(
ã°2
, 
åue
);

38 
	`as£πNŸEquÆs
(
ã°2
, 
Ál£
);

40 
ã°2
 = 13;

41 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

42 
	`as£πNŸEquÆs
(
ã°2
, 13.5f);

43 
	`as£πNŸEquÆs
(
ã°2
, 14);

44 
	`as£πNŸEquÆs
(
ã°2
, 
åue
);

45 
	`as£πNŸEquÆs
(
ã°2
, 
Ál£
);

46 
	`as£πNŸEquÆs
(
ã°2
, 
	`JSON_TEXT
("13"));

48 
ã°2
 = 13.5f;

49 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

50 
	`as£πNŸEquÆs
(
ã°2
, 13);

51 
	`as£πNŸEquÆs
(
ã°2
, 14);

52 
	`as£πNŸEquÆs
(
ã°2
, 
åue
);

53 
	`as£πNŸEquÆs
(
ã°2
, 
Ál£
);

54 
	`as£πNŸEquÆs
(
ã°2
, 
	`JSON_TEXT
("13.5"));

56 
ã°2
 = 
åue
;

57 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

58 
	`as£πNŸEquÆs
(
ã°2
, 13.5f);

59 
	`as£πNŸEquÆs
(
ã°2
, 14);

60 
	`as£πNŸEquÆs
(
ã°2
, 
Ál£
);

61 
	`as£πNŸEquÆs
(
ã°2
, 
	`JSON_TEXT
("true"));

63 
ã°2
 = 
Ál£
;

64 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

65 
	`as£πNŸEquÆs
(
ã°2
, 13.5f);

66 
	`as£πNŸEquÆs
(
ã°2
, 14);

67 
	`as£πNŸEquÆs
(
ã°2
, 
åue
);

68 
	`as£πNŸEquÆs
(
ã°2
, 
	`JSON_TEXT
("false"));

70 
ã°2
.
	`nuŒify
();

71 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

72 
	`as£πNŸEquÆs
(
ã°2
, 13.5f);

73 
	`as£πNŸEquÆs
(
ã°2
, 14);

74 
	`as£πNŸEquÆs
(
ã°2
, 
åue
);

75 
	`as£πNŸEquÆs
(
ã°2
, 
Ál£
);

76 
	`as£πNŸEquÆs
(
ã°2
, "null");

78 
	}
}

	@libjson/_internal/TestSuite/TestInspectors.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

3 
	~<c°dlib
>

5 
	gTe°Suôe
::
	$Te°In•e˘‹s
(){

6 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Inspectors");

7 #ifde‡
JSON_LIBRARY


8 
JSONNODE
 * 
ã°
 = 
	`js⁄_√w
(
JSON_NULL
);

9 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NULL
);

10 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

11 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
(""));

12 
	`js⁄_‰ì
(
ªs
);

13 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 0);

14 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 0.0f);

15 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), 
Ál£
);

17 
	`js⁄_£t_f
(
ã°
, 15.5f);

18 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NUMBER
);

19 #ifde‡
JSON_CASTABLE


20 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

21 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("15.5"));

22 
	`js⁄_‰ì
(
ªs
);

24 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 15);

25 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 15.5f);

26 #ifde‡
JSON_CASTABLE


27 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), 
åue
);

30 
	`js⁄_£t_f
(
ã°
, 0.0f);

31 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NUMBER
);

32 #ifde‡
JSON_CASTABLE


33 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

34 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("0"));

35 
	`js⁄_‰ì
(
ªs
);

37 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 0);

38 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 0.0f);

39 #ifde‡
JSON_CASTABLE


40 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), 
Ál£
);

43 
	`js⁄_£t_b
(
ã°
, 
åue
);

44 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_BOOL
);

45 #ifde‡
JSON_CASTABLE


46 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

47 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("true"));

48 
	`js⁄_‰ì
(
ªs
);

49 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 1);

50 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 1.0f);

52 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), 
åue
);

54 
	`js⁄_£t_b
(
ã°
, 
Ál£
);

55 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_BOOL
);

56 #ifde‡
JSON_CASTABLE


57 
ªs
 = 
	`js⁄_as_°rög
(
ã°
);

58 
	`as£πCSåögSame
(
ªs
, 
	`JSON_TEXT
("false"));

59 
	`js⁄_‰ì
(
ªs
);

60 
	`as£πEquÆs_Primôive
(
	`js⁄_as_öt
(
ã°
), 0);

61 
	`as£πEquÆs_Primôive
(
	`js⁄_as_Êﬂt
(
ã°
), 0.0f);

63 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(
ã°
), 
Ál£
);

64 #ifde‡
JSON_CASTABLE


65 
	`js⁄_ˇ°
(
ã°
, 
JSON_NODE
);

66 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

67 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 0);

68 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

69 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("hello"), JSON_TEXT("mars")));

70 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("salut"), JSON_TEXT("france")));

71 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

72 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°
);

74 
JSONNODE
 * 
ˇ°ed
 = 
	`js⁄_as_¨øy
(
ã°
);

75 #ifde‡
JSON_UNIT_TEST


76 
	`as£πNŸEquÆs
(((
JSONNode
*)
ˇ°ed
Ë-> 
öã∫Æ
, ((JSONNode*)
ã°
) -> internal);

78 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ˇ°ed
), 
JSON_ARRAY
);

79 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

80 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

81 
	`as£πEquÆs
(
	`js⁄_size
(
ˇ°ed
), 3);

82 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ˇ°ed
);

84 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Location");

86 #ifde‡
JSON_CASTABLE


87 
	#CheckAt
(
∑ª¡
, 
loˇÀ
, 
ãxt
)\

88 if(
JSONNODE
 * 
ãmp
 = 
	`js⁄_©
(
∑ª¡
, 
loˇÀ
)){\

89 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_as_°rög
(
ãmp
);\

90 
	`as£πCSåögSame
(
_ªs
, 
ãxt
);\

91 
	`js⁄_‰ì
(
_ªs
);\

93 
	`FAIL
(
°d
::
	`°rög
("CheckAt: ") + #parent + "[" + #locale + "]");\

94 }

	)

96 
	#CheckNameAt
(
∑ª¡
, 
loˇÀ
, 
ãxt
)\

97 if(
JSONNODE
 * 
ãmp
 = 
	`js⁄_©
(
∑ª¡
, 
loˇÀ
)){\

98 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_«me
(
ãmp
);\

99 
	`as£πCSåögSame
(
_ªs
, 
ãxt
);\

100 
	`js⁄_‰ì
(
_ªs
);\

102 
	`FAIL
(
°d
::
	`°rög
("CheckNameAt: ") + #parent + "[" + #locale + "]");\

103 }

	)

105 
	`CheckAt
(
ˇ°ed
, 0, 
	`JSON_TEXT
("world"));

106 
	`CheckAt
(
ˇ°ed
, 1, 
	`JSON_TEXT
("mars"));

107 
	`CheckAt
(
ˇ°ed
, 2, 
	`JSON_TEXT
("france"));

108 
	`CheckNameAt
(
ˇ°ed
, 0, 
	`JSON_TEXT
(""));

109 
	`CheckNameAt
(
ˇ°ed
, 1, 
	`JSON_TEXT
(""));

110 
	`CheckNameAt
(
ˇ°ed
, 2, 
	`JSON_TEXT
(""));

112 
	`CheckAt
(
ã°
, 0, 
	`JSON_TEXT
("world"));

113 
	`CheckAt
(
ã°
, 1, 
	`JSON_TEXT
("mars"));

114 
	`CheckAt
(
ã°
, 2, 
	`JSON_TEXT
("france"));

115 
	`CheckNameAt
(
ã°
, 0, 
	`JSON_TEXT
("hi"));

116 
	`CheckNameAt
(
ã°
, 1, 
	`JSON_TEXT
("hello"));

117 
	`CheckNameAt
(
ã°
, 2, 
	`JSON_TEXT
("salut"));

120 
	#CheckGë
(
∑ª¡
, 
loˇÀ
, 
ãxt
)\

121 if(
JSONNODE
 * 
ãmp
 = 
	`js⁄_gë
(
∑ª¡
, 
loˇÀ
)){\

122 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_as_°rög
(
ãmp
);\

123 
	`as£πCSåögSame
(
_ªs
, 
ãxt
);\

124 
	`js⁄_‰ì
(
_ªs
);\

126 
	`FAIL
(
°d
::
	`°rög
("CheckGet: ") + #parent + "[" + #locale + "]");\

127 }

	)

129 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


130 
	#CheckGëNoCa£
(
∑ª¡
, 
loˇÀ
, 
ãxt
)\

131 if(
JSONNODE
 * 
ãmp
 = 
	`js⁄_gë_noˇ£
(
∑ª¡
, 
loˇÀ
)){\

132 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_as_°rög
(
ãmp
);\

133 
	`as£πCSåögSame
(
_ªs
, 
ãxt
);\

134 
	`js⁄_‰ì
(
_ªs
);\

136 
	`FAIL
(
°d
::
	`°rög
("CheckGetNoCase: ") + #parent + "[" + #locale + "]");\

137 }

	)

139 
	#CheckGëNoCa£
(
∑ª¡
, 
loˇÀ
, 
ãxt
)

	)

142 
	`CheckGë
(
ã°
, 
	`JSON_TEXT
("hi"), JSON_TEXT("world"));

143 
	`CheckGëNoCa£
(
ã°
, 
	`JSON_TEXT
("HI"), JSON_TEXT("world"));

144 
	`CheckGë
(
ã°
, 
	`JSON_TEXT
("hello"), JSON_TEXT("mars"));

145 
	`CheckGëNoCa£
(
ã°
, 
	`JSON_TEXT
("HELLO"), JSON_TEXT("mars"));

146 
	`CheckGë
(
ã°
, 
	`JSON_TEXT
("salut"), JSON_TEXT("france"));

147 
	`CheckGëNoCa£
(
ã°
, 
	`JSON_TEXT
("SALUT"), JSON_TEXT("france"));

149 
	`as£πNuŒ
(
	`js⁄_gë
(
ã°
, 
	`JSON_TEXT
("meh")));

150 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


151 
	`as£πNuŒ
(
	`js⁄_gë_noˇ£
(
ã°
, 
	`JSON_TEXT
("meh")));

156 #ifde‡
JSON_ITERATORS


157 #ifde‡
JSON_CASTABLE


158 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Iterators");

159 
JSONNODE_ITERATOR
 
ô
 = 
	`js⁄_begö
(
ˇ°ed
), 
íd
 = 
	`js⁄_íd
(casted); it !=Énd; ++it){

160 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_«me
(*
ô
);

161 
	`as£πCSåögSame
(
_ªs
, 
	`JSON_TEXT
(""));

162 
	`js⁄_‰ì
(
_ªs
);

167 #ifde‡
JSON_BINARY


168 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Binary");

169 
	`js⁄_£t_bö¨y
(
ã°
, (const *)"Hello World", 11);

170 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_STRING
);

171 
js⁄_ch¨
 * 
_ªs
 = 
	`js⁄_as_°rög
(
ã°
);

172 
	`as£πCSåögSame
(
_ªs
, 
	`JSON_TEXT
("SGVsbG8gV29ybGQ="));

173 
	`js⁄_‰ì
(
_ªs
);

175 
i
;

176 if(* 
bö
 = (*)
	`js⁄_as_bö¨y
(
ã°
, &
i
)){

177 
	`as£πEquÆs
(
i
, 11);

178 * 
ãrmö©ed
 = (*)
°d
::
	`mem˝y
(°d::
	`mÆloc
(
i
 + 1), 
bö
, i);

179 
ãrmö©ed
[
i
] = '\0';

180 
	`as£πCSåögEquÆs
(
ãrmö©ed
, "Hello World");

181 
	`js⁄_‰ì
(
bö
);

182 
°d
::
	`‰ì
(
ãrmö©ed
);

184 
	`FAIL
("as_binary failed");

187 
	`js⁄_£t_a
(
ã°
, 
	`JSON_TEXT
("Hello World"));

188 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_STRING
);

189 
_ªs
 = 
	`js⁄_as_°rög
(
ã°
);

190 
	`as£πCSåögSame
(
_ªs
, 
	`JSON_TEXT
("Hello World"));

191 
	`js⁄_‰ì
(
_ªs
);

193 #ifde‡
JSON_SAFE


194 
	`as£πEquÆs
(
	`js⁄_as_bö¨y
(
ã°
, &
i
), 0);

195 
	`as£πEquÆs
(
i
, 0);

200 
	`js⁄_dñëe
(
ã°
);

201 #ifde‡
JSON_CASTABLE


202 
	`js⁄_dñëe
(
ˇ°ed
);

205 
JSONNode
 
ã°
 = 
	`JSONNode
(
JSON_NULL
);

206 #ifde‡
JSON_CASTABLE


207 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
(""));

208 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 0);

209 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 0.0f);

210 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
Ál£
);

213 
ã°
 = 15.5f;

214 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NUMBER
);

215 #ifde‡
JSON_CASTABLE


216 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("15.5"));

218 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 15);

219 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 15.5f);

220 #ifde‡
JSON_CASTABLE


221 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
åue
);

224 
ã°
 = 0.0f;

225 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NUMBER
);

226 #ifde‡
JSON_CASTABLE


227 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("0"));

229 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 0);

230 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 0.0f);

231 #ifde‡
JSON_CASTABLE


232 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
Ál£
);

235 
ã°
 = 
åue
;

236 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_BOOL
);

237 #ifde‡
JSON_CASTABLE


238 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("true"));

239 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 1);

240 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 1.0f);

242 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
åue
);

244 
ã°
 = 
Ál£
;

245 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_BOOL
);

246 #ifde‡
JSON_CASTABLE


247 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("false"));

248 
	`as£πEquÆs
(
ã°
.
	`as_öt
(), 0);

249 
	`as£πEquÆs
(
ã°
.
	`as_Êﬂt
(), 0.0f);

251 
	`as£πEquÆs
(
ã°
.
	`as_boﬁ
(), 
Ál£
);

253 #ifde‡
JSON_CASTABLE


254 
ã°
.
	`ˇ°
(
JSON_NODE
);

256 
ã°
 = 
	`JSONNode
(
JSON_NODE
);

258 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

259 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

260 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hi"), JSON_TEXT("world")));

261 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("hello"), JSON_TEXT("mars")));

262 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("salut"), JSON_TEXT("france")));

263 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

264 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°
);

266 #ifde‡
JSON_CASTABLE


267 
JSONNode
 
ˇ°ed
 = 
ã°
.
	`as_¨øy
();

268 #ifde‡
JSON_UNIT_TEST


269 
	`as£πNŸEquÆs
(
ˇ°ed
.
öã∫Æ
, 
ã°
.internal);

271 
	`as£πEquÆs
(
ˇ°ed
.
	`ty≥
(), 
JSON_ARRAY
);

272 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

273 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

274 
	`as£πEquÆs
(
ˇ°ed
.
	`size
(), 3);

275 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ˇ°ed
);

278 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Location");

280 
åy
 {

281 #ifde‡
JSON_CASTABLE


282 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(0), 
	`JSON_TEXT
("world"));

283 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(1), 
	`JSON_TEXT
("mars"));

284 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(2), 
	`JSON_TEXT
("france"));

285 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(0).
	`«me
(), 
	`JSON_TEXT
(""));

286 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(1).
	`«me
(), 
	`JSON_TEXT
(""));

287 
	`as£πEquÆs
(
ˇ°ed
.
	`©
(2).
	`«me
(), 
	`JSON_TEXT
(""));

289 
	`as£πEquÆs
(
ã°
.
	`©
(0), 
	`JSON_TEXT
("world"));

290 
	`as£πEquÆs
(
ã°
.
	`©
(1), 
	`JSON_TEXT
("mars"));

291 
	`as£πEquÆs
(
ã°
.
	`©
(2), 
	`JSON_TEXT
("france"));

292 
	`as£πEquÆs
(
ã°
.
	`©
(0).
	`«me
(), 
	`JSON_TEXT
("hi"));

293 
	`as£πEquÆs
(
ã°
.
	`©
(1).
	`«me
(), 
	`JSON_TEXT
("hello"));

294 
	`as£πEquÆs
(
ã°
.
	`©
(2).
	`«me
(), 
	`JSON_TEXT
("salut"));

295 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

296 
	`FAIL
("exception caught");

299 
åy
 {

300 
	`as£πEquÆs
(
ã°
.
	`©
(
	`JSON_TEXT
("hi")), JSON_TEXT("world"));

301 
	`as£πEquÆs
(
ã°
.
	`©
(
	`JSON_TEXT
("hello")), JSON_TEXT("mars"));

302 
	`as£πEquÆs
(
ã°
.
	`©
(
	`JSON_TEXT
("salut")), JSON_TEXT("france"));

303 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


304 
	`as£πEquÆs
(
ã°
.
	`©_noˇ£
(
	`JSON_TEXT
("SALUT")), JSON_TEXT("france"));

305 
	`as£πEquÆs
(
ã°
.
	`©_noˇ£
(
	`JSON_TEXT
("HELLO")), JSON_TEXT("mars"));

306 
	`as£πEquÆs
(
ã°
.
	`©_noˇ£
(
	`JSON_TEXT
("HI")), JSON_TEXT("world"));

308 } 
	`ˇtch
 (
°d
::
out_of_ønge
){

309 
	`FAIL
("exception caught");

312 
	`as£πEx˚±i⁄
(
ã°
.
	`©
(
	`JSON_TEXT
("meh")), 
°d
::
out_of_ønge
);

313 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


314 
	`as£πEx˚±i⁄
(
ã°
.
	`©_noˇ£
(
	`JSON_TEXT
("meh")), 
°d
::
out_of_ønge
);

317 
	`as£πEquÆs
(
ã°
[
	`JSON_TEXT
("hi")], 
	`js⁄_°rög
(JSON_TEXT("world")));

318 
	`as£πEquÆs
(
ã°
[
	`JSON_TEXT
("hñlo")], 
	`js⁄_°rög
(JSON_TEXT("mars")));

319 
	`as£πEquÆs
(
ã°
[
	`JSON_TEXT
("ßlut")], 
	`js⁄_°rög
(JSON_TEXT("france")));

320 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("world"));

321 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("mars"));

322 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("france"));

324 #ifde‡
JSON_ITERATORS


325 #ifde‡
JSON_CASTABLE


326 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Iterators");

327 
JSONNode
::
ôî©‹
 
ô
 = 
ˇ°ed
.
	`begö
(), 
íd
 = ca°ed.
	`íd
(); it !=Énd; ++it){

328 
	`as£πEquÆs
((*
ô
).
	`«me
(), 
	`JSON_TEXT
(""));

333 #ifde‡
JSON_BINARY


334 
UnôTe°
::
	`SëPªfix
("TestInspectors.cpp - Binary");

335 
ã°
.
	`£t_bö¨y
((const *)"Hello World", 11);

336 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_STRING
);

337 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("SGVsbG8gV29ybGQ="));

338 
	`as£πEquÆs
(
ã°
.
	`as_bö¨y
(), "Hello World");

339 
	`as£πEquÆs
(
ã°
.
	`as_bö¨y
().
	`size
(), 11);

341 
ã°
 = 
	`JSON_TEXT
("Hello World");

342 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_STRING
);

343 
	`as£πEquÆs
(
ã°
.
	`as_°rög
(), 
	`JSON_TEXT
("Hello World"));

344 #ifde‡
JSON_SAFE


345 
	`as£πEquÆs
(
ã°
.
	`as_bö¨y
(), "");

349 #ifde‡
JSON_READ_PRIORITY


351 
js⁄_°rög
 
	`buf„r
(
	`JSON_TEXT
("{ \"myValue1\" : \"foo\", \"myValue2\" : \"bar\"}"));

352 
JSONNode
 
cuºít
 = 
libjs⁄
::
	`∑r£
(
buf„r
);

353 
åy
 {

354 
JSONNode
 & 
vÆue1
 = 
cuºít
[
	`JSON_TEXT
("myValue1")];

355 
	`as£πEquÆs
(
vÆue1
.
	`as_°rög
(), 
	`JSON_TEXT
("foo"));

356 
JSONNode
 & 
vÆue2
 = 
cuºít
[
	`JSON_TEXT
("myValue2")];

357 
	`as£πEquÆs
(
vÆue2
.
	`as_°rög
(), 
	`JSON_TEXT
("bar"));

358 } 
	`ˇtch
 (...){

359 
	`as£πTrue
(
Ál£
);

363 
	}
}

	@libjson/_internal/TestSuite/TestIterators.cpp

1 
	~"Te°Suôe.h
"

3 #ifde‡
JSON_LIBRARY


4 
Cª©eTe°
(
JSONNODE
 * 
ã°
);

5 
	$Cª©eTe°
(
JSONNODE
 * 
ã°
){

6 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hi"), JSON_TEXT("World")));

7 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("There")));

8 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hai"), JSON_TEXT("Mars")));

9 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hia"), JSON_TEXT("Earth")));

10 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hey"), JSON_TEXT("Jude")));

11 
	}
}

13 
Cª©eTe°
(
JSONNode
 & 
ã°
);

14 
	$Cª©eTe°
(
JSONNode
 & 
ã°
){

15 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hi"), JSON_TEXT("World")));

16 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("There")));

17 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hai"), JSON_TEXT("Mars")));

18 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hia"), JSON_TEXT("Earth")));

19 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hey"), JSON_TEXT("Jude")));

20 
	}
}

23 
	gTe°Suôe
::
	$Te°Iãøt‹s
(){

24 #ifde‡
JSON_ITERATORS


25 
	#as£πAutoCSåög
(
c⁄e
, 
˘wo
)\

27 
js⁄_ch¨
 * 
_ªs
 = 
c⁄e
;\

28 
	`as£πCSåögSame
(
_ªs
, 
˘wo
);\

29 
	`js⁄_‰ì
(
_ªs
);\

30 }

	)

32 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator");

33 #ifde‡
JSON_LIBRARY


34 
JSONNODE
 * 
em±y
 = 
	`js⁄_√w
(
JSON_NODE
);

35 
	`as£πEquÆs
(
	`js⁄_begö
(
em±y
), 
	`js⁄_íd
(empty));

36 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
em±y
);

38 
	`as£πNuŒ
(
	`js⁄_©
(
em±y
, 15));

39 
	`as£πNuŒ
(
	`js⁄_gë
(
em±y
, 
	`JSON_TEXT
("hello")));

41 
JSONNODE
 * 
ã°
 = 
	`js⁄_√w
(
JSON_NODE
);

42 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_i
(
	`JSON_TEXT
(""), 15));

43 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_a
(
	`JSON_TEXT
(""), JSON_TEXT("hello world")));

44 
	`js⁄_push_back
(
ã°
, 
	`js⁄_√w_b
(
	`JSON_TEXT
(""), 
åue
));

45 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

46 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°
);

48 
JSONNODE_ITERATOR
 
ô_ã°
 = 
	`js⁄_begö
(
ã°
);

49 
	`as£πEquÆs
(
	`js⁄_as_öt
(*
ô_ã°
), 15);

50 ++
ô_ã°
;

51 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ô_ã°
), 
	`JSON_TEXT
("hello world"));

52 
ô_ã°
++;

53 
	`as£πEquÆs
(
	`js⁄_as_boﬁ
(*
ô_ã°
++), 
åue
);

54 
	`as£πEquÆs
(
ô_ã°
, 
	`js⁄_íd
(
ã°
));

56 
i
 = 0;

57 
JSONNODE_ITERATOR
 
ô
 = 
	`js⁄_begö
(
ã°
), 
íd
 = 
	`js⁄_íd
(test); it !=Énd; ++it){

58 ++
i
;

60 
	`as£πEquÆs
(
i
, 3);

62 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Find");

63 
	`js⁄_dñëe
(
ã°
);

64 
ã°
 = 
	`js⁄_√w
(
JSON_NODE
);

65 
	`Cª©eTe°
(
ã°
);

67 
JSONNODE_ITERATOR
 
ti
 = 
	`js⁄_föd
(
ã°
, 
	`JSON_TEXT
("bye"));

68 
	`as£πEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

70 
ti
 = 
	`js⁄_föd
(
ã°
, 
	`JSON_TEXT
("Hai"));

71 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

72 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Mars"));

73 
ti
 = 
	`js⁄_föd
(
ã°
, 
	`JSON_TEXT
("Hey"));

74 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

75 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Jude"));

76 
ti
 = 
	`js⁄_föd
(
ã°
, 
	`JSON_TEXT
("Hi"));

77 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

78 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("World"));

80 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


81 
ti
 = 
	`js⁄_föd_noˇ£
(
ã°
, 
	`JSON_TEXT
("BYE"));

82 
	`as£πEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

83 
ti
 = 
	`js⁄_föd_noˇ£
(
ã°
, 
	`JSON_TEXT
("HAI"));

84 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

85 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Mars"));

86 
ti
 = 
	`js⁄_föd_noˇ£
(
ã°
, 
	`JSON_TEXT
("HEY"));

87 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

88 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Jude"));

89 
ti
 = 
	`js⁄_föd_noˇ£
(
ã°
, 
	`JSON_TEXT
("HI"));

90 
	`as£πNŸEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

91 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("World"));

93 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Erase");

95 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_begö
(test) + 3);

96 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 4);

97 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("World"));

98 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("There"));

99 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Mars"));

100 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Jude"));

101 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Jude"));

102 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_begö
(test));

103 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

104 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("There"));

105 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("Mars"));

106 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Jude"));

107 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("There"));

109 #ifde‡
JSON_SAFE


110 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_íd
(test));

111 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

112 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("There"));

113 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("Mars"));

114 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Jude"));

115 
	`as£πEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

118 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_begö
(test));

119 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 2);

120 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("Mars"));

121 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("Jude"));

122 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Mars"));

124 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_begö
(test));

125 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

126 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("Jude"));

127 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Jude"));

129 
ti
 = 
	`js⁄_îa£
(
ã°
, 
	`js⁄_begö
(test));

130 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 0);

131 
	`as£πEquÆs
(
ti
, 
	`js⁄_íd
(
ã°
));

133 
	`Cª©eTe°
(
ã°
);

134 
i
 = 0;

135 
JSONNODE_ITERATOR
 
ô
 = 
	`js⁄_begö
(
ã°
); ià!
	`js⁄_íd
—e°); ià
	`js⁄_îa£
(test, it)){

136 ++
i
;

138 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 0);

139 
	`as£πEquÆs
(
i
, 5);

142 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Bulk Erase");

143 
	`Cª©eTe°
(
ã°
);

145 
ti
 = 
	`js⁄_îa£_mu…i
(
ã°
, 
	`js⁄_begö
(test), json_begin(test));

146 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 5);

147 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("World"));

148 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("There"));

149 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Mars"));

150 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Earth"));

151 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 4)), 
	`JSON_TEXT
("Jude"));

152 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
));

154 
	`js⁄_îa£_mu…i
(
ã°
, 
	`js⁄_begö
—e°), 
	`js⁄_íd
(test));

155 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 0);

156 
	`Cª©eTe°
(
ã°
);

158 
ti
 = 
	`js⁄_îa£_mu…i
(
ã°
, 
	`js⁄_begö
(test), json_begin(test) + 1);

159 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 4);

160 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("There"));

161 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("Mars"));

162 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Earth"));

163 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Jude"));

164 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
));

166 
ti
 = 
	`js⁄_îa£_mu…i
(
ã°
, 
	`js⁄_begö
(test), json_begin(test) + 2);

167 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 2);

168 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("Earth"));

169 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("Jude"));

170 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
));

172 
ti
 = 
	`js⁄_îa£_mu…i
(
ã°
, 
	`js⁄_begö
—e°), 
	`js⁄_íd
(test) - 1);

173 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

174 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("Jude"));

175 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
));

176 
	`js⁄_˛ór
(
ã°
);

180 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Insert");

181 
	`Cª©eTe°
(
ã°
);

182 
ti
 = 
	`js⁄_ö£π
(
ã°
, 
	`js⁄_begö
—e°Ë+ 3, 
	`js⁄_√w_a
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

183 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 6);

184 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("World"));

185 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("There"));

186 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Mars"));

187 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Pluto"));

188 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 4)), 
	`JSON_TEXT
("Earth"));

189 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 5)), 
	`JSON_TEXT
("Jude"));

190 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Pluto"));

191 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
) + 3);

192 
	`js⁄_˛ór
(
ã°
);

194 
	`Cª©eTe°
(
ã°
);

195 
ti
 = 
	`js⁄_ö£π
(
ã°
, 
	`js⁄_begö
—e°), 
	`js⁄_√w_a
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

196 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 6);

197 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("Pluto"));

198 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("World"));

199 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("There"));

200 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Mars"));

201 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 4)), 
	`JSON_TEXT
("Earth"));

202 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 5)), 
	`JSON_TEXT
("Jude"));

203 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Pluto"));

204 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
));

205 
	`js⁄_˛ór
(
ã°
);

207 
	`Cª©eTe°
(
ã°
);

208 
ti
 = 
	`js⁄_ö£π
(
ã°
, 
	`js⁄_begö
—e°Ë+ 5, 
	`js⁄_√w_a
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

209 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 6);

210 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 0)), 
	`JSON_TEXT
("World"));

211 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 1)), 
	`JSON_TEXT
("There"));

212 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 2)), 
	`JSON_TEXT
("Mars"));

213 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 3)), 
	`JSON_TEXT
("Earth"));

214 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 4)), 
	`JSON_TEXT
("Jude"));

215 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°
, 5)), 
	`JSON_TEXT
("Pluto"));

216 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("Pluto"));

217 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°
) + 5);

218 
	`js⁄_˛ór
(
ã°
);

220 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Bulk Insert");

225 
JSONNODE
 * 
ã°3
 = 
	`js⁄_√w
(
JSON_NODE
);

227 
	`Cª©eTe°
(
ã°
);

228 
	`Cª©eTe°
(
ã°3
);

229 
ti
 = 
	`js⁄_ö£π_mu…i
(
ã°3
, 
	`js⁄_begö
—e°3Ë+ 3, js⁄_begö(
ã°
) + 1, json_begin(test) + 3);

230 
	`as£πEquÆs
(
	`js⁄_size
(
ã°3
), 7);

231 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 0)), 
	`JSON_TEXT
("World"));

232 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 1)), 
	`JSON_TEXT
("There"));

233 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 2)), 
	`JSON_TEXT
("Mars"));

234 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 3)), 
	`JSON_TEXT
("There"));

235 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 4)), 
	`JSON_TEXT
("Mars"));

236 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 5)), 
	`JSON_TEXT
("Earth"));

237 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 6)), 
	`JSON_TEXT
("Jude"));

238 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("There"));

239 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°3
) + 3);

240 
	`js⁄_˛ór
(
ã°
);

241 
	`js⁄_˛ór
(
ã°3
);

243 
	`Cª©eTe°
(
ã°
);

244 
	`Cª©eTe°
(
ã°3
);

245 
ti
 = 
	`js⁄_ö£π_mu…i
(
ã°3
, 
	`js⁄_begö
—e°3), js⁄_begö(
ã°
) + 1, json_begin(test) + 3);

246 
	`as£πEquÆs
(
	`js⁄_size
(
ã°3
), 7);

247 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 0)), 
	`JSON_TEXT
("There"));

248 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 1)), 
	`JSON_TEXT
("Mars"));

249 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 2)), 
	`JSON_TEXT
("World"));

250 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 3)), 
	`JSON_TEXT
("There"));

251 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 4)), 
	`JSON_TEXT
("Mars"));

252 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 5)), 
	`JSON_TEXT
("Earth"));

253 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 6)), 
	`JSON_TEXT
("Jude"));

254 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("There"));

255 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°3
));

256 
	`js⁄_˛ór
(
ã°
);

257 
	`js⁄_˛ór
(
ã°3
);

259 
	`Cª©eTe°
(
ã°
);

260 
	`Cª©eTe°
(
ã°3
);

261 
	`js⁄_£t_a
(
	`js⁄_©
(
ã°3
, 2), 
	`JSON_TEXT
("lol"));

262 
	`js⁄_£t_a
(
	`js⁄_©
(
ã°3
, 3), 
	`JSON_TEXT
("lul"));

263 
ti
 = 
	`js⁄_ö£π_mu…i
(
ã°3
, 
	`js⁄_begö
—e°3Ë+ 5, js⁄_begö(
ã°
) + 1, json_begin(test) + 3);

264 
	`as£πEquÆs
(
	`js⁄_size
(
ã°3
), 7);

265 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 0)), 
	`JSON_TEXT
("World"));

266 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 1)), 
	`JSON_TEXT
("There"));

267 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 2)), 
	`JSON_TEXT
("lol"));

268 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 3)), 
	`JSON_TEXT
("lul"));

269 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 4)), 
	`JSON_TEXT
("Jude"));

270 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 5)), 
	`JSON_TEXT
("There"));

271 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(
	`js⁄_©
(
ã°3
, 6)), 
	`JSON_TEXT
("Mars"));

272 
	`as£πAutoCSåög
(
	`js⁄_as_°rög
(*
ti
), 
	`JSON_TEXT
("There"));

273 
	`as£πEquÆs
(
ti
, 
	`js⁄_begö
(
ã°3
) + 5);

275 
	`js⁄_dñëe
(
em±y
);

276 
	`js⁄_dñëe
(
ã°
);

277 
	`js⁄_dñëe
(
ã°3
);

279 
JSONNode
 
em±y
 = 
	`JSONNode
(
JSON_NODE
);

280 
	`as£πEquÆs
(
em±y
.
	`begö
(),Ém±y.
	`íd
());

281 
	`as£πEquÆs
(
em±y
.
	`rbegö
(),Ém±y.
	`ªnd
());

282 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
em±y
);

284 
	`as£πEx˚±i⁄
(
em±y
.
	`©
(15), 
°d
::
out_of_ønge
);

285 
	`as£πEx˚±i⁄
(
em±y
.
	`©
(
	`JSON_TEXT
("hñlo")), 
°d
::
out_of_ønge
);

287 
JSONNode
 
ã°
 = 
	`JSONNode
(
JSON_NODE
);

288 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 15));

289 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), JSON_TEXT("hello world")));

290 
ã°
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 
åue
));

291 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

292 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°
);

294 
JSONNode
::
ôî©‹
 
ô_ã°
 = 
ã°
.
	`begö
();

295 
	`as£πEquÆs
(*
ô_ã°
, 15);

296 ++
ô_ã°
;

297 
	`as£πEquÆs
(*
ô_ã°
, 
	`JSON_TEXT
("hello world"));

298 
ô_ã°
++;

299 
	`as£πEquÆs
(*
ô_ã°
++, 
åue
);

300 
	`as£πEquÆs
(
ô_ã°
, 
ã°
.
	`íd
());

302 
i
 = 0;

303 
JSONNode
::
ôî©‹
 
ô
 = 
ã°
.
	`begö
(), 
íd
 =Åe°.
	`íd
(); it !=Énd; ++it){

304 ++
i
;

306 
	`as£πEquÆs
(
i
, 3);

310 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Const Iterator");

311 c⁄° 
JSONNode
 
ã°2
 = 
ã°
;

312 
	`as£πEquÆs
(
ã°2
.
	`size
(), 3);

314 
JSONNode
::
c⁄°_ôî©‹
 
cô_ã°
 = 
ã°2
.
	`begö
();

315 
	`as£πEquÆs
(*
cô_ã°
, 15);

316 ++
cô_ã°
;

317 
	`as£πEquÆs
(*
cô_ã°
, 
	`JSON_TEXT
("hello world"));

318 
cô_ã°
++;

319 
	`as£πEquÆs
(*
cô_ã°
++, 
åue
);

320 
	`as£πEquÆs
(
cô_ã°
, 
ã°2
.
	`íd
());

321 
i
 = 0;

322 
JSONNode
::
c⁄°_ôî©‹
 
ô
 = 
ã°2
.
	`begö
(), 
íd
 =Åe°2.
	`íd
(); it !=Énd; ++it){

323 ++
i
;

325 
	`as£πEquÆs
(
i
, 3);

329 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Reverse Iterator");

330 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

332 
JSONNode
::
ªvî£_ôî©‹
 
rô_ã°
 = 
ã°
.
	`rbegö
();

333 
	`as£πEquÆs
(*
rô_ã°
, 
åue
);

334 ++
rô_ã°
;

335 
	`as£πEquÆs
(*
rô_ã°
, 
	`JSON_TEXT
("hello world"));

336 
rô_ã°
++;

337 
	`as£πEquÆs
(*
rô_ã°
++, 15);

338 
	`as£πEquÆs
(
rô_ã°
, 
ã°
.
	`ªnd
());

339 
i
 = 0;

340 
JSONNode
::
ªvî£_ôî©‹
 
ô
 = 
ã°
.
	`rbegö
(), 
íd
 =Åe°.
	`ªnd
(); it !=Énd; ++it){

341 ++
i
;

343 
	`as£πEquÆs
(
i
, 3);

347 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Reverse Const Iterator");

348 
	`as£πEquÆs
(
ã°2
.
	`size
(), 3);

350 
JSONNode
::
ªvî£_c⁄°_ôî©‹
 
rcô_ã°
 = 
ã°2
.
	`rbegö
();

351 
	`as£πEquÆs
(*
rcô_ã°
, 
åue
);

352 ++
rcô_ã°
;

353 
	`as£πEquÆs
(*
rcô_ã°
, 
	`JSON_TEXT
("hello world"));

354 
rcô_ã°
++;

355 
	`as£πEquÆs
(*
rcô_ã°
++, 15);

356 
	`as£πEquÆs
(
rcô_ã°
, 
ã°2
.
	`ªnd
());

357 
i
 = 0;

358 
JSONNode
::
ªvî£_c⁄°_ôî©‹
 
ô
 = 
ã°2
.
	`rbegö
(), 
íd
 =Åe°2.
	`ªnd
(); it !=Énd; ++it){

359 ++
i
;

361 
	`as£πEquÆs
(
i
, 3);

364 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Find");

365 
ã°
 = 
	`JSONNode
();

366 
	`Cª©eTe°
(
ã°
);

368 
JSONNode
::
ôî©‹
 
ti
 = 
ã°
.
	`föd
(
	`JSON_TEXT
("bye"));

369 
	`as£πEquÆs
(
ti
, 
ã°
.
	`íd
());

370 
ti
 = 
ã°
.
	`föd
(
	`JSON_TEXT
("Hai"));

371 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

372 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Mars"));

373 
ti
 = 
ã°
.
	`föd
(
	`JSON_TEXT
("Hey"));

374 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

375 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Jude"));

376 
ti
 = 
ã°
.
	`föd
(
	`JSON_TEXT
("Hi"));

377 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

378 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("World"));

380 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


381 
ti
 = 
ã°
.
	`föd_noˇ£
(
	`JSON_TEXT
("BYE"));

382 
	`as£πEquÆs
(
ti
, 
ã°
.
	`íd
());

383 
ti
 = 
ã°
.
	`föd_noˇ£
(
	`JSON_TEXT
("HAI"));

384 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

385 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Mars"));

386 
ti
 = 
ã°
.
	`föd_noˇ£
(
	`JSON_TEXT
("HEY"));

387 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

388 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Jude"));

389 
ti
 = 
ã°
.
	`föd_noˇ£
(
	`JSON_TEXT
("HI"));

390 
	`as£πNŸEquÆs
(
ti
, 
ã°
.
	`íd
());

391 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("World"));

393 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Erase");

395 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
() + 3);

396 
	`as£πEquÆs
(
ã°
.
	`size
(), 4);

397 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

398 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

399 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

400 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Jude"));

401 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Jude"));

402 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
());

403 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

404 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

405 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Mars"));

406 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Jude"));

407 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("There"));

409 
JSONNode
::
ªvî£_ôî©‹
 
πi
 = 
ã°
.
	`rbegö
();

410 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Jude"));

411 #ifde‡
JSON_SAFE


412 
πi
 = 
ã°
.
	`îa£
—e°.
	`ªnd
());

413 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

414 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

415 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Mars"));

416 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Jude"));

417 
	`as£πEquÆs
(
πi
, 
ã°
.
	`ªnd
());

418 
ti
 = 
ã°
.
	`îa£
—e°.
	`íd
());

419 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

420 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

421 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Mars"));

422 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Jude"));

423 
	`as£πEquÆs
(
ti
, 
ã°
.
	`íd
());

425 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
());

426 
	`as£πEquÆs
(
ã°
.
	`size
(), 2);

427 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

428 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Mars"));

429 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Mars"));

431 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
());

432 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

433 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

434 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("There"));

436 
ã°
.
	`îa£
—e°.
	`rbegö
());

437 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

438 #ifde‡
JSON_SAFE


439 
ã°
.
	`îa£
—e°.
	`ªnd
());

440 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

441 
ã°
.
	`îa£
—e°.
	`íd
());

442 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

445 
	`Cª©eTe°
(
ã°
);

446 
i
 = 0;

447 
JSONNode
::
ôî©‹
 
ô
 = 
ã°
.
	`begö
(); ià!ã°.
	`íd
(); iàã°.
	`îa£
(it)){

448 ++
i
;

450 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

451 
	`as£πEquÆs
(
i
, 5);

453 
	`Cª©eTe°
(
ã°
);

454 
i
 = 0;

455 
JSONNode
::
ªvî£_ôî©‹
 
ô
 = 
ã°
.
	`rbegö
(); ià!ã°.
	`ªnd
(); iàã°.
	`îa£
(it)){

456 ++
i
;

458 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

459 
	`as£πEquÆs
(
i
, 5);

461 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Bulk Erase");

462 
	`Cª©eTe°
(
ã°
);

464 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
(),Åest.begin());

465 
	`as£πEquÆs
(
ã°
.
	`size
(), 5);

466 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

467 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

468 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

469 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Earth"));

470 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Jude"));

471 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
());

473 
ã°
.
	`îa£
—e°.
	`begö
(),Åe°.
	`íd
());

474 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

475 
	`Cª©eTe°
(
ã°
);

477 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
(),Åest.begin() + 1);

478 
	`as£πEquÆs
(
ã°
.
	`size
(), 4);

479 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("There"));

480 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Mars"));

481 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Earth"));

482 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Jude"));

483 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
());

485 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
(),Åest.begin() + 2);

486 
	`as£πEquÆs
(
ã°
.
	`size
(), 2);

487 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("Earth"));

488 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("Jude"));

489 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
());

491 
ti
 = 
ã°
.
	`îa£
—e°.
	`begö
(),Åe°.
	`íd
() - 1);

492 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

493 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("Jude"));

494 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
());

495 
ã°
.
	`˛ór
();

497 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Bulk Reverse Erase");

498 
	`Cª©eTe°
(
ã°
);

500 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
(),Åest.rbegin());

501 
	`as£πEquÆs
(
ã°
.
	`size
(), 5);

502 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

503 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

504 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

505 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Earth"));

506 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Jude"));

507 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

509 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
(),Åe°.
	`ªnd
());

510 
	`as£πEquÆs
(
ã°
.
	`size
(), 0);

511 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

512 
	`as£πEquÆs
(
πi
, 
ã°
.
	`ªnd
());

513 
	`Cª©eTe°
(
ã°
);

515 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
(),Åest.rbegin() + 1);

516 
	`as£πEquÆs
(
ã°
.
	`size
(), 4);

517 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

518 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

519 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

520 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Earth"));

521 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

523 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
(),Åest.rbegin() + 2);

524 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

525 
	`as£πEquÆs
(
ã°
.
	`size
(), 2);

526 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

527 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

528 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

530 
πi
 = 
ã°
.
	`îa£
—e°.
	`rbegö
(),Åe°.
	`ªnd
() - 1);

531 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

532 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

533 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

534 
ã°
.
	`˛ór
();

536 
UnôTe°
::
	`SëPªfix
("TestIterators.cpp - Iterator Insert");

537 
	`Cª©eTe°
(
ã°
);

538 
ti
 = 
ã°
.
	`ö£π
—e°.
	`begö
(Ë+ 3, 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

539 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

540 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

541 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

542 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

543 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Pluto"));

544 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Earth"));

545 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Jude"));

546 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Pluto"));

547 
	`as£πEquÆs
(
ti
 -> 
	`as_°rög
(), 
	`JSON_TEXT
("Pluto"));

548 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
() + 3);

549 
ã°
.
	`˛ór
();

551 
	`Cª©eTe°
(
ã°
);

552 
ti
 = 
ã°
.
	`ö£π
—e°.
	`begö
(), 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

553 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

554 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("Pluto"));

555 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("World"));

556 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("There"));

557 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Mars"));

558 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Earth"));

559 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Jude"));

560 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Pluto"));

561 
	`as£πEquÆs
(
ti
 -> 
	`as_°rög
(), 
	`JSON_TEXT
("Pluto"));

562 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
());

563 
ã°
.
	`˛ór
();

565 
	`Cª©eTe°
(
ã°
);

566 
ti
 = 
ã°
.
	`ö£π
—e°.
	`begö
(Ë+ 5, 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

567 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

568 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

569 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

570 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

571 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Earth"));

572 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Jude"));

573 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Pluto"));

574 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Pluto"));

575 
	`as£πEquÆs
(
ti
 -> 
	`as_°rög
(), 
	`JSON_TEXT
("Pluto"));

576 
	`as£πEquÆs
(
ti
, 
ã°
.
	`begö
() + 5);

577 
ã°
.
	`˛ór
();

579 
	`Cª©eTe°
(
ã°
);

580 
πi
 = 
ã°
.
	`ö£π
—e°.
	`rbegö
(), 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

581 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

582 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

583 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

584 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

585 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Earth"));

586 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Jude"));

587 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Pluto"));

588 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Pluto"));

589 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
());

590 
ã°
.
	`˛ór
();

592 
	`Cª©eTe°
(
ã°
);

593 
πi
 = 
ã°
.
	`ö£π
—e°.
	`rbegö
(Ë+ 5, 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

594 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

595 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("Pluto"));

596 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("World"));

597 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("There"));

598 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Mars"));

599 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Earth"));

600 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Jude"))

601 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Pluto"));

602 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
() + 5);

603 
ã°
.
	`˛ór
();

605 
	`Cª©eTe°
(
ã°
);

606 
πi
 = 
ã°
.
	`ö£π
—e°.
	`rbegö
(Ë+ 2, 
	`JSONNode
(
	`JSON_TEXT
("olah"), JSON_TEXT("Pluto")));

607 
	`as£πEquÆs
(
ã°
.
	`size
(), 6);

608 
	`as£πEquÆs
(
ã°
[0], 
	`JSON_TEXT
("World"));

609 
	`as£πEquÆs
(
ã°
[1], 
	`JSON_TEXT
("There"));

610 
	`as£πEquÆs
(
ã°
[2], 
	`JSON_TEXT
("Mars"));

611 
	`as£πEquÆs
(
ã°
[3], 
	`JSON_TEXT
("Pluto"));

612 
	`as£πEquÆs
(
ã°
[4], 
	`JSON_TEXT
("Earth"));

613 
	`as£πEquÆs
(
ã°
[5], 
	`JSON_TEXT
("Jude"));

614 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Pluto"));

615 
	`as£πEquÆs
(
πi
, 
ã°
.
	`rbegö
() + 2);

616 
ã°
.
	`˛ór
();

618 
JSONNode
 
ã°3
;

620 
	`Cª©eTe°
(
ã°
);

621 
	`Cª©eTe°
(
ã°3
);

622 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(Ë+ 3, 
ã°
.begin() + 1,Åest.begin() + 3);

623 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

624 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

625 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

626 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("Mars"));

627 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("There"));

628 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Mars"));

629 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

630 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

631 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("There"));

632 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
() + 3);

633 
ã°
.
	`˛ór
();

634 
ã°3
.
	`˛ór
();

636 
	`Cª©eTe°
(
ã°
);

637 
	`Cª©eTe°
(
ã°3
);

638 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(), 
ã°
.begin() + 1,Åest.begin() + 3);

639 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

640 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("There"));

641 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("Mars"));

642 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("World"));

643 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("There"));

644 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Mars"));

645 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

646 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

647 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("There"));

648 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
());

649 
ã°
.
	`˛ór
();

650 
ã°3
.
	`˛ór
();

652 
	`Cª©eTe°
(
ã°
);

653 
	`Cª©eTe°
(
ã°3
);

654 
ã°3
[2] = 
	`JSON_TEXT
("lol");

655 
ã°3
[3] = 
	`JSON_TEXT
("lul");

656 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(Ë+ 5, 
ã°
.begin() + 1,Åest.begin() + 3);

657 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

658 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

659 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

660 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("lol"));

661 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("lul"));

662 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Jude"));

663 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("There"));

664 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Mars"));

665 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("There"));

666 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
() + 5);

667 
ã°
.
	`˛ór
();

668 
ã°3
.
	`˛ór
();

671 
	`Cª©eTe°
(
ã°
);

672 
	`Cª©eTe°
(
ã°3
);

673 
ã°3
[2] = 
	`JSON_TEXT
("lol");

674 
ã°3
[3] = 
	`JSON_TEXT
("lul");

675 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(Ë+ 3, 
ã°
.
	`rbegö
() + 1,Åest.rbegin() + 3);

676 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

677 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

678 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

679 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("lol"));

680 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("Earth"));

681 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Mars"));

682 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("lul"));

683 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

684 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Earth"));

685 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
() + 3);

686 
ã°
.
	`˛ór
();

687 
ã°3
.
	`˛ór
();

689 
	`Cª©eTe°
(
ã°
);

690 
	`Cª©eTe°
(
ã°3
);

691 
ã°3
[2] = 
	`JSON_TEXT
("lol");

692 
ã°3
[3] = 
	`JSON_TEXT
("lul");

693 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(), 
ã°
.
	`rbegö
() + 1,Åest.rbegin() + 3);

694 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

695 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("Earth"));

696 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("Mars"));

697 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("World"));

698 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("There"));

699 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("lol"));

700 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("lul"));

701 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

702 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Earth"));

703 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
());

704 
ã°
.
	`˛ór
();

705 
ã°3
.
	`˛ór
();

707 
	`Cª©eTe°
(
ã°
);

708 
	`Cª©eTe°
(
ã°3
);

709 
ã°3
[2] = 
	`JSON_TEXT
("lol");

710 
ã°3
[3] = 
	`JSON_TEXT
("lul");

711 
ti
 = 
ã°3
.
	`ö£π
—e°3.
	`begö
(Ë+ 5, 
ã°
.
	`rbegö
() + 1,Åest.rbegin() + 3);

712 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

713 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

714 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

715 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("lol"));

716 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("lul"));

717 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Jude"));

718 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

719 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Mars"));

720 
	`as£πEquÆs
(*
ti
, 
	`JSON_TEXT
("Earth"));

721 
	`as£πEquÆs
(
ti
, 
ã°3
.
	`begö
() + 5);

722 
ã°
.
	`˛ór
();

723 
ã°3
.
	`˛ór
();

728 
	`Cª©eTe°
(
ã°
);

729 
	`Cª©eTe°
(
ã°3
);

730 
ã°3
[1] = 
	`JSON_TEXT
("lol");

731 
ã°3
[2] = 
	`JSON_TEXT
("lul");

732 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(), 
ã°
.
	`begö
() + 1,Åest.begin() + 3);

733 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

734 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

735 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("lol"));

736 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("lul"));

737 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("Earth"));

738 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Jude"));

739 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Mars"));

740 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("There"));

741 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("There"));

742 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
());

743 
ã°
.
	`˛ór
();

744 
ã°3
.
	`˛ór
();

746 
	`Cª©eTe°
(
ã°
);

747 
	`Cª©eTe°
(
ã°3
);

748 
ã°3
[1] = 
	`JSON_TEXT
("lol");

749 
ã°3
[2] = 
	`JSON_TEXT
("lul");

750 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(Ë+ 3, 
ã°
.
	`begö
() + 1,Åest.begin() + 3);

751 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

752 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

753 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("lol"));

754 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("Mars"));

755 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("There"));

756 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("lul"));

757 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

758 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

759 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("There"));

760 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
() + 3);

761 
ã°
.
	`˛ór
();

762 
ã°3
.
	`˛ór
();

764 
	`Cª©eTe°
(
ã°
);

765 
	`Cª©eTe°
(
ã°3
);

766 
ã°3
[1] = 
	`JSON_TEXT
("lol");

767 
ã°3
[2] = 
	`JSON_TEXT
("lul");

768 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(Ë+ 5, 
ã°
.
	`begö
() + 1,Åest.begin() + 3);

769 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

770 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("Mars"));

771 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

772 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("World"));

773 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("lol"));

774 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("lul"));

775 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

776 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

777 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("There"));

778 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
() + 5);

779 
ã°
.
	`˛ór
();

780 
ã°3
.
	`˛ór
();

783 
	`Cª©eTe°
(
ã°
);

784 
	`Cª©eTe°
(
ã°3
);

785 
ã°3
[2] = 
	`JSON_TEXT
("lol");

786 
ã°3
[3] = 
	`JSON_TEXT
("lul");

787 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(), 
ã°
.rbegin() + 1,Åest.rbegin() + 3);

788 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

789 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

790 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

791 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("lol"));

792 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("lul"));

793 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("Jude"));

794 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("Earth"));

795 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Mars"));

796 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Mars"));

797 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
());

798 
ã°
.
	`˛ór
();

799 
ã°3
.
	`˛ór
();

801 
	`Cª©eTe°
(
ã°
);

802 
	`Cª©eTe°
(
ã°3
);

803 
ã°3
[2] = 
	`JSON_TEXT
("lol");

804 
ã°3
[3] = 
	`JSON_TEXT
("lul");

805 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(Ë+ 3, 
ã°
.rbegin() + 1,Åest.rbegin() + 3);

806 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

807 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("World"));

808 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("There"));

809 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("Earth"));

810 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("Mars"));

811 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("lol"));

812 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("lul"));

813 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

814 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Mars"));

815 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
() + 3);

816 
ã°
.
	`˛ór
();

817 
ã°3
.
	`˛ór
();

819 
	`Cª©eTe°
(
ã°
);

820 
	`Cª©eTe°
(
ã°3
);

821 
ã°3
[2] = 
	`JSON_TEXT
("lol");

822 
ã°3
[3] = 
	`JSON_TEXT
("lul");

823 
πi
 = 
ã°3
.
	`ö£π
—e°3.
	`rbegö
(Ë+ 5, 
ã°
.rbegin() + 1,Åest.rbegin() + 3);

824 
	`as£πEquÆs
(
ã°3
.
	`size
(), 7);

825 
	`as£πEquÆs
(
ã°3
[0], 
	`JSON_TEXT
("Earth"));

826 
	`as£πEquÆs
(
ã°3
[1], 
	`JSON_TEXT
("Mars"));

827 
	`as£πEquÆs
(
ã°3
[2], 
	`JSON_TEXT
("World"));

828 
	`as£πEquÆs
(
ã°3
[3], 
	`JSON_TEXT
("There"));

829 
	`as£πEquÆs
(
ã°3
[4], 
	`JSON_TEXT
("lol"));

830 
	`as£πEquÆs
(
ã°3
[5], 
	`JSON_TEXT
("lul"));

831 
	`as£πEquÆs
(
ã°3
[6], 
	`JSON_TEXT
("Jude"));

832 
	`as£πEquÆs
(*
πi
, 
	`JSON_TEXT
("Mars"));

833 
	`as£πEquÆs
(
πi
, 
ã°3
.
	`rbegö
() + 5);

834 
ã°
.
	`˛ór
();

835 
ã°3
.
	`˛ór
();

838 
	}
}

	@libjson/_internal/TestSuite/TestMutex.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

5 #ifde‡
JSON_MUTEX_CALLBACKS


6 
	gã°Muãx
 = 0;

7 
boﬁ
 
	gdﬂs£π
 = 
åue
;

8 
	gm™agîlock
;

9 
	$lock
(* 
muãx
){

10 i‡(
muãx
 =&
m™agîlock
) ;

11 i‡(
dﬂs£π
Ë
	`as£πEquÆs
(
muãx
, &
ã°Muãx
);

12 i‡(
muãx
 !&
ã°Muãx
) ;

13 ++(*((*)
muãx
));

14 
	}
}

15 
	$u∆ock
(* 
muãx
){

16 i‡(
muãx
 =&
m™agîlock
) ;

17 i‡(
dﬂs£π
Ë
	`as£πEquÆs
(
muãx
, &
ã°Muãx
);

18 i‡(
muãx
 !&
ã°Muãx
) ;

19 --(*((*)
muãx
));

20 
	}
}

22 * 
	gcuºítMuãxTe°
 = 0;

24 #ifde‡
JSON_MUTEX_MANAGE


25 
	~"../Sour˚/JSONGlobÆs.h
"

27 
	$de°roy
(* 
muãx
){

28 
	`as£πEquÆs
(
muãx
, 
cuºítMuãxTe°
);

29 
	`as£πEquÆs
(*((*)
muãx
), 0);

30 
	}
}

33 
	gTe°Suôe
::
	$Te°Muãx
(){

34 
UnôTe°
::
	`SëPªfix
("TestMutex.cpp - Mutex");

36 #ifde‡
JSON_LIBRARY


39 #ifde‡
JSON_MUTEX_MANAGE


40 
	`js⁄_ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
de°roy
, &
m™agîlock
);

42 
	`js⁄_ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, &
m™agîlock
);

45 
cuºítMuãxTe°
 = &
ã°Muãx
;

47 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

48 #ifde‡
JSON_UNIT_TEST


49 
	`as£πNuŒ
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
 -> 
mylock
);

52 
JSONNODE
 * 
ã°2
 = 
	`js⁄_c›y
(
ã°1
);

53 
	`as£πNŸEquÆs
(
ã°1
, 
ã°2
);

54 #ifde‡
JSON_UNIT_TEST


55 
	`as£πNuŒ
(((
JSONNode
*)
ã°2
Ë-> 
öã∫Æ
 -> 
mylock
);

58 
	`js⁄_£t_muãx
(
ã°2
, &
ã°Muãx
);

60 #ifde‡
JSON_UNIT_TEST


61 
	`as£πEquÆs
(((
JSONNode
*)
ã°2
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

62 
	`as£πNuŒ
(((
JSONNode
*)
ã°1
Ë-> 
öã∫Æ
 -> 
mylock
);

65 
JSONNODE
 * 
ã°3
 = 
	`js⁄_c›y
(
ã°2
);

66 #ifde‡
JSON_UNIT_TEST


67 
	`as£πEquÆs
(((
JSONNode
*)
ã°3
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

68 
	`as£πEquÆs
(((
JSONNode
*)
ã°2
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

70 
	`js⁄_£t_a
(
ã°3
, 
	`JSON_TEXT
("Hello World"));

71 #ifde‡
JSON_UNIT_TEST


72 
	`as£πEquÆs
(((
JSONNode
*)
ã°3
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

75 #ifde‡
JSON_CASTABLE


76 
	`js⁄_ˇ°
(
ã°3
, 
JSON_NODE
);

77 #ifde‡
JSON_UNIT_TEST


78 
	`as£πEquÆs
(((
JSONNode
*)
ã°3
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

81 
JSONNODE
 * 
åì
 = 
	`js⁄_√w
(
JSON_NODE
);

82 
	`js⁄_push_back
(
åì
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("world")));

83 
	`js⁄_push_back
(
åì
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("Mars")));

84 
	`js⁄_push_back
(
åì
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("USA")));

85 
	`js⁄_push_back
(
ã°3
, 
	`js⁄_c›y
(
åì
));

86 #ifde‡
JSON_UNIT_TEST


87 
	`as£πEquÆs
(((
JSONNode
*)
ã°3
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

88 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(
ã°3
, 0)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

89 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 0)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

90 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 1)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

91 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 2)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

94 
	`js⁄_˛ór
(
ã°3
);

95 
	`js⁄_£t_muãx
(
ã°3
, 0);

96 
	`as£πEquÆs
(
	`js⁄_size
(
ã°3
), 0);

97 
	`as£πEquÆs
(
	`js⁄_size
(
åì
), 3);

98 #ifde‡
JSON_UNIT_TEST


99 
	`as£πNuŒ
(((
JSONNode
*)
åì
Ë-> 
öã∫Æ
 -> 
mylock
);

100 
	`as£πNuŒ
(((
JSONNode
*)
	`js⁄_©
(
åì
, 0)Ë-> 
öã∫Æ
 -> 
mylock
);

101 
	`as£πNuŒ
(((
JSONNode
*)
	`js⁄_©
(
åì
, 1)Ë-> 
öã∫Æ
 -> 
mylock
);

102 
	`as£πNuŒ
(((
JSONNode
*)
	`js⁄_©
(
åì
, 2)Ë-> 
öã∫Æ
 -> 
mylock
);

104 
	`js⁄_£t_muãx
(
åì
, &
ã°Muãx
);

105 #ifde‡
JSON_UNIT_TEST


106 
	`as£πEquÆs
(((
JSONNode
*)
åì
Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

107 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(
åì
, 0)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

108 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(
åì
, 1)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

109 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(
åì
, 2)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

111 
	`js⁄_push_back
(
ã°3
, 
åì
);

112 #ifde‡
JSON_UNIT_TEST


113 
	`as£πNuŒ
(((
JSONNode
*)
ã°3
Ë-> 
öã∫Æ
 -> 
mylock
);

114 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(
ã°3
, 0)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

115 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 0)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

116 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 1)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

117 
	`as£πEquÆs
(((
JSONNode
*)
	`js⁄_©
(js⁄_©(
ã°3
, 0), 2)Ë-> 
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

119 
	`as£πEquÆs
(
ã°Muãx
, 0);

122 #ifde‡
JSON_MUTEX_MANAGE


123 
UnôTe°
::
	`SëPªfix
("TestMutex.cpp - Mutex Management");

125 
JSONNODE
 * 
dñëeTe°
 = 
	`js⁄_√w
(
JSON_NODE
);

126 
i
 = 0;

127 
cuºítMuãxTe°
 = &
i
;

128 
	`js⁄_£t_muãx
(
dñëeTe°
, &
i
);

129 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
((*)&
i
);

130 
	`as£πEquÆs
(
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`size
(), 2);

131 
	`as£πNŸEquÆs
(
ô
, 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
());

132 
	`as£πEquÆs
(
ô
 -> 
fú°
, (*)&
i
);

133 
	`as£πEquÆs
(
ô
 -> 
£c⁄d
, 1);

135 
	`js⁄_£t_muãx
(
dñëeTe°
, &
ã°Muãx
);

136 
cuºítMuãxTe°
 = &
ã°Muãx
;

137 
	`js⁄_dñëe
(
dñëeTe°
);

141 
	`js⁄_dñëe
(
ã°1
);

142 
	`js⁄_dñëe
(
ã°2
);

143 
	`js⁄_dñëe
(
ã°3
);

145 #ifde‡
JSON_MUTEX_MANAGE


146 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
((*)&
ã°Muãx
);

147 
	`as£πEquÆs
(
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`size
(), 0);

148 
	`as£πEquÆs
(
ô
, 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
());

156 #ifde‡
JSON_MUTEX_MANAGE


157 
libjs⁄
::
	`ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
de°roy
, &
m™agîlock
);

159 
libjs⁄
::
	`ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, &
m™agîlock
);

162 
cuºítMuãxTe°
 = &
ã°Muãx
;

164 
JSONNode
 
ã°1
;

165 #ifde‡
JSON_UNIT_TEST


166 
	`as£πNuŒ
(
ã°1
.
öã∫Æ
 -> 
mylock
);

168 
JSONNode
 
ã°2
 = 
	`JSONNode
(
ã°1
);

169 #ifde‡
JSON_UNIT_TEST


170 
	`as£πNuŒ
(
ã°1
.
öã∫Æ
 -> 
mylock
);

172 
ã°2
.
	`£t_muãx
(&
ã°Muãx
);

173 #ifde‡
JSON_UNIT_TEST


174 
	`as£πEquÆs
(
ã°2
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

175 
	`as£πNuŒ
(
ã°1
.
öã∫Æ
 -> 
mylock
);

178 
JSONNode
 
ã°3
 = 
ã°2
;

179 #ifde‡
JSON_UNIT_TEST


180 
	`as£πEquÆs
(
ã°3
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

181 
	`as£πEquÆs
(
ã°2
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

183 
ã°3
 = 
	`JSON_TEXT
("Hello World");

184 #ifde‡
JSON_UNIT_TEST


185 
	`as£πEquÆs
(
ã°3
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

188 #ifde‡
JSON_CASTABLE


189 
ã°3
.
	`ˇ°
(
JSON_NODE
);

190 #ifde‡
JSON_UNIT_TEST


191 
	`as£πEquÆs
(
ã°3
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

193 
JSONNode
 
åì
 = 
	`JSONNode
(
JSON_NODE
);

194 
åì
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("world")));

195 
åì
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("Mars")));

196 
åì
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("USA")));

197 
ã°3
.
	`push_back
(
åì
);

198 #ifde‡
JSON_UNIT_TEST


199 
	`as£πEquÆs
(
ã°3
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

200 
	`as£πEquÆs
(
ã°3
[0].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

201 
	`as£πEquÆs
(
ã°3
[0][0].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

202 
	`as£πEquÆs
(
ã°3
[0][1].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

203 
	`as£πEquÆs
(
ã°3
[0][2].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

207 
ã°3
.
	`˛ór
();

208 
ã°3
.
	`£t_muãx
(0);

209 
	`as£πEquÆs
(
ã°3
.
	`size
(), 0);

210 
	`as£πEquÆs
(
åì
.
	`size
(), 3);

211 #ifde‡
JSON_UNIT_TEST


212 
	`as£πNuŒ
(
åì
.
öã∫Æ
 -> 
mylock
);

213 
	`as£πNuŒ
(
åì
[0].
öã∫Æ
 -> 
mylock
);

214 
	`as£πNuŒ
(
åì
[1].
öã∫Æ
 -> 
mylock
);

215 
	`as£πNuŒ
(
åì
[2].
öã∫Æ
 -> 
mylock
);

217 
åì
.
	`£t_muãx
(&
ã°Muãx
);

218 #ifde‡
JSON_UNIT_TEST


219 
	`as£πEquÆs
(
åì
.
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

220 
	`as£πEquÆs
(
åì
[0].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

221 
	`as£πEquÆs
(
åì
[1].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

222 
	`as£πEquÆs
(
åì
[2].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

224 
ã°3
.
	`push_back
(
åì
);

225 #ifde‡
JSON_UNIT_TEST


226 
	`as£πNuŒ
(
ã°3
.
öã∫Æ
 -> 
mylock
);

227 
	`as£πEquÆs
(
ã°3
[0].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

228 
	`as£πEquÆs
(
ã°3
[0][0].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

229 
	`as£πEquÆs
(
ã°3
[0][1].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

230 
	`as£πEquÆs
(
ã°3
[0][2].
öã∫Æ
 -> 
mylock
, &
ã°Muãx
);

232 #i‚de‡
JSON_SAFE


233 
dﬂs£π
 = 
Ál£
;

236 
JSONNode
::
auto_lock
 
	`ãmp1
(
ã°3
, 1);

237 
JSONNode
::
auto_lock
 
	`ãmp2
(
åì
, 1);

238 
	`as£πEquÆs
(
ã°Muãx
, 1);

240 #i‚de‡
JSON_SAFE


241 
dﬂs£π
 = 
åue
;

245 
	`as£πEquÆs
(
ã°Muãx
, 0);

247 #ifde‡
JSON_MUTEX_MANAGE


248 
UnôTe°
::
	`SëPªfix
("TestMutex.cpp - Mutex Management");

250 
JSONNode
 
dñëeTe°
 = 
	`JSONNode
(
JSON_NODE
);

251 
i
 = 0;

252 
cuºítMuãxTe°
 = &
i
;

253 
dñëeTe°
.
	`£t_muãx
(&
i
);

254 
	`JSON_MAP
(*, )::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
((*)&
i
);

255 
	`as£πEquÆs
(
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`size
(), 2);

256 
	`as£πNŸEquÆs
(
ô
, 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
());

257 
	`as£πEquÆs
(
ô
 -> 
fú°
, (*)&
i
);

258 
	`as£πEquÆs
(
ô
 -> 
£c⁄d
, 1);

260 
dñëeTe°
.
	`£t_muãx
(&
ã°Muãx
);

261 
cuºítMuãxTe°
 = &
ã°Muãx
;

265 #ifde‡
JSON_MUTEX_MANAGE


266 
°d
::
m≠
<*, >::
ôî©‹
 
ô
 = 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`föd
((*)&
ã°Muãx
);

267 
	`as£πEquÆs
(
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`size
(), 0);

268 
	`as£πEquÆs
(
ô
, 
	`js⁄_globÆ
(
MUTEX_MANAGER
).
	`íd
());

271 
	}
}

273 #ifde‡
JSON_MUTEX_CALLBACKS


274 
	gh™dÀr
 = 0;

275 
	$lock_muãx
(* 
muãx
){

276 i‡(
muãx
 =&
h™dÀr
) ;

277 
	`as£πEquÆs
(
muãx
, &
ã°Muãx
);

278 i‡(
muãx
 !&
ã°Muãx
) ;

279 ++(*((*)
muãx
));

280 
	}
}

281 
	$u∆ock_muãx
(* 
muãx
){

282 i‡(
muãx
 =&
h™dÀr
) ;

283 
	`as£πEquÆs
(
muãx
, &
ã°Muãx
);

284 i‡(
muãx
 !&
ã°Muãx
) ;

285 --(*((*)
muãx
));

286 
	}
}

288 
	$de°roy_muãx
(* ){
	}
}

290 
	gTe°Suôe
::
	$Te°Thªadög
(){

292 
UnôTe°
::
	`SëPªfix
("TestMutex.cpp - Threading");

293 
ã°Muãx
 = 0;

294 #ifde‡
JSON_LIBRARY


296 
JSONNODE
 * 
ã°
 = 
	`js⁄_√w
(
JSON_NODE
);

297 #ifde‡
JSON_MUTEX_MANAGE


298 
	`js⁄_ªgi°î_muãx_ˇŒbacks
(
lock_muãx
, 
u∆ock_muãx
, 
de°roy_muãx
, &
h™dÀr
);

300 
	`js⁄_ªgi°î_muãx_ˇŒbacks
(
lock_muãx
, 
u∆ock_muãx
, &
h™dÀr
);

302 
	`js⁄_£t_muãx
(
ã°
, &
ã°Muãx
);

304 
	`js⁄_lock
(
ã°
, 1);

305 
	`as£πEquÆs
(
ã°Muãx
, 1);

306 
	`js⁄_lock
(
ã°
, 1);

307 
	`as£πEquÆs
(
ã°Muãx
, 1);

308 
	`js⁄_lock
(
ã°
, 2);

309 
	`as£πEquÆs
(
ã°Muãx
, 2);

310 
	`js⁄_u∆ock
(
ã°
, 1);

311 
	`as£πEquÆs
(
ã°Muãx
, 2);

312 
	`js⁄_u∆ock
(
ã°
, 1);

313 
	`as£πEquÆs
(
ã°Muãx
, 1);

314 
	`js⁄_u∆ock
(
ã°
, 2);

315 
	`as£πEquÆs
(
ã°Muãx
, 0);

317 
	`js⁄_dñëe
(
ã°
);

320 
JSONNode
 
ã°
;

321 #ifde‡
JSON_MUTEX_MANAGE


322 
libjs⁄
::
	`ªgi°î_muãx_ˇŒbacks
(
lock_muãx
, 
u∆ock_muãx
, 
de°roy_muãx
, &
h™dÀr
);

324 
libjs⁄
::
	`ªgi°î_muãx_ˇŒbacks
(
lock_muãx
, 
u∆ock_muãx
, &
h™dÀr
);

327 
ã°
.
	`£t_muãx
(&
ã°Muãx
);

329 
ã°
.
	`lock
(1);

330 
	`as£πEquÆs
(
ã°Muãx
, 1);

331 
ã°
.
	`lock
(1);

332 
	`as£πEquÆs
(
ã°Muãx
, 1);

333 
ã°
.
	`lock
(2);

334 
	`as£πEquÆs
(
ã°Muãx
, 2);

335 
ã°
.
	`u∆ock
(1);

336 
	`as£πEquÆs
(
ã°Muãx
, 2);

337 
ã°
.
	`u∆ock
(1);

338 
	`as£πEquÆs
(
ã°Muãx
, 1);

339 
ã°
.
	`u∆ock
(2);

340 
	`as£πEquÆs
(
ã°Muãx
, 0);

344 
	}
}

	@libjson/_internal/TestSuite/TestNamespace.cpp

1 
	~"Te°Suôe.h
"

3 
	~"../Sour˚/JSONGlobÆs.h
"

5 
	gTe°Suôe
::
	$Te°Name•a˚
(){

6 #ifde‡
JSON_LIBRARY


7 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Memory Manager");

8 #ifde‡
JSON_MEMORY_MANAGE


9 
	#ASSERT_ZERO_ALLOCATIONS
()\

10 
	`as£πEquÆs
(
	`js⁄_globÆ
(
STRING_HANDLER
).
mym≠
.
	`size
(), 0);\

11 
	`as£πEquÆs
(
	`js⁄_globÆ
(
NODE_HANDLER
).
mym≠
.
	`size
(), 0)

	)

12 
	`ASSERT_ZERO_ALLOCATIONS
();

13 
JSONNODE
 * 
ã°
 = 
	`js⁄_√w
(
JSON_NODE
);

14 
	`js⁄_£t_a
(
ã°
, 
	`JSON_TEXT
("Hello"));

15 
	`as£πCSåögSame
(
	`js⁄_as_°rög
(
ã°
), 
	`JSON_TEXT
("Hello"));

16 
ã°
 = 
	`js⁄_√w_f
(
	`JSON_TEXT
("Hi"), 14.3f);

17 
	`as£πCSåögSame
(
	`js⁄_«me
(
ã°
), 
	`JSON_TEXT
("Hi"));

18 
	`as£πEquÆs
(
	`js⁄_globÆ
(
STRING_HANDLER
).
mym≠
.
	`size
(), 2);

19 
	`as£πEquÆs
(
	`js⁄_globÆ
(
NODE_HANDLER
).
mym≠
.
	`size
(), 2);

20 
	`js⁄_dñëe
(
ã°
);

21 
	`as£πEquÆs
(
	`js⁄_globÆ
(
NODE_HANDLER
).
mym≠
.
	`size
(), 1);

22 
	`js⁄_dñëe_Æl
();

23 
	`as£πEquÆs
(
	`js⁄_globÆ
(
NODE_HANDLER
).
mym≠
.
	`size
(), 0);

24 
	`js⁄_‰ì_Æl
();

25 
	`ASSERT_ZERO_ALLOCATIONS
();

27 
	#ASSERT_ZERO_ALLOCATIONS
(Ë()0

	)

29 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Stripper");

31 
	`ASSERT_ZERO_ALLOCATIONS
();

32 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
("{\n\t\"hello\" : \"world\"\r\n} ");

33 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":\"world\"}");

34 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

35 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

36 
	`js⁄_‰ì
(
ªs
);

37 
	`ASSERT_ZERO_ALLOCATIONS
();

40 #i‚de‡
JSON_STRICT


42 
	`ASSERT_ZERO_ALLOCATIONS
();

43 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
("/*comment*/{#comment\n\n\t\"hello\" ://comment\n \"world\"\r\n} ");

44 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":\"world\"}");

45 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

46 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

47 
	`js⁄_‰ì
(
ªs
);

48 
	`ASSERT_ZERO_ALLOCATIONS
();

53 
	`ASSERT_ZERO_ALLOCATIONS
();

54 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
("[\n\t\"hello world\" , \"hello mars\"\r\n] ");

55 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("[\"hello world\",\"hello mars\"]");

56 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

57 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

58 
	`js⁄_‰ì
(
ªs
);

59 
	`ASSERT_ZERO_ALLOCATIONS
();

62 
	`ASSERT_ZERO_ALLOCATIONS
();

63 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
(" {\n\t\"hello\" :Årue\r\n}");

64 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":true}");

65 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

66 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

67 
	`js⁄_‰ì
(
ªs
);

68 
	`ASSERT_ZERO_ALLOCATIONS
();

71 
	`ASSERT_ZERO_ALLOCATIONS
();

72 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
(" [\n\ttrue , false\r\n]");

73 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("[true,false]");

74 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

75 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

76 
	`js⁄_‰ì
(
ªs
);

77 
	`ASSERT_ZERO_ALLOCATIONS
();

80 
	`ASSERT_ZERO_ALLOCATIONS
();

81 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
("[true,false]");

82 c⁄° 
js⁄_ch¨
 * 
°rù≥d
 = 
	`JSON_TEXT
("[true,false]");

83 
js⁄_ch¨
 * 
ªs
 = 
	`js⁄_°rù_whôe_•a˚
(
js⁄
);

84 
	`as£πCSåögSame
(
ªs
, 
°rù≥d
);

85 
	`js⁄_‰ì
(
ªs
);

86 
	`ASSERT_ZERO_ALLOCATIONS
();

89 #ifde‡
JSON_SAFE


90 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Parser");

92 
	`ASSERT_ZERO_ALLOCATIONS
();

93 c⁄° 
js⁄_ch¨
 * 
js⁄
 = 
	`JSON_TEXT
("[{\"a\":\"b\",\"c\":{\"d\":\"e\",\"f\":\"g\",\"e\":\"f ");

94 
	`as£πNuŒ
(
	`js⁄_∑r£
(
js⁄
));

95 
	`ASSERT_ZERO_ALLOCATIONS
();

101 #ifde‡
JSON_VALIDATE


102 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Validator");

103 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("[true,false] ")));

104 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":\"world\"}")))

105 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":null}")))

106 #ifde‡
JSON_STRICT


107 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":}")));

108 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":, \"hi\" : \"Mars\"}")));

110 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":}")));

111 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":, \"hi\" : \"Mars\"}")));

113 
	`as£πTrue
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":null, \"hi\" : \"Mars\"}")));

114 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("{\"hello\":\"world\"")));

115 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("\"hello\":\"world\"")));

116 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("true,false]")));

117 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("[true,false")));

118 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("hello")));

119 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("")));

120 #ifde‡
JSON_SAFE


121 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
(" {\"hello\":world\"}")));

122 
	`as£πFÆ£
(
	`js⁄_is_vÆid
(
	`JSON_TEXT
("{\"hello\":\"world\",}")));

126 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Stripper");

128 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
("{\n\t\"hello\" : \"world\"\r\n} ");

129 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":\"world\"}");

130 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

133 #i‚de‡
JSON_STRICT


135 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
("/*comment*/{#comment\n\n\t\"hello\" ://comment\n \"world\"\r\n} ");

136 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":\"world\"}");

137 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

142 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
("[\n\t\"hello world\" , \"hello mars\"\r\n] ");

143 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("[\"hello world\",\"hello mars\"]");

144 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

147 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
(" {\n\t\"hello\" :Årue\r\n}");

148 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("{\"hello\":true}");

149 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

152 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
(" [\n\ttrue , false\r\n]");

153 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("[true,false]");

154 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

157 
js⁄_°rög
 
js⁄
 = 
	`JSON_TEXT
("[true,false]");

158 
js⁄_°rög
 
°rù≥d
 = 
	`JSON_TEXT
("[true,false]");

159 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
js⁄
), 
°rù≥d
);

162 #ifde‡
JSON_VALIDATE


163 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Validator");

164 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("[true,false] ")));

165 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":\"world\"}")));

167 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":null}")));

168 #ifde‡
JSON_STRICT


169 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":}")));

170 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":, \"hi\" : \"Mars\"}")));

172 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":}")));

173 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":, \"hi\" : \"Mars\"}")));

175 
	`as£πTrue
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":null, \"hi\" : \"Mars\"}")));

177 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("{\"hello\":\"world\"")));

178 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("\"hello\":\"world\"")));

179 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("true,false]")));

180 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("[true,false")));

181 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("hello")));

182 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("")));

183 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
(" {\"hello\":world\"}")));

185 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("[\"hello\"\"world\"]")));

186 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("{\"hello\"\"world\", \"hi\":\"mars\"}")));

187 
	`as£πFÆ£
(
libjs⁄
::
	`is_vÆid
(
	`JSON_TEXT
("[\"hello\":\"world\"]")));

190 
JSONNode
 
ã°î
;

192 #ifde‡
JSON_READ_PRIORITY


193 
UnôTe°
::
	`SëPªfix
("TestNamespace.cpp - Parse");

194 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("\r\n{\"hello\":\"world\"}"));

195 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_NODE
);

196 #ifde‡
JSON_UNIT_TEST


197 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

198 
	`as£πFÆ£
(
ã°î
.
öã∫Æ
 -> 
„tched
);

199 
ã°î
.
	`¥ï¨£
();

200 
	`as£πTrue
(
ã°î
.
öã∫Æ
 -> 
„tched
);

201 
	`as£πTrue
(
ã°î
[0].
öã∫Æ
 -> 
„tched
);

204 
	`as£πEquÆs
(
ã°î
.
	`size
(), 1);

205 
	`as£πEquÆs
(
ã°î
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

206 
	`as£πEquÆs
(
ã°î
[0], 
	`JSON_TEXT
("world"));

207 #ifde‡
JSON_UNIT_TEST


208 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

209 
	`as£πTrue
(
ã°î
.
öã∫Æ
 -> 
„tched
);

212 #ifde‡
JSON_SAFE


213 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("{\"hñlo\":\"w‹ld\"")), 
°d
::
övÆid_¨gumít
);

215 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("\"hñlo\":\"w‹ld\"")), 
°d
::
övÆid_¨gumít
);

216 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
(" [true, false]\r\n"));

217 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_ARRAY
);

218 #ifde‡
JSON_UNIT_TEST


219 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

220 
	`as£πFÆ£
(
ã°î
.
öã∫Æ
 -> 
„tched
);

223 
	`as£πEquÆs
(
ã°î
.
	`size
(), 2);

224 #ifde‡
JSON_UNIT_TEST


225 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

226 
	`as£πTrue
(
ã°î
.
öã∫Æ
 -> 
„tched
);

229 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("åue,Ál£]")), 
°d
::
övÆid_¨gumít
);

230 #ifde‡
JSON_SAFE


231 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("[åue,Ál£")), 
°d
::
övÆid_¨gumít
);

233 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("hñlo")), 
°d
::
övÆid_¨gumít
);

234 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("")), 
°d
::
övÆid_¨gumít
);

235 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°î
);

237 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
(" [\"hello\", \"world\", \"mars\"]\r\n"));

238 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_ARRAY
);

239 
	`as£πEquÆs
(
ã°î
.
	`size
(), 3);

240 
	`as£πEquÆs
(
ã°î
[0], 
	`JSON_TEXT
("hello"));

241 
	`as£πEquÆs
(
ã°î
[1], 
	`JSON_TEXT
("world"));

242 
	`as£πEquÆs
(
ã°î
[2], 
	`JSON_TEXT
("mars"));

243 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°î
);

245 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("{\"\":{},\"\":2}"));

246 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_NODE
);

247 
	`as£πEquÆs
(
ã°î
.
	`size
(), 2);

248 
	`as£πEquÆs
(
ã°î
[0].
	`ty≥
(), 
JSON_NODE
);

249 
	`as£πTrue
(
ã°î
[0].
	`em±y
());

250 
	`as£πEquÆs
(
ã°î
[1].
	`ty≥
(), 
JSON_NUMBER
);

251 
	`as£πEquÆs
(
ã°î
[1], 2);

252 
	`as£πEquÆs
(
ã°î
, 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("{\"\":{},\"\":2}")));

253 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°î
);

255 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("\r\n{\"hello\":\"world\", \"hi\":\"mars\"}"));

256 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_NODE
);

257 #ifde‡
JSON_UNIT_TEST


258 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

259 
	`as£πFÆ£
(
ã°î
.
öã∫Æ
 -> 
„tched
);

262 
	`as£πEquÆs
(
ã°î
.
	`size
(), 2);

263 
	`as£πEquÆs
(
ã°î
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

264 
	`as£πEquÆs
(
ã°î
[0], 
	`JSON_TEXT
("world"));

265 
	`as£πEquÆs
(
ã°î
[1].
	`«me
(), 
	`JSON_TEXT
("hi"));

266 
	`as£πEquÆs
(
ã°î
[1], 
	`JSON_TEXT
("mars"));

267 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°î
);

269 
ã°î
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("\r\n{\"hello\":\"world\", \"hi\":\"mars\", \"and\":\"pluto\"}"));

270 
	`as£πEquÆs
(
ã°î
.
	`ty≥
(), 
JSON_NODE
);

271 #ifde‡
JSON_UNIT_TEST


272 #i‡!
	`deföed
(
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

273 
	`as£πFÆ£
(
ã°î
.
öã∫Æ
 -> 
„tched
);

276 
	`as£πEquÆs
(
ã°î
.
	`size
(), 3);

277 
	`as£πEquÆs
(
ã°î
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

278 
	`as£πEquÆs
(
ã°î
[0], 
	`JSON_TEXT
("world"));

279 
	`as£πEquÆs
(
ã°î
[1].
	`«me
(), 
	`JSON_TEXT
("hi"));

280 
	`as£πEquÆs
(
ã°î
[1], 
	`JSON_TEXT
("mars"));

281 
	`as£πEquÆs
(
ã°î
[2].
	`«me
(), 
	`JSON_TEXT
("and"));

282 
	`as£πEquÆs
(
ã°î
[2], 
	`JSON_TEXT
("pluto"));

283 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°î
);

285 #ifde‡
JSON_SAFE


286 
	`as£πEx˚±i⁄
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("[{\"a\":\"b\",\"c\":{\"d\":\"e\",\"f\":\"g\",\"e\":\"‡")), 
°d
::
övÆid_¨gumít
);

290 
	}
}

	@libjson/_internal/TestSuite/TestRefCounting.cpp

1 
	~"Te°Suôe.h
"

3 
	gTe°Suôe
::
	$Te°Re„ªn˚Cou¡ög
(){

4 
UnôTe°
::
	`SëPªfix
("TestRefCounting.cpp - Reference Counting");

5 #ifde‡
JSON_LIBRARY


7 
JSONNode
 
ã°1
;

8 #ifde‡
JSON_UNIT_TEST


9 
	`as£πNŸNuŒ
(
ã°1
.
öã∫Æ
);

10 #ifde‡
JSON_REF_COUNT


11 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 1);

16 
JSONNode
 
ã°2
 = 
	`JSONNode
(
ã°1
);

17 #ifde‡
JSON_REF_COUNT


18 #ifde‡
JSON_UNIT_TEST


19 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

21 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

22 #ifde‡
JSON_UNIT_TEST


23 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 2);

26 #ifde‡
JSON_UNIT_TEST


27 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

29 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

33 
JSONNode
 
ã°3
 = 
ã°2
;

34 #ifde‡
JSON_UNIT_TEST


35 #ifde‡
JSON_REF_COUNT


36 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°3
.internal);

37 
	`as£πEquÆs
(
ã°2
.
öã∫Æ
, 
ã°3
.internal);

38 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 3);

40 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°3
.internal);

41 
	`as£πNŸEquÆs
(
ã°2
.
öã∫Æ
, 
ã°3
.internal);

46 
ã°2
 = "hello";

47 #ifde‡
JSON_UNIT_TEST


48 #ifde‡
JSON_REF_COUNT


49 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°3
.internal);

50 
	`as£πNŸEquÆs
(
ã°2
.
öã∫Æ
, 
ã°3
.internal);

51 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 2);

52 
	`as£πEquÆs
(
ã°2
.
öã∫Æ
 -> 
ªfcou¡
, 1);

54 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°3
.internal);

55 
	`as£πNŸEquÆs
(
ã°2
.
öã∫Æ
, 
ã°3
.internal);

60 
ã°1
 = 15;

61 #ifde‡
JSON_UNIT_TEST


62 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°3
.internal);

63 #ifde‡
JSON_REF_COUNT


64 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 1);

65 
	`as£πEquÆs
(
ã°3
.
öã∫Æ
 -> 
ªfcou¡
, 1);

69 
ã°1
 = 
ã°2
;

70 #ifde‡
JSON_REF_COUNT


71 #ifde‡
JSON_UNIT_TEST


72 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

73 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 2);

76 #ifde‡
JSON_UNIT_TEST


77 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

79 
	`as£πEquÆs
(
ã°1
, 
ã°2
);

82 
ã°1
.
	`£t_«me
(
	`JSON_TEXT
("hello world"));

83 #ifde‡
JSON_UNIT_TEST


84 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

85 #ifde‡
JSON_REF_COUNT


86 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 1);

87 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 1);

92 
UnôTe°
::
	`SëPªfix
("TestRefCounting.cpp - Partial Copy");

93 
ã°1
 = 
	`JSONNode
(
JSON_NODE
);

94 
ã°1
.
	`push_back
(
	`JSONNode
(
JSON_NODE
));

95 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 5));

96 
	`as£πEquÆs
(
ã°1
.
	`size
(), 2);

97 
ã°2
 = 
ã°1
;

98 #ifde‡
JSON_UNIT_TEST


99 #ifde‡
JSON_REF_COUNT


100 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
 -> 
ªfcou¡
, 2);

101 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

103 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

106 #ifde‡
JSON_READ_PRIORITY


107 
	`as£πEquÆs
(
ã°1
, 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("{\"\":{},\"\":5}")));

108 
	`as£πEquÆs
(
ã°1
,Åest1);

109 
	`as£πEquÆs
(
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("{\"\":{},\"\":5}")),Üibjson::parse(JSON_TEXT("{\"\":{},\"\":5}")));

110 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

113 
ã°2
[1] = 15;

114 
	`as£πEquÆs
(
ã°1
[1], 5);

115 
	`as£πEquÆs
(
ã°2
[1], 15);

116 
ã°1
 = 
ã°2
;

117 #ifde‡
JSON_UNIT_TEST


118 #ifde‡
JSON_REF_COUNT


119 
	`as£πEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

121 
	`as£πNŸEquÆs
(
ã°1
.
öã∫Æ
, 
ã°2
.internal);

124 
ã°1
[0].
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 1));

125 
ã°1
[0].
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
(""), 2));

126 
	`as£πEquÆs
(
ã°1
[0].
	`size
(), 2);

127 
	`as£πEquÆs
(
ã°2
[0].
	`size
(), 0);

128 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°1
);

129 
Te°Suôe
::
	`ã°P¨sögIt£lf
(
ã°2
);

131 
	}
}

	@libjson/_internal/TestSuite/TestSharedString.cpp

2 
	~"Te°Suôe.h
"

3 
	~"../Sour˚/JSONSh¨edSåög.h
"

5 
	gTe°Suôe
::
	$Te°Sh¨edSåög
(){

6 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Seeing how muchÑegular strings share");

7 
js⁄_°rög
 
sh¨ey
 = 
	`JSON_TEXT
("Hello world");

8 
js⁄_°rög
 
sh¨ey2
 = 
sh¨ey
;

9 i‡(
sh¨ey2
.
	`d©a
(Ë=
sh¨ey
.d©a()Ë
	`echo
("Assignment shares data");

10 
sh¨ey2
 = 
	`js⁄_°rög
(
sh¨ey
);

11 i‡(
sh¨ey2
.
	`d©a
(Ë=
sh¨ey
.d©a()Ë
	`echo
("Copy ctor shares data");

12 
sh¨ey2
 = 
	`js⁄_°rög
(
sh¨ey
.
	`begö
(), sh¨ey.
	`íd
());

13 i‡(
sh¨ey2
.
	`d©a
(Ë=
sh¨ey
.d©a()Ë
	`echo
("Copy with iterators shares data");

14 
sh¨ey2
 = 
sh¨ey
.
	`sub°r
(0);

15 i‡(
sh¨ey2
.
	`d©a
(Ë=
sh¨ey
.d©a()Ë
	`echo
("substr shares data");

17 
js⁄_°rög
 
vÆue
 = 
	`JSON_TEXT
("Hello, Iámá string withÜots of words");

18 
js⁄_sh¨ed_°rög
 
sh¨ed
 = 
	`js⁄_sh¨ed_°rög
(
vÆue
);

20 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Whole String");

22 
	`as£πEquÆs
(
vÆue
.
	`Àngth
(), 
sh¨ed
.length());

23 
	`as£πEquÆs
(
vÆue
, 
	`js⁄_°rög
(
sh¨ed
.
	`°d_begö
(), sh¨ed.
	`°d_íd
()));

24 #ifde‡
JSON_UNIT_TEST


25 
	`as£πEquÆs
(1, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

28 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Substring");

30 
js⁄_sh¨ed_°rög
 
hñlo
 = 
	`js⁄_sh¨ed_°rög
(
sh¨ed
, 0, 5);

31 
js⁄_°rög
 
shñlo
 = 
vÆue
.
	`sub°r
(0, 5);

32 #ifde‡
JSON_UNIT_TEST


33 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
hñlo
._str);

34 
	`as£πEquÆs
(2, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

36 
	`as£πEquÆs
(
shñlo
, 
	`js⁄_°rög
(
hñlo
.
	`°d_begö
(), hñlo.
	`°d_íd
()));

38 #ifde‡
JSON_UNIT_TEST


39 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
hñlo
._str);

40 
	`as£πEquÆs
(2, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

43 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - SubstringÅo String");

45 
	`as£πEquÆs
(
	`js⁄_°rög
(
	`JSON_TEXT
("Hñlo")), 
hñlo
.
	`toSåög
());

46 #ifde‡
JSON_UNIT_TEST


47 
	`as£πNŸEquÆs
(
sh¨ed
.
_°r
, 
hñlo
._str);

48 
	`as£πEquÆs
(1, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

49 
	`as£πEquÆs
(1, 
hñlo
.
_°r
 -> 
ªfCou¡
);

52 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Substring of substring offset zero");

53 
js⁄_sh¨ed_°rög
 
ª°
 = 
	`js⁄_sh¨ed_°rög
(
sh¨ed
, 7);

54 
js⁄_°rög
 
§e°
 = 
vÆue
.
	`sub°r
(7);

55 #ifde‡
JSON_UNIT_TEST


56 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
ª°
._str);

57 
	`as£πEquÆs
(7,
ª°
.
off£t
);

58 
	`as£πEquÆs
(2, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

60 
	`as£πEquÆs
(
§e°
, 
	`js⁄_°rög
(
ª°
.
	`°d_begö
(),Ñe°.
	`°d_íd
()));

61 #ifde‡
JSON_UNIT_TEST


62 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
ª°
._str);

63 
	`as£πEquÆs
(2, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

66 
js⁄_sh¨ed_°rög
 
I_am_a_°rög
 = 
	`js⁄_sh¨ed_°rög
(
ª°
, 0, 13);

67 
js⁄_°rög
 
sI_am_a_°rög
 = 
§e°
.
	`sub°r
(0, 13);

68 #ifde‡
JSON_UNIT_TEST


69 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
I_am_a_°rög
._str);

70 
	`as£πEquÆs
(7,
ª°
.
off£t
);

71 
	`as£πEquÆs
(3, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

73 
	`as£πEquÆs
(
sI_am_a_°rög
, 
	`js⁄_°rög
(
I_am_a_°rög
.
	`°d_begö
(), I_am_a_°rög.
	`°d_íd
()));

74 
	`as£πEquÆs
(
§e°
, 
	`js⁄_°rög
(
ª°
.
	`°d_begö
(),Ñe°.
	`°d_íd
()));

75 #ifde‡
JSON_UNIT_TEST


76 
	`as£πEquÆs
(
sh¨ed
.
_°r
, 
I_am_a_°rög
._str);

77 
	`as£πEquÆs
(3, 
sh¨ed
.
_°r
 -> 
ªfCou¡
);

81 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Finding Ref 1");

82 
	`as£πEquÆs
(0, 
hñlo
.
	`föd
(
	`JSON_TEXT
('H')));

83 
	`as£πEquÆs
(
shñlo
.
	`föd
(
	`JSON_TEXT
('H')), 
hñlo
.find(JSON_TEXT('H')));

84 
	`as£πEquÆs
(4, 
hñlo
.
	`föd
(
	`JSON_TEXT
('o')));

85 
	`as£πEquÆs
(
shñlo
.
	`föd
(
	`JSON_TEXT
('o')), 
hñlo
.find(JSON_TEXT('o')));

86 
	`as£πEquÆs
(
js⁄_°rög
::
≈os
, 
hñlo
.
	`föd
(
	`JSON_TEXT
('z')));

87 
	`as£πEquÆs
(
shñlo
.
	`föd
(
	`JSON_TEXT
('z')), 
hñlo
.find(JSON_TEXT('z')));

89 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Finding Shared");

90 
	`as£πEquÆs
(0, 
I_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('I')));

91 
	`as£πEquÆs
(
sI_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('I')), 
I_am_a_°rög
.find(JSON_TEXT('I')));

92 
	`as£πEquÆs
(7, 
I_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('s')));

93 
	`as£πEquÆs
(
sI_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('s')), 
I_am_a_°rög
.find(JSON_TEXT('s')));

94 
	`as£πEquÆs
(
js⁄_°rög
::
≈os
, 
I_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('z')));

95 
	`as£πEquÆs
(
sI_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('z')), 
I_am_a_°rög
.find(JSON_TEXT('z')));

97 
	`as£πEquÆs
(
js⁄_°rög
::
≈os
, 
I_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('w')));

98 
	`as£πEquÆs
(
sI_am_a_°rög
.
	`föd
(
	`JSON_TEXT
('w')), 
I_am_a_°rög
.find(JSON_TEXT('w')));

100 
UnôTe°
::
	`SëPªfix
("TestSharedString.cpp - Iterator substrings");

101 
js⁄_°rög
 
bœh
 = 
	`JSON_TEXT
("hello world");

102 
js⁄_sh¨ed_°rög
 
	`bœhs
(
bœh
);

103 #ifde‡
JSON_UNIT_TEST


104 
	`as£πEquÆs
(
bœhs
.
_°r
 -> 
ªfCou¡
, 1);

106 
js⁄_°rög
 
sub
 = 
	`js⁄_°rög
(
bœh
.
	`begö
(), bœh.
	`íd
());

107 
js⁄_sh¨ed_°rög
 
subs
 = 
	`js⁄_sh¨ed_°rög
(
bœhs
.
	`begö
(), bœhs.
	`íd
());

108 #ifde‡
JSON_UNIT_TEST


109 
	`as£πEquÆs
(
bœhs
.
_°r
, 
subs
._str);

110 
	`as£πEquÆs
(
bœhs
.
_°r
 -> 
ªfCou¡
, 2);

112 
	`as£πEquÆs
(
bœh
, 
bœhs
.
	`toSåög
());

113 
	`as£πEquÆs
(
sub
, 
subs
.
	`toSåög
());

114 
	`as£πEquÆs
(
sub
.
	`Àngth
(), 
subs
.length());

115 
sub
 = 
	`js⁄_°rög
(
bœh
.
	`begö
(), blah.begin() + 5);

116 
subs
 = 
	`js⁄_sh¨ed_°rög
(
bœhs
.
	`begö
(), blahs.begin() + 5);

117 #ifde‡
JSON_UNIT_TEST


118 
	`as£πEquÆs
(
bœhs
.
_°r
, 
subs
._str);

119 
	`as£πEquÆs
(
bœhs
.
_°r
 -> 
ªfCou¡
, 2);

121 
	`as£πEquÆs
(
bœh
, 
bœhs
.
	`toSåög
());

122 
	`as£πEquÆs
(
sub
, 
subs
.
	`toSåög
());

123 
	`as£πEquÆs
(
sub
.
	`Àngth
(), 
subs
.length());

124 
	}
}

	@libjson/_internal/TestSuite/TestStreams.cpp

1 
	~"Te°Suôe.h
"

3 #ifde‡
JSON_STREAM


4 
	gcou¡î
 = 0;

5 
	gîr‹Cou¡î
 = 0;

7 
îr‹CÆlback
(*);

8 
	$îr‹CÆlback
(*){

9 ++
îr‹Cou¡î
;

10 
	}
}

12 #ifde‡
JSON_LIBRARY


13 
CÆlback
(
JSONNODE
 * 
ã°
, *);

14 
	$CÆlback
(
JSONNODE
 * 
ã°
, *){

15 ++
cou¡î
;

16 
cou¡î
){

18 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

19 
	`as£πTrue
(
	`js⁄_em±y
(
ã°
));

22 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_ARRAY
);

23 
	`as£πTrue
(
	`js⁄_em±y
(
ã°
));

26 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

27 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

28 
js⁄_ch¨
 * 
ãmp
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

29 
	`as£πCSåögSame
(
ãmp
, 
	`JSON_TEXT
("hello"));

30 
	`js⁄_‰ì
(
ãmp
);

31 
	`as£πEquÆs
(
	`js⁄_as_öt
(
	`js⁄_©
(
ã°
, 0)), 1);

34 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_ARRAY
);

35 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 3);

38 
	`as£πEquÆs
(
	`js⁄_ty≥
(
ã°
), 
JSON_NODE
);

39 
	`as£πEquÆs
(
	`js⁄_size
(
ã°
), 1);

40 
js⁄_ch¨
 * 
ãmp
 = 
	`js⁄_«me
(
	`js⁄_©
(
ã°
, 0));

41 
	`as£πCSåögSame
(
ãmp
, 
	`JSON_TEXT
("hi"));

42 
	`js⁄_‰ì
(
ãmp
);

43 
	`as£πEquÆs
(
	`js⁄_size
(
	`js⁄_©
(
ã°
, 0)), 1);

44 
	`as£πEquÆs
(
	`js⁄_ty≥
(
	`js⁄_©
(js⁄_©(
ã°
, 0),0)), 
JSON_NUMBER
);

45 
ãmp
 = 
	`js⁄_«me
(
	`js⁄_©
(js⁄_©(
ã°
, 0),0));

46 
	`as£πCSåögSame
(
ãmp
, 
	`JSON_TEXT
("one"));

47 
	`js⁄_‰ì
(
ãmp
);

48 
	`as£πEquÆs
(
	`js⁄_as_öt
(
	`js⁄_©
(js⁄_©(
ã°
, 0),0)), 1);

51 
	}
}

53 
CÆlback
(
JSONNode
 & 
ã°
, * 
ide
);

54 
	$CÆlback
(
JSONNode
 & 
ã°
, * 
ide
){

55 
	`as£πEquÆs
(
ide
, (*)0xDEADBEEF);

56 ++
cou¡î
;

57 
cou¡î
){

59 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

60 
	`as£πTrue
(
ã°
.
	`em±y
());

63 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_ARRAY
);

64 
	`as£πTrue
(
ã°
.
	`em±y
());

67 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

68 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

69 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hello"));

70 
	`as£πEquÆs
(
ã°
[0].
	`as_öt
(), 1);

73 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_ARRAY
);

74 
	`as£πEquÆs
(
ã°
.
	`size
(), 3);

77 
	`as£πEquÆs
(
ã°
.
	`ty≥
(), 
JSON_NODE
);

78 
	`as£πEquÆs
(
ã°
.
	`size
(), 1);

79 
	`as£πEquÆs
(
ã°
[0].
	`«me
(), 
	`JSON_TEXT
("hi"));

80 
	`as£πEquÆs
(
ã°
[0].
	`size
(), 1)

81 
	`as£πEquÆs
(
ã°
[0][0].
	`ty≥
(), 
JSON_NUMBER
);

82 
	`as£πEquÆs
(
ã°
[0][0].
	`«me
(), 
	`JSON_TEXT
("one"));

83 
	`as£πEquÆs
(
ã°
[0][0].
	`as_öt
(), 1);

86 
	}
}

91 
	gTe°Suôe
::
	$Te°Såóms
(){

92 #ifde‡
JSON_STREAM


93 
UnôTe°
::
	`SëPªfix
("TestStreams.cpp - Streams");

94 
cou¡î
 = 0;

95 
îr‹Cou¡î
 = 0;

97 #ifde‡
JSON_LIBRARY


98 
JSONSTREAM
 * 
ã°
 = 
	`js⁄_√w_°ªam
(
CÆlback
, 
îr‹CÆlback
, (*)0xDEADBEEF);

99 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("{}[]"));

100 
	`as£πEquÆs
(2, 
cou¡î
);

101 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

102 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("{\"hel"));

103 
	`as£πEquÆs
(2, 
cou¡î
);

104 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

105 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("lo\" : 1"));

106 
	`as£πEquÆs
(2, 
cou¡î
);

107 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

108 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("}["));

109 
	`as£πEquÆs
(3, 
cou¡î
);

110 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

111 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("1,2,3]{\"hi\" : { \"one\" : 1}"));

112 
	`as£πEquÆs
(4, 
cou¡î
);

113 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

114 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("}"));

115 
	`as£πEquÆs
(5, 
cou¡î
);

116 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

118 #ifde‡
JSON_SAFE


119 
	`js⁄_°ªam_push
(
ã°
, 
	`JSON_TEXT
("{\"hello\":12keaueuataueaouhe"));

120 
	`as£πEquÆs
(1, 
îr‹Cou¡î
);

122 
	`js⁄_dñëe_°ªam
(
ã°
);

124 
JSONSåóm
 
	`ã°
(
CÆlback
, 
îr‹CÆlback
, (*)0xDEADBEEF);

125 
ã°
 << 
	`JSON_TEXT
("{}[]");

126 
	`as£πEquÆs
(2, 
cou¡î
);

127 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

128 
ã°
 << 
	`JSON_TEXT
("{\"hel");

129 
	`as£πEquÆs
(2, 
cou¡î
);

130 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

131 
ã°
 << 
	`JSON_TEXT
("lo\" : 1");

132 
	`as£πEquÆs
(2, 
cou¡î
);

133 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

134 
ã°
 << 
	`JSON_TEXT
("}[");

135 
	`as£πEquÆs
(3, 
cou¡î
);

136 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

137 
ã°
 << 
	`JSON_TEXT
("1,2,3]{\"hi\" : { \"one\" : 1}");

138 
	`as£πEquÆs
(4, 
cou¡î
);

139 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

140 
ã°
 << 
	`JSON_TEXT
("}");

141 
	`as£πEquÆs
(5, 
cou¡î
);

142 
	`as£πEquÆs
(0, 
îr‹Cou¡î
);

144 #ifde‡
JSON_SAFE


145 
ã°
 << 
	`JSON_TEXT
("{\"hello\":12keaueuataueaouhe");

146 
	`as£πEquÆs
(1, 
îr‹Cou¡î
);

149 #ifde‡
JSON_SECURITY_MAX_STREAM_OBJECTS


150 
ã°
.
	`ª£t
();

151 
cuºítCou¡
 = 
îr‹Cou¡î
;

152 
js⁄_°rög
 
ß„
;

153 
i
 = 0; i < 
JSON_SECURITY_MAX_STREAM_OBJECTS
; ++i){

154 
ß„
 +
	`JSON_TEXT
("{}");

156 
ã°
 << 
ß„
;

157 
	`as£πEquÆs
(133, 
cou¡î
);

158 
	`as£πEquÆs
(
cuºítCou¡
, 
îr‹Cou¡î
);

160 
ã°
.
	`ª£t
();

161 
js⁄_°rög
 
unß„
;

162 
i
 = 0; i <
JSON_SECURITY_MAX_STREAM_OBJECTS
 + 1; ++i){

163 
unß„
 +
	`JSON_TEXT
("{}");

165 
ã°
 << 
unß„
;

166 
	`as£πEquÆs
(261, 
cou¡î
);

167 
	`as£πEquÆs
(
cuºítCou¡
 + 1, 
îr‹Cou¡î
);

171 
	}
}

	@libjson/_internal/TestSuite/TestString.cpp

1 
	~"Te°Suôe.h
"

3 #ifde‡
JSON_STRING_HEADER


4 #ifde‡
JSON_UNICODE


5 
	~"USåögTe°.h
"

7 
	~"SåögTe°.h
"

11 
	~"../../libjs⁄.h
"

14 
	$as£πC⁄°Em±y
(c⁄° 
js⁄_°rög
 & 
s
){

15 
	`as£πEquÆs
(
s
.
	`Àngth
(), 0);

16 
	`as£πTrue
(
s
.
	`em±y
());

17 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
	`JSON_TEXT
(""));

18 
	`as£πEquÆs
(
s
, s);

19 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
(""));

20 
	}
}

22 
	$as£πEm±y
(
js⁄_°rög
 & 
s
){

23 
	`as£πEquÆs
(
s
.
	`Àngth
(), 0);

24 
	`as£πTrue
(
s
.
	`em±y
());

25 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
	`JSON_TEXT
(""));

26 
	`as£πEquÆs
(
s
, s);

27 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
(""));

28 
	`as£πC⁄°Em±y
(
s
);

29 
	}
}

31 
	$as£πSame
(
js⁄_°rög
 & 
s
, js⁄_°rög & 
m
){

32 
	`as£πEquÆs
(
s
, 
m
);

33 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
m
.c_str());

34 
	`as£πEquÆs
(
s
.
	`Àngth
(), 
m
.length());

35 
s
.
	`sw≠
(
m
);

36 
	`as£πEquÆs
(
s
, 
m
);

37 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
m
.c_str());

38 
	`as£πEquÆs
(
s
.
	`Àngth
(), 
m
.length());

39 
	}
}

41 
	$as£πDif„ª¡
(
js⁄_°rög
 & 
s
, js⁄_°rög & 
m
){

42 
	`as£πNŸEquÆs
(
s
, 
m
);

43 
	`as£πCSåögNŸSame
(
s
.
	`c_°r
(), 
m
.c_str());

44 
	}
}

46 
	gTe°Suôe
::
	$Te°Såög
(){

47 
UnôTe°
::
	`SëPªfix
("TestString.cpp - Test String Class");

49 
js⁄_°rög
 
s
;

50 
	`as£πEm±y
(
s
);

54 
js⁄_°rög
 
s
;

55 
	`as£πEm±y
(
s
);

56 
js⁄_°rög
 
	`m
(
s
);

57 
	`as£πEm±y
(
m
);

58 
	`as£πEm±y
(
s
);

59 
	`as£πSame
(
s
, 
m
);

63 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

64 
	`as£πEquÆs
(
s
.
	`Àngth
(), 5);

65 
	`as£πFÆ£
(
s
.
	`em±y
());

66 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
	`JSON_TEXT
("hello"));

67 
	`as£πEquÆs
(
s
, s);

68 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("hello"));

69 
s
.
	`˛ór
();

70 
	`as£πEm±y
(
s
);

74 
js⁄_°rög
 
	`s
(5, 'h');

75 
	`as£πEquÆs
(
s
.
	`Àngth
(), 5);

76 
	`as£πFÆ£
(
s
.
	`em±y
());

77 
	`as£πCSåögSame
(
s
.
	`c_°r
(), 
	`JSON_TEXT
("hhhhh"));

78 
	`as£πEquÆs
(
s
, s);

79 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("hhhhh"));

80 
s
.
	`˛ór
();

81 
	`as£πEm±y
(
s
);

85 
js⁄_°rög
 
	`s
(5, 'h');

86 
js⁄_°rög
 
	`m
(
s
);

87 
	`as£πSame
(
s
, 
m
);

91 
js⁄_°rög
 
	`s
(5, 'h');

92 
js⁄_°rög
 
	`m
(
s
);

93 
	`as£πSame
(
s
, 
m
);

94 
s
.
	`˛ór
();

95 
	`as£πEm±y
(
s
);

96 
	`as£πEquÆs
(
s
.
	`Àngth
(), 0);

97 
	`as£πDif„ª¡
(
s
, 
m
);

102 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

103 
js⁄_°rög
 
m
 = 
s
;

104 
	`as£πSame
(
s
, 
m
);

105 
m
 = 
s
.
	`sub°r
(1, 3);

106 
	`as£πEquÆs
(
m
.
	`Àngth
(), 3);

107 
	`as£πEquÆs
(
m
, 
	`JSON_TEXT
("ell"));

111 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

112 
js⁄_°rög
 
m
 = 
s
;

113 
	`as£πSame
(
s
, 
m
);

114 
m
 = 
s
.
	`sub°r
(1);

115 
	`as£πEquÆs
(
m
.
	`Àngth
(), 4);

116 
	`as£πEquÆs
(
m
, 
	`JSON_TEXT
("ello"));

120 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

121 
s
 +
	`JSON_TEXT
(" world");

122 
	`as£πEquÆs
(
s
.
	`Àngth
(), 11);

123 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("hello world"));

128 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

129 
js⁄_°rög
 
m
 = 
s
 + 
	`JSON_TEXT
(" world ") + s;

130 
	`as£πEquÆs
(
m
.
	`Àngth
(), 17);

131 
	`as£πEquÆs
(
m
, 
	`JSON_TEXT
("hello world hello"));

135 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello"));

136 
s
 += 'a';

137 
s
 += 'a';

138 
s
 += 'a';

139 
s
 += 'a';

140 
	`as£πEquÆs
(
s
.
	`Àngth
(), 9);

141 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("helloaaaa"));

145 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

146 
size_t
 
pos
 = 
s
.
	`föd
('w');

147 
	`as£πEquÆs
(
pos
, 6);

151 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

152 
size_t
 
pos
 = 
s
.
	`föd
('z');

153 
	`as£πEquÆs
(
pos
, 
js⁄_°rög
::
≈os
);

157 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

158 
size_t
 
pos
 = 
s
.
	`föd_fú°_nŸ_of
(
	`JSON_TEXT
("helo"));

159 
	`as£πEquÆs
(
pos
, 5);

163 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

164 
size_t
 
pos
 = 
s
.
	`föd_fú°_of
(
	`JSON_TEXT
("ol"));

165 
	`as£πEquÆs
(
pos
, 2);

169 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

170 
s
.
	`îa£
(s.
	`begö
(), s.begin() + 3);

171 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("lo world"));

175 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"), 5);

176 
	`as£πEquÆs
(
s
, 
	`JSON_TEXT
("hello"));

179 #i‚de‡
JSON_LIBRARY


180 #i‚de‡
JSON_STRING_HEADER


182 
js⁄_°rög
 
	`s
(
	`JSON_TEXT
("hello world"));

183 
°d
::
w°rög
 
	`wã°
(
L
"hello world");

184 
°d
::
°rög
 
	`°e°
("hello world");

185 
	`as£πEquÆs
(
libjs⁄
::
	`to_°d_°rög
(
s
), 
°e°
);

186 
	`as£πEquÆs
(
°e°
, 
libjs⁄
::
	`to_°d_°rög
(
s
));

187 
	`as£πEquÆs
(
libjs⁄
::
	`to_°d_w°rög
(
s
), 
wã°
);

188 
	`as£πEquÆs
(
wã°
, 
libjs⁄
::
	`to_°d_w°rög
(
s
));

190 
	`as£πEquÆs
(
s
, 
libjs⁄
::
	`to_js⁄_°rög
(
°e°
));

191 
	`as£πEquÆs
(
libjs⁄
::
	`to_js⁄_°rög
(
°e°
), 
s
);

192 
	`as£πEquÆs
(
s
, 
libjs⁄
::
	`to_js⁄_°rög
(
wã°
));

193 
	`as£πEquÆs
(
libjs⁄
::
	`to_js⁄_°rög
(
wã°
), 
s
);

197 
	}
}

	@libjson/_internal/TestSuite/TestSuite.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONNode.h
"

4 #i‚de‡
JSON_STDERROR


5 #ifde‡
JSON_DEBUG


6 #ifde‡
JSON_LIBRARY


7 
	$ˇŒback
(c⁄° 
js⁄_ch¨
 * 
msg_c
){

8 
js⁄_°rög
 
	`msg
(
msg_c
);

10 
	$ˇŒback
(c⁄° 
js⁄_°rög
 & 
msg
){

12 #ifde‡
JSON_STRING_HEADER


13 
	`echo
("callbackÅriggered, but can't display string");

15 #ifde‡
JSON_UNICODE


16 c⁄° 
°d
::
°rög
 
ªs
 = std::
	`°rög
(
msg
.
	`begö
(), msg.
	`íd
());

17 
	`echo
(
ªs
);

19 
	`echo
(
msg
);

22 
	}
}

26 
	gTe°Suôe
::
	$Te°Sñf
(){

27 
UnôTe°
::
	`SëPªfix
("TestSuite.cpp - Self Test");

28 #i‚de‡
JSON_STDERROR


29 #ifde‡
JSON_DEBUG


30 #ifde‡
JSON_LIBRARY


31 
	`js⁄_ªgi°î_debug_ˇŒback
(
ˇŒback
);

33 
libjs⁄
::
	`ªgi°î_debug_ˇŒback
(
ˇŒback
);

37 
	`as£πUnôTe°
();

39 #i‡
	`deföed
(
JSON_SAFE
Ë&& ! deföed(
JSON_LIBRARY
)

40 
boﬁ
 
ãmp
 = 
Ál£
;

41 
	`JSON_ASSERT_SAFE
(
åue
, 
	`JSON_TEXT
(""), 
ãmp
 =Årue;);

42 
	`as£πFÆ£
(
ãmp
);

43 
	`JSON_ASSERT_SAFE
(
Ál£
, 
	`JSON_TEXT
(""), 
ãmp
 = 
åue
;);

44 
	`as£πTrue
(
ãmp
);

46 
ãmp
 = 
Ál£
;

47 
	`JSON_FAIL_SAFE
(
	`JSON_TEXT
(""), 
ãmp
 = 
åue
;);

48 
	`as£πTrue
(
ãmp
);

51 
	`echo
("IfÅhis fails,ÅhenÉdit JSON_INDEX_TYPE in JSONOptions.h");

52 
	`as£πLessTh™EquÆTo
((
js⁄_ödex_t
), (*));

53 
	}
}

56 
	gTe°Suôe
::
	$Te°FöÆ
(){

57 #ifde‡
JSON_UNIT_TEST


58 
UnôTe°
::
	`SëPªfix
("TestSuite.cpp - Memory Leak");

59 
	`echo
("NodêÆloˇti⁄s: " << 
JSONNode
::
	`gëNodeAŒoˇti⁄Cou¡
());

60 
	`echo
("NodêdóŒoˇti⁄s: " << 
JSONNode
::
	`gëNodeDóŒoˇti⁄Cou¡
());

61 
	`as£πEquÆs
(
JSONNode
::
	`gëNodeAŒoˇti⁄Cou¡
(), JSONNode::
	`gëNodeDóŒoˇti⁄Cou¡
());

63 
	`echo
("öã∫ÆáŒoˇti⁄s: " << 
JSONNode
::
	`gëI¡î«lAŒoˇti⁄Cou¡
());

64 
	`echo
("öã∫Æ dóŒoˇti⁄s: " << 
JSONNode
::
	`gëI¡î«lDóŒoˇti⁄Cou¡
());

65 
	`as£πEquÆs
(
JSONNode
::
	`gëI¡î«lAŒoˇti⁄Cou¡
(), JSONNode::
	`gëI¡î«lDóŒoˇti⁄Cou¡
());

67 
	`echo
("chûdª¿Æloˇti⁄s: " << 
JSONNode
::
	`gëChûdªnAŒoˇti⁄Cou¡
());

68 
	`echo
("chûdª¿dóŒoˇti⁄s: " << 
JSONNode
::
	`gëChûdªnDóŒoˇti⁄Cou¡
());

69 
	`as£πEquÆs
(
JSONNode
::
	`gëChûdªnAŒoˇti⁄Cou¡
(), JSONNode::
	`gëChûdªnDóŒoˇti⁄Cou¡
());

71 #i‡
	`deföed
(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

72 
	`echo
("°»Æloˇti⁄s: " << 
JSONAŒoˇt‹Rñayî
::
	`gëAŒoˇti⁄Cou¡
());

73 
	`echo
("°»dóŒoˇti⁄s: " << 
JSONAŒoˇt‹Rñayî
::
	`gëDóŒoˇti⁄Cou¡
());

74 
	`echo
("°»byãs: " << 
JSONAŒoˇt‹Rñayî
::
	`gëAŒoˇti⁄ByãCou¡
());

75 
	`as£πEquÆs
(
JSONAŒoˇt‹Rñayî
::
	`gëAŒoˇti⁄Cou¡
(), JSONAŒoˇt‹Rñayî::
	`gëDóŒoˇti⁄Cou¡
());

78 
	}
}

	@libjson/_internal/TestSuite/TestSuite.h

1 #i‚de‡
TESTSUITE_H


2 
	#TESTSUITE_H


	)

4 
	~"UnôTe°.h
"

5 
	~"../../JSONO±i⁄s.h
"

6 
	~"../../libjs⁄.h
"

7 
	~"../Sour˚/JSONNode.h
"

9 
	~<io°ªam
>

10 
usög
 
«me•a˚
 
	g°d
;

17 #ifde‡
JSON_UNICODE


18 
	#as£πCSåögSame
(
a
, 
b
Ë
	`as£πCSåögEquÆsW
◊, b)

	)

19 
	#as£πCSåögNŸSame
(
a
, 
b
Ë
	`as£πCSåögNŸEquÆsW
◊, b)

	)

21 
	#as£πCSåögSame
(
a
, 
b
Ë
	`as£πCSåögEquÆs
◊, b)

	)

22 
	#as£πCSåögNŸSame
(
a
, 
b
Ë
	`as£πCSåögNŸEquÆs
◊, b)

	)

26 ˛as†
	cTe°Suôe
 {

27 
	mpublic
:

28 
Te°Sñf
();

29 
Te°Såög
();

30 
Te°C⁄vîãrs
();

31 #ifde‡
JSON_BINARY


32 
Te°Ba£64
();

34 
Te°Re„ªn˚Cou¡ög
();

35 
Te°C⁄°ru˘‹s
();

36 
Te°Assignög
();

37 
Te°EquÆôy
();

38 
Te°I√quÆôy
();

39 
Te°Chûdªn
();

40 
Te°Fun˘i⁄s
();

41 
Te°Iãøt‹s
();

42 
Te°In•e˘‹s
();

43 
Te°Name•a˚
();

44 
Te°VÆid©‹
();

45 
Te°Såóms
();

46 #ifde‡
JSON_WRITE_PRIORITY


47 
Te°Wrôî
();

49 #ifde‡
JSON_COMMENTS


50 
Te°Commíts
();

52 #ifde‡
JSON_MUTEX_CALLBACKS


53 
Te°Muãx
();

54 
Te°Thªadög
();

56 
Te°Sh¨edSåög
();

57 
Te°FöÆ
();

63 #ifde‡
JSON_LIBRARY


64 
	$ã°P¨sögIt£lf
(
JSONNODE
 * 
x
){

65 #i‡
	`deföed
(
JSON_WRITE_PRIORITY
Ë&& deföed(
JSON_READ_PRIORITY
)

67 
js⁄_ch¨
 * 
wrôãn
 = 
	`js⁄_wrôe
(
x
);

68 
JSONNODE
 * 
c›y
 = 
	`js⁄_∑r£
(
wrôãn
);

69 
	`as£πTrue
(
	`js⁄_equÆ
(
x
, 
c›y
));

70 
	`js⁄_dñëe
(
c›y
);

71 
	`js⁄_‰ì
(
wrôãn
);

74 
js⁄_ch¨
 * 
wrôãn
 = 
	`js⁄_wrôe_f‹m©ãd
(
x
);

75 
JSONNODE
 * 
c›y
 = 
	`js⁄_∑r£
(
wrôãn
);

76 
	`as£πTrue
(
	`js⁄_equÆ
(
x
, 
c›y
));

77 
	`js⁄_dñëe
(
c›y
);

78 
	`js⁄_‰ì
(
wrôãn
);

81 
js⁄_ch¨
 * 
wrôãn
 = 
	`js⁄_wrôe_f‹m©ãd
(
x
);

82 
js⁄_ch¨
 * 
wrôãn2
 = 
	`js⁄_wrôe
(
x
);

83 
js⁄_ch¨
 * 
°rù≥d
 = 
	`js⁄_°rù_whôe_•a˚
(
wrôãn
);

84 
	`as£πCSåögSame
(
wrôãn2
, 
°rù≥d
);

85 
	`js⁄_‰ì
(
°rù≥d
);

86 
	`js⁄_‰ì
(
wrôãn
);

87 
	`js⁄_‰ì
(
wrôãn2
);

91 
JSONNODE
 * 
c›y
 = 
	`js⁄_du∂iˇã
(
x
);

92 
	`as£πTrue
(
	`js⁄_equÆ
(
x
, 
c›y
));

93 
	`js⁄_dñëe
(
c›y
);

97 
	$ã°P¨sögIt£lf
(
JSONNode
 & 
x
){

98 #i‡
	`deföed
(
JSON_WRITE_PRIORITY
Ë&& deföed(
JSON_READ_PRIORITY
)

99 
	`as£πEquÆs
(
libjs⁄
::
	`∑r£
(
x
.
	`wrôe
()), x);

100 
	`as£πEquÆs
(
libjs⁄
::
	`∑r£
(
x
.
	`wrôe_f‹m©ãd
()), x);

101 
	`as£πEquÆs
(
libjs⁄
::
	`°rù_whôe_•a˚
(
x
.
	`wrôe_f‹m©ãd
()), x.
	`wrôe
());

103 
	`as£πEquÆs
(
x
, x.
	`du∂iˇã
())

104 
	}
}

	@libjson/_internal/TestSuite/TestValidator.cpp

1 
	~"Te°Suôe.h
"

2 
	~"../Sour˚/JSONVÆid©‹.h
"

5 
	#as£πVÆid
(
x
, 
mëhod
, 
√xtch¨
)\

7 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

8 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

9 
	`as£πTrue
(
JSONVÆid©‹
::
	`mëhod
(
±r
Ë&& (*±∏=
	`JSON_TEXT
(
√xtch¨
)));\

10 }

	)

12 
	#as£πNŸVÆid
(
x
, 
mëhod
, 
√xtch¨
)\

14 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

15 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

16 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`mëhod
(
±r
Ë&& (*±∏=
	`JSON_TEXT
(
√xtch¨
)));\

17 }

	)

19 #ifde‡
JSON_SECURITY_MAX_NEST_LEVEL


20 
	#as£πVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)\

22 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

23 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

24 
	`as£πTrue
(
JSONVÆid©‹
::
	`mëhod
(
±r
, 1));\

25 
	`as£πEquÆs
(*
±r
, 
	`JSON_TEXT
(
√xtch¨
));\

26 }

	)

28 
	#as£πNŸVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)\

30 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

31 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

32 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`mëhod
(
±r
, 1));\

33 }

	)

35 
	#as£πVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
Ë
	`as£πVÆid
(x, mëhod,Çextch¨)

	)

36 
	#as£πNŸVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
Ë
	`as£πNŸVÆid
(x, mëhod,Çextch¨)

	)

41 
	gTe°Suôe
::
	$Te°VÆid©‹
(){

42 #ifde‡
JSON_VALIDATE


44 
UnôTe°
::
	`SëPªfix
("TestValidator.cpp - Validator Root");

45 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{}")));

46 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[]")));

47 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{]")));

48 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[}")));

49 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{}aoe")));

50 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[]aoe")));

51 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("aoe")));

52 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("")));

53 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[\"stuff\":{},]")));

55 
UnôTe°
::
	`SëPªfix
("TestValidator.cpp - Validator Number");

56 
	`as£πVÆid
("123,\"√xt\"", 
isVÆidNumbî
, ',');

57 
	`as£πVÆid
("12.3,\"√xt\"", 
isVÆidNumbî
, ',');

58 
	`as£πVÆid
("0.123,\"√xt\"", 
isVÆidNumbî
, ',');

59 
	`as£πVÆid
("0,\"√xt\"", 
isVÆidNumbî
, ',');

60 
	`as£πVÆid
("0.,\"√xt\"", 
isVÆidNumbî
, ',');

61 
	`as£πVÆid
("0e123,\"√xt\"", 
isVÆidNumbî
, ',');

62 
	`as£πVÆid
("0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

63 
	`as£πVÆid
("0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

64 
	`as£πNŸVÆid
("0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

65 
	`as£πNŸVÆid
("0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

66 
	`as£πNŸVÆid
("0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

67 
	`as£πVÆid
("1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

68 
	`as£πVÆid
("1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

69 
	`as£πVÆid
("1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

70 
	`as£πNŸVÆid
("1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

71 
	`as£πNŸVÆid
("1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

72 
	`as£πNŸVÆid
("1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

73 
	`as£πVÆid
("1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

74 
	`as£πVÆid
("1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

75 
	`as£πVÆid
("1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

76 
	`as£πNŸVÆid
("1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

77 
	`as£πNŸVÆid
("1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

78 
	`as£πNŸVÆid
("1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

80 
	`as£πVÆid
("-123,\"√xt\"", 
isVÆidNumbî
, ',');

81 
	`as£πVÆid
("-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

82 
	`as£πVÆid
("-0.123,\"√xt\"", 
isVÆidNumbî
, ',');

83 
	`as£πVÆid
("-0,\"√xt\"", 
isVÆidNumbî
, ',');

84 
	`as£πVÆid
("-0.,\"√xt\"", 
isVÆidNumbî
, ',');

85 
	`as£πVÆid
("-0e123,\"√xt\"", 
isVÆidNumbî
, ',');

86 
	`as£πVÆid
("-0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

87 
	`as£πVÆid
("-0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

88 
	`as£πNŸVÆid
("-0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

89 
	`as£πNŸVÆid
("-0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

90 
	`as£πNŸVÆid
("-0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

91 
	`as£πVÆid
("-1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

92 
	`as£πVÆid
("-1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

93 
	`as£πVÆid
("-1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

94 
	`as£πNŸVÆid
("-1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

95 
	`as£πNŸVÆid
("-1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

96 
	`as£πNŸVÆid
("-1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

97 
	`as£πVÆid
("-1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

98 
	`as£πVÆid
("-1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

99 
	`as£πVÆid
("-1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

100 
	`as£πNŸVÆid
("-1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

101 
	`as£πNŸVÆid
("-1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

102 
	`as£πNŸVÆid
("-1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

103 
	`as£πVÆid
("0123,\"√xt\"", 
isVÆidNumbî
, ',');

104 #i‚de‡
JSON_STRICT


105 
	`as£πVÆid
(".01,\"√xt\"", 
isVÆidNumbî
, ',');

106 
	`as£πVÆid
("-.01,\"√xt\"", 
isVÆidNumbî
, ',');

107 
	`as£πVÆid
("+123,\"√xt\"", 
isVÆidNumbî
, ',');

108 
	`as£πVÆid
("+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

109 
	`as£πVÆid
("+0.123,\"√xt\"", 
isVÆidNumbî
, ',');

110 
	`as£πVÆid
("+0,\"√xt\"", 
isVÆidNumbî
, ',');

111 
	`as£πVÆid
("+0.,\"√xt\"", 
isVÆidNumbî
, ',');

112 
	`as£πVÆid
("+0e123,\"√xt\"", 
isVÆidNumbî
, ',');

113 
	`as£πVÆid
("+0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

114 
	`as£πVÆid
("+0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

115 
	`as£πVÆid
("+1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

116 
	`as£πVÆid
("+1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

117 
	`as£πVÆid
("+1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

118 
	`as£πVÆid
("+1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

119 
	`as£πVÆid
("+1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

120 
	`as£πVÆid
("+1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

121 
	`as£πVÆid
("0x12FF,\"√xt\"", 
isVÆidNumbî
, ',');

122 #ifde‡
JSON_OCTAL


123 
	`as£πNŸVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

125 
	`as£πVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

128 
	`as£πNŸVÆid
(".01,\"√xt\"", 
isVÆidNumbî
, ',');

129 
	`as£πNŸVÆid
("-.01,\"√xt\"", 
isVÆidNumbî
, ',');

130 
	`as£πNŸVÆid
("+123,\"√xt\"", 
isVÆidNumbî
, ',');

131 
	`as£πNŸVÆid
("+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

132 
	`as£πNŸVÆid
("+0.123,\"√xt\"", 
isVÆidNumbî
, ',');

133 
	`as£πNŸVÆid
("+0,\"√xt\"", 
isVÆidNumbî
, ',');

134 
	`as£πNŸVÆid
("+0.,\"√xt\"", 
isVÆidNumbî
, ',');

135 
	`as£πNŸVÆid
("+0e123,\"√xt\"", 
isVÆidNumbî
, ',');

136 
	`as£πNŸVÆid
("+0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

137 
	`as£πNŸVÆid
("+0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

138 
	`as£πNŸVÆid
("+1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

139 
	`as£πNŸVÆid
("+1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

140 
	`as£πNŸVÆid
("+1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

141 
	`as£πNŸVÆid
("+1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

142 
	`as£πNŸVÆid
("+1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

143 
	`as£πNŸVÆid
("+1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

144 
	`as£πNŸVÆid
("0x12FF,\"√xt\"", 
isVÆidNumbî
, ',');

145 
	`as£πVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

147 
	`as£πNŸVÆid
("+1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

148 
	`as£πNŸVÆid
("+1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

149 
	`as£πNŸVÆid
("+1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

150 
	`as£πNŸVÆid
("+1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

151 
	`as£πNŸVÆid
("+1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

152 
	`as£πNŸVÆid
("+1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

153 
	`as£πNŸVÆid
("+0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

154 
	`as£πNŸVÆid
("+0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

155 
	`as£πNŸVÆid
("+0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

157 
UnôTe°
::
	`SëPªfix
("TestValidator.cpp - Validator String");

158 
	`as£πVÆid
("hñlo\":123", 
isVÆidSåög
, ':');

159 
	`as£πVÆid
("he\\\"Œ\\\"o\":123", 
isVÆidSåög
, ':');

160 
	`as£πVÆid
("he\\u1234Œo\":123", 
isVÆidSåög
, ':');

161 
	`as£πVÆid
("he\\u0FFFŒo\":123", 
isVÆidSåög
, ':');

162 
	`as£πNŸVÆid
("he\\uFFFGŒo\":123", 
isVÆidSåög
, ':');

163 #i‚de‡
JSON_STRICT


164 
	`as£πVÆid
("he\\xFFŒo\":123", 
isVÆidSåög
, ':');

165 #ifde‡
JSON_OCTAL


166 
	`as£πVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

168 
	`as£πNŸVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

171 
	`as£πNŸVÆid
("he\\xFFŒo\":123", 
isVÆidSåög
, ':');

172 
	`as£πNŸVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

174 
	`as£πNŸVÆid
("he\\128Œo\":123", 
isVÆidSåög
, ':');

175 
	`as£πNŸVÆid
("he\\", 
isVÆidSåög
, ':');

176 
	`as£πNŸVÆid
("he\\\"", 
isVÆidSåög
, ':');

177 
	`as£πNŸVÆid
("he\\\"Œo\\\"", 
isVÆidSåög
, ':');

178 
	`as£πNŸVÆid
("hñlo", 
isVÆidSåög
, ':');

181 
UnôTe°
::
	`SëPªfix
("TestValidator.cpp - Validator Member");

182 
	`as£πVÆid_Dïth
("åue,", 
isVÆidMembî
, ',');

183 
	`as£πNŸVÆid_Dïth
("åu,", 
isVÆidMembî
, ',');

184 
	`as£πVÆid_Dïth
("Ál£,", 
isVÆidMembî
, ',');

185 
	`as£πNŸVÆid_Dïth
("Áls,", 
isVÆidMembî
, ',');

186 
	`as£πVÆid_Dïth
("nuŒ,", 
isVÆidMembî
, ',');

187 
	`as£πNŸVÆid_Dïth
("nul,", 
isVÆidMembî
, ',');

188 
	`as£πNŸVÆid_Dïth
("", 
isVÆidMembî
, ',');

189 #i‚de‡
JSON_STRICT


190 
	`as£πVÆid_Dïth
("TRUE,", 
isVÆidMembî
, ',');

191 
	`as£πVÆid_Dïth
("FALSE,", 
isVÆidMembî
, ',');

192 
	`as£πVÆid_Dïth
("NULL,", 
isVÆidMembî
, ',');

193 
	`as£πVÆid_Dïth
(",", 
isVÆidMembî
, ',');

195 
	`as£πNŸVÆid_Dïth
("TRUE,", 
isVÆidMembî
, ',');

196 
	`as£πNŸVÆid_Dïth
("FALSE,", 
isVÆidMembî
, ',');

197 
	`as£πNŸVÆid_Dïth
("NULL,", 
isVÆidMembî
, ',');

198 
	`as£πNŸVÆid_Dïth
(",", 
isVÆidMembî
, ',');

201 
UnôTe°
::
	`SëPªfix
("TestValidator.cpp - Validator Security");

202 #ifde‡
JSON_SECURITY_MAX_NEST_LEVEL


203 #i‡(
JSON_SECURITY_MAX_NEST_LEVEL
 != 128)

204 #îr‹, 
ã°
 
suôe
 
⁄ly
 
w™ts
 
a
 
√°
 
£curôy
 
Àvñ
 
of
 100

207 
js⁄_°rög
 
	`js⁄
(
	`JSON_TEXT
("{"));

208 
i
 = 0; i < 127; ++i){

209 
js⁄
 +
	`JSON_TEXT
("\"n\":{");

211 
js⁄
 +
	`js⁄_°rög
(128, '}');

212 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
js⁄
.
	`c_°r
()));

215 
js⁄_°rög
 
	`js⁄
(
	`JSON_TEXT
("{"));

216 
i
 = 0; i < 128; ++i){

217 
js⁄
 +
	`JSON_TEXT
("\"n\":{");

219 
js⁄
 +
	`js⁄_°rög
(129, '}');

220 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
js⁄
.
	`c_°r
()));

225 
	}
}

	@libjson/_internal/TestSuite/TestWriter.cpp

1 
	~"Te°Suôe.h
"

3 #ifde‡
JSON_WRITE_PRIORITY


4 
boﬁ
 
u£d_ascii_⁄e
;

6 
myDoTe°s
(
boﬁ
 
asciich¨
);

7 
	$myDoTe°s
(
boﬁ
 
asciich¨
){

8 
u£d_ascii_⁄e
 = 
asciich¨
;

9 #ifde‡
JSON_LIBRARY


10 
	#as£πWrôe
(
node
, 
func
, 
ex≥˘ed
)\

12 
js⁄_ch¨
 * 
_ãmp
 = 
	`func
(
node
);\

13 
	`as£πCSåögSame
(
_ãmp
, 
ex≥˘ed
);\

14 
	`js⁄_‰ì
(
_ãmp
);\

15 }

	)

17 
JSONNODE
 * 
ã°1
 = 
	`js⁄_√w
(
JSON_NODE
);

18 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe
, 
	`JSON_TEXT
("{}"));

19 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("World")));

20 
	`js⁄_push_back
(
ã°1
, 
	`js⁄_√w_b
(
	`JSON_TEXT
("libjs⁄"), 
åue
));

22 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe
, 
	`JSON_TEXT
("{\"Hello\":\"World\",\"libjson\":true}"));

23 #ifde‡
JSON_NEWLINE


24 
	`as£πEquÆs
(
JSON_NEWLINE
, 
	`JSON_TEXT
("\r\n"));

25 #ifde‡
JSON_INDENT


26 
	`as£πEquÆs
(
JSON_INDENT
, 
	`JSON_TEXT
(" "))

27 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\r\n \"Hello\" : \"World\",\r\n \"libjson\" :Årue\r\n}"));

29 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\r\n\t\"Hello\" : \"World\",\r\n\t\"libjson\" :Årue\r\n}"));

32 #ifde‡
JSON_INDENT


33 
	`as£πEquÆs
(
JSON_INDENT
, 
	`JSON_TEXT
(" "))

34 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\n \"Hello\" : \"World\",\n \"libjson\" :Årue\n}"));

36 
	`as£πWrôe
(
ã°1
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\n\t\"Hello\" : \"World\",\n\t\"libjson\" :Årue\n}"));

39 
	`js⁄_dñëe
(
ã°1
);

41 
JSONNODE
 * 
ã°2
 = 
	`js⁄_√w
(
JSON_ARRAY
);

42 
	`as£πWrôe
(
ã°2
, 
js⁄_wrôe
, 
	`JSON_TEXT
("[]"));

43 
	`js⁄_dñëe
(
ã°2
);

46 
JSONNODE
 * 
ˇrd
 = 
	`js⁄_√w
(
JSON_ARRAY
);

47 
JSONNODE
 *
c
 = 
	`js⁄_√w
(
JSON_ARRAY
);

48 
	`js⁄_push_back
(
c
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("name"), JSON_TEXT("Entr\033e Audio Int\033gr\033e 1")));

49 
	`js⁄_push_back
(
c
, 
	`js⁄_√w_i
(
NULL
, 0));

50 
	`js⁄_push_back
(
ˇrd
, 
c
);

51 #ifde‡
JSON_READ_PRIORITY


52 #i‚de‡
JSON_ESCAPE_WRITES


53 
	`as£πWrôe
(
ˇrd
, 
js⁄_wrôe
, 
	`JSON_TEXT
("[[\"Entr\033e Audio Int\033gr\033e 1\",0]]"))

54 
JSONNODE
 * 
ass
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("[[\"Entr\033e Audio Int\033gr\033e 1\",0]]"));

56 
	`as£πWrôe
(
ˇrd
, 
js⁄_wrôe
, 
	`JSON_TEXT
("[[\"Entr\\u001Be Audio Int\\u001Bgr\\u001Be 1\",0]]"))

57 
JSONNODE
 * 
ass
 = 
	`js⁄_∑r£
(
	`JSON_TEXT
("[[\"Entr\\u001Be Audio Int\\u001Bgr\\u001Be 1\",0]]"));

59 
JSONNODE
 * 
ôem
 = 
	`js⁄_©
(js⁄_©(
ass
, 0), 0);

60 
	`as£πWrôe
(
ôem
, 
js⁄_as_°rög
, 
	`JSON_TEXT
("Entr\033e Audio Int\033gr\033e 1"));

61 
	`js⁄_dñëe
(
ass
);

63 
	`js⁄_dñëe
(
ˇrd
);

66 #ifde‡
JSON_COMMENTS


67 
JSONNODE
 * 
ã°3
 = 
	`js⁄_√w
(
JSON_NODE
);

68 
	`js⁄_push_back
(
ã°3
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hi"), JSON_TEXT("\\There\\")));

69 
	`js⁄_push_back
(
ã°3
, 
	`js⁄_√w_a
(
	`JSON_TEXT
("Hello"), JSON_TEXT("World")));

70 
	`js⁄_£t_commít
(
	`js⁄_©
(
ã°3
, 0), 
	`JSON_TEXT
("Testing stuff"));

71 
	`js⁄_£t_commít
(
	`js⁄_©
(
ã°3
, 1), 
	`JSON_TEXT
("Multi\r\nLine\nUnixánd Windows"));

72 
	`as£πWrôe
(
ã°3
, 
js⁄_wrôe
, 
	`JSON_TEXT
("{\"Hi\":\"\\\\There\\\\\",\"Hello\":\"World\"}"));

73 #i‡!
	`deföed
–
JSON_INDENT
Ë&& !deföed(
JSON_NEWLINE
)

74 #ifde‡
JSON_WRITE_BASH_COMMENTS


75 
	`as£πWrôe
(
ã°3
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\n\t\n\t#Testing stuff\n\t\"Hi\" : \"\\\\There\\\\\",\n\t\n\t#Multi\n\t#Line\n\t#Unixánd Windows\n\t\"Hello\" : \"World\"\n}"));

76 #ñi‡
	`deföed
(
JSON_WRITE_SINGLE_LINE_COMMENTS
)

77 
	`as£πWrôe
(
ã°3
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\n\t\n\t//Testing stuff\n\t\"Hi\" : \"\\\\There\\\\\",\n\t\n\t//Multi\n\t//Line\n\t//Unixánd Windows\n\t\"Hello\" : \"World\"\n}"));

79 
	`as£πWrôe
(
ã°3
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("{\n\t\n\t//Testing stuff\n\t\"Hi\" : \"\\\\There\\\\\",\n\t\n\t/*\n\t\tMulti\n\t\tLine\n\t\tUnixánd Windows\n\t*/\n\t\"Hello\" : \"World\"\n}"));

82 
	`js⁄_dñëe
(
ã°3
);

85 #ifde‡
JSON_ARRAY_SIZE_ON_ONE_LINE


86 #i‡(
JSON_ARRAY_SIZE_ON_ONE_LINE
 == 2)

87 
JSONNODE
 * 
¨øºr
 = 
	`js⁄_√w
(
JSON_ARRAY
);

88 
	`js⁄_push_back
(
¨øºr
, 
	`js⁄_√w_i
(
	`JSON_TEXT
(""), 12));

89 
	`js⁄_push_back
(
¨øºr
, 
	`js⁄_√w_i
(
	`JSON_TEXT
(""), 8));

90 
	`as£πWrôe
(
¨øºr
, 
js⁄_wrôe_f‹m©ãd
, 
	`JSON_TEXT
("[12, 8]"));

91 
	`as£πWrôe
(
¨øºr
, 
js⁄_wrôe
, 
	`JSON_TEXT
("[12,8]"));

92 
	`js⁄_dñëe
(
¨øºr
);

97 
JSONNode
 
	`ã°1
(
JSON_NODE
);

98 
	`as£πEquÆs
(
ã°1
.
	`wrôe
(), 
	`JSON_TEXT
("{}"));

99 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("\\World\\")));

100 
ã°1
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("libjs⁄"), 
åue
));

101 
	`as£πEquÆs
(
ã°1
.
	`wrôe
(), 
	`JSON_TEXT
("{\"Hello\":\"\\\\World\\\\\",\"libjson\":true}"));

102 #ifde‡
JSON_NEWLINE


103 
	`as£πEquÆs
(
JSON_NEWLINE
, 
	`JSON_TEXT
("\r\n"));

104 #ifde‡
JSON_INDENT


105 
	`as£πEquÆs
(
JSON_INDENT
, 
	`JSON_TEXT
(" "))

106 
	`as£πEquÆs
(
ã°1
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\r\n \"Hello\" : \"\\\\World\\\\\",\r\n \"libjson\" :Årue\r\n}"));

108 
	`as£πEquÆs
(
ã°1
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\r\n\t\"Hello\" : \"\\\\World\\\\\",\r\n\t\"libjson\" :Årue\r\n}"));

111 #ifde‡
JSON_INDENT


112 
	`as£πEquÆs
(
JSON_INDENT
, 
	`JSON_TEXT
(" "))

113 
	`as£πEquÆs
(
ã°1
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\n \"Hello\" : \"\\\\World\\\\\",\n \"libjson\" :Årue\n}"));

115 
	`as£πEquÆs
(
ã°1
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\n\t\"Hello\" : \"\\\\World\\\\\",\n\t\"libjson\" :Årue\n}"));

119 
JSONNode
 
	`ã°2
(
JSON_ARRAY
);

120 
	`as£πEquÆs
(
ã°2
.
	`wrôe
(), 
	`JSON_TEXT
("[]"));

122 #ifde‡
JSON_COMMENTS


123 
JSONNode
 
	`ã°3
(
JSON_NODE
);

124 
ã°3
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hi"), JSON_TEXT("There")));

125 
ã°3
.
	`push_back
(
	`JSONNode
(
	`JSON_TEXT
("Hello"), JSON_TEXT("World")));

126 
ã°3
[0].
	`£t_commít
(
	`JSON_TEXT
("Testing stuff"));

127 
ã°3
[1].
	`£t_commít
(
	`JSON_TEXT
("Multi\r\nLine\nUnixánd Windows"));

128 
	`as£πEquÆs
(
ã°3
.
	`wrôe
(), 
	`JSON_TEXT
("{\"Hi\":\"There\",\"Hello\":\"World\"}"));

129 #i‡!
	`deföed
–
JSON_INDENT
Ë&& !deföed(
JSON_NEWLINE
)

130 #ifde‡
JSON_WRITE_BASH_COMMENTS


131 
	`as£πEquÆs
(
ã°3
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\n\t\n\t#Testing stuff\n\t\"Hi\" : \"There\",\n\t\n\t#Multi\n\t#Line\n\t#Unixánd Windows\n\t\"Hello\" : \"World\"\n}"));

132 #ñi‡
	`deföed
(
JSON_WRITE_SINGLE_LINE_COMMENTS
)

133 
	`as£πEquÆs
(
ã°3
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\n\t\n\t//Testing stuff\n\t\"Hi\" : \"There\",\n\t\n\t//Multi\n\t//Line\n\t//Unixánd Windows\n\t\"Hello\" : \"World\"\n}"));

135 
	`as£πEquÆs
(
ã°3
.
	`wrôe_f‹m©ãd
(), 
	`JSON_TEXT
("{\n\t\n\t//Testing stuff\n\t\"Hi\" : \"There\",\n\t\n\t/*\n\t\tMulti\n\t\tLine\n\t\tUnixánd Windows\n\t*/\n\t\"Hello\" : \"World\"\n}"));

141 #ifde‡
JSON_READ_PRIORITY


142 
u£d_ascii_⁄e
 = 
asciich¨
;

143 c⁄° 
js⁄_ch¨
 * 
°r
 = 
	`JSON_TEXT
("{ \"mt\":\"\\\"str\\\"\" }");

144 
js⁄_°rög
 
check
 = 
libjs⁄
::
	`°rù_whôe_•a˚
(
°r
);

145 
	`as£πEquÆs
(
check
, 
	`JSON_TEXT
("{\"mt\":\"\\\"str\\\"\"}"));

147 
u£d_ascii_⁄e
 = 
asciich¨
;

148 
JSONNode
 
obj
 = 
libjs⁄
::
	`∑r£
(
°r
);

149 
js⁄_°rög
 
obj°r
 = 
obj
.
	`wrôe
();

150 
	`as£πEquÆs
(
obj°r
, 
	`JSON_TEXT
("{\"mt\":\"\\\"str\\\"\"}"));

153 
UnôTe°
::
	`SëPªfix
("TestWriter.cpp -áscii one char");

154 
u£d_ascii_⁄e
 = 
asciich¨
;

155 
JSONNode
 
n
 = 
libjs⁄
::
	`∑r£
(
	`JSON_TEXT
("[ \"I said: \\\"foo!\\\"\" ]"));

156 
js⁄_°rög
 
ªsu…
 = 
n
.
	`wrôe_f‹m©ãd
();

157 
	`as£πEquÆs
(
ªsu…
, 
	`JSON_TEXT
("[\n\t\"I said: \\\"foo!\\\"\"\n]"));

160 
	}
}

162 
	gTe°Suôe
::
	$Te°Wrôî
(){

163 
UnôTe°
::
	`SëPªfix
("TestWriter.cpp - Writing (noáscii one)");

164 
	`myDoTe°s
(
Ál£
);

166 
UnôTe°
::
	`SëPªfix
("TestWriter.cpp - Writing (yesáscii one)");

167 
	`myDoTe°s
(
åue
);

168 
	}
}

	@libjson/_internal/TestSuite/UStringTest.h

1 #i‚de‡
USTRING_TEST_H


2 
	#USTRING_TEST_H


	)

9 
	~<c°rög
>

10 
	~<c°dlib
>

11 
	~<cwch¨
>

12 
	~<io°ªam
>

14 
wch¨_t
 
	tmych¨
;

16 
size_t
 
	$my°æí
(c⁄° 
mych¨
 * 
°r
){

17 
i
 = 0;

18 c⁄° 
mych¨
 * 
ô
 = 
°r
; *ô; ++ô, ++
i
){

21  
i
;

22 
	}
}

24 ˛as†
	cjs⁄_°rög
 {

25 
	mpublic
:

26 
	sc⁄°_ôî©‹
 {

27 
ölöe
 
c⁄°_ôî©‹
& 
›î©‹
 ++(Ë{ ++
ô
;  *
	mthis
; }

28 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 --(Ë{ --
	mô
;  *
	mthis
; }

29 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 +=(
i
Ë{ 
ô
 +i;  *
	mthis
; }

30 
ölöe
 
	mc⁄°_ôî©‹
& 
	m›î©‹
 -=(
i
Ë{ 
ô
 -i;  *
	mthis
; }

31 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 ++() {

32 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

33 ++
	mô
;

34  
	mªsu…
;

36 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 --() {

37 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

38 --
	mô
;

39  
	mªsu…
;

41 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 +(
	mi
) const {

42 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

43 
	mªsu…
.
	mô
 +
i
;

44  
	mªsu…
;

46 
ölöe
 
c⁄°_ôî©‹
 
	m›î©‹
 -(
	mi
) const {

47 
c⁄°_ôî©‹
 
ªsu…
(*
this
);

48 
	mªsu…
.
	mô
 -
i
;

49  
	mªsu…
;

51 
ölöe
 
size_t
 
	m›î©‹
 -(
c⁄°_ôî©‹
 
	mŸhî
) const {

52  
	mô
 - 
	mŸhî
.it;

54 
ölöe
 
	mmych¨
 & 
	m›î©‹
 [](
size_t
 
	mpos
Ëc⁄° {  
	mô
[
pos
]; };

55 
ölöe
 
	mmych¨
 & 
	m›î©‹
 *(Ëc⁄° {  *
	mô
; }

56 
ölöe
 
boﬁ
 
	m›î©‹
 =(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 == other.it; }

57 
ölöe
 
boﬁ
 
	m›î©‹
 !(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 != other.it; }

58 
ölöe
 
boﬁ
 
	m›î©‹
 > (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° {  
	mô
 > other.it; }

59 
ölöe
 
boﬁ
 
	m›î©‹
 >(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 >= other.it; }

60 
ölöe
 
boﬁ
 
	m›î©‹
 < (c⁄° 
	mc⁄°_ôî©‹
 & 
	mŸhî
Ëc⁄° {  
	mô
 < other.it; }

61 
ölöe
 
boﬁ
 
	m›î©‹
 <(c⁄° 
c⁄°_ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 <= other.it; }

62 
ölöe
 
	mc⁄°_ôî©‹
 & 
	m›î©‹
 = (c⁄° 
c⁄°_ôî©‹
 & 
‹ig
Ë{ 
ô
 = orig.ô;  *
	mthis
; }

63 
c⁄°_ôî©‹
 (c⁄° c⁄°_ôî©‹ & 
‹ig
Ë: 
ô
(orig.it) {}

64 
c⁄°_ôî©‹
 (c⁄° 
mych¨
 * 
∂a˚
Ë: 
ô
((mychar*)place) {}

65 
c⁄°_ôî©‹
(Ë: 
ô
(0) {};

67 
mych¨
 * 
	mô
;

70 
	sôî©‹
 {

71 
ölöe
 
	gôî©‹
& 
	g›î©‹
 ++(Ë{ ++
	gô
;  *
	gthis
; }

72 
ölöe
 
	gôî©‹
& 
	g›î©‹
 --(Ë{ --
	gô
;  *
	gthis
; }

73 
ölöe
 
	gôî©‹
& 
	g›î©‹
 +=(
i
Ë{ 
ô
 +i;  *
	gthis
; }

74 
ölöe
 
	gôî©‹
& 
	g›î©‹
 -=(
i
Ë{ 
ô
 -i;  *
	gthis
; }

75 
ölöe
 
ôî©‹
 
	g›î©‹
 ++() {

76 
ôî©‹
 
ªsu…
(*
this
);

77 ++
	gô
;

78  
	gªsu…
;

80 
ölöe
 
ôî©‹
 
	g›î©‹
 --() {

81 
ôî©‹
 
ªsu…
(*
this
);

82 --
	gô
;

83  
	gªsu…
;

85 
ölöe
 
ôî©‹
 
	g›î©‹
 +(
	gi
) const {

86 
ôî©‹
 
ªsu…
(*
this
);

87 
	gªsu…
.
	gô
 +
i
;

88  
	gªsu…
;

90 
ölöe
 
ôî©‹
 
	g›î©‹
 -(
	gi
) const {

91 
ôî©‹
 
ªsu…
(*
this
);

92 
	gªsu…
.
	gô
 -
i
;

93  
	gªsu…
;

95 
ölöe
 
	gmych¨
 & 
	g›î©‹
 [](
size_t
 
	gpos
Ëc⁄° {  
	gô
[
pos
]; };

96 
ölöe
 
	gmych¨
 & 
	g›î©‹
 *(Ëc⁄° {  *
	gô
; }

97 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 == other.it; }

98 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 != other.it; }

99 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° {  
	gô
 > other.it; }

100 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 >= other.it; }

101 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gôî©‹
 & 
	gŸhî
Ëc⁄° {  
	gô
 < other.it; }

102 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
ôî©‹
 & 
Ÿhî
Ëc⁄° {  
ô
 <= other.it; }

103 
ölöe
 
	gôî©‹
 & 
	g›î©‹
 = (c⁄° 
ôî©‹
 & 
‹ig
Ë{ 
ô
 = orig.ô;  *
	gthis
; }

104 
ölöe
 
›î©‹
 
c⁄°_ôî©‹
(Ëc⁄° 
	gjs⁄_nŸhrow
 {  c⁄°_ôî©‹(
ô
); }

105 
ôî©‹
 (c⁄° iãøt‹ & 
‹ig
Ë: 
ô
(orig.it) {}

106 
ôî©‹
 (c⁄° 
mych¨
 * 
∂a˚
Ë: 
ô
((mychar*)place) {}

108 
mych¨
 * 
ô
;

112 c⁄° 
size_t
 
	g≈os
 = 0xFFFFFFFF;

113 
	$js⁄_°rög
(Ë: 
	`Àn
(0), 
	$°r
(0){

114 
	`£tToCSå
(
L
"", 0);

115 
	}
}

117 
	$js⁄_°rög
(c⁄° 
mych¨
 * 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

118 
	`£tToCSå
(
meh
, 
	`my°æí
(meh));

119 
	}
}

121 
	$js⁄_°rög
(c⁄° 
mych¨
 * 
meh
, 
size_t
 
l
Ë: 
	`Àn
÷), 
	$°r
(0){

122 
	`£tToCSå
(
meh
, 
l
);

123 
°r
[
Àn
] = '\0';

124 
	}
}

126 
	$js⁄_°rög
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
Ë: 
	`Àn
(0), 
	$°r
(0){

127 
	`£tToCSå
(
beg
.
ô
, 
í
.it - beg.it);

128 
°r
[
Àn
] = '\0';

129 
	}
}

131 
	$js⁄_°rög
(c⁄° 
c⁄°_ôî©‹
 & 
beg
, c⁄° c⁄°_ôî©‹ & 
í
Ë: 
	`Àn
(0), 
	$°r
(0){

132 
	`£tToCSå
(
beg
.
ô
, 
í
.it - beg.it);

133 
°r
[
Àn
] = '\0';

134 
	}
}

136 
	$js⁄_°rög
(c⁄° 
js⁄_°rög
 & 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

137 
	`£tToCSå
(
meh
.
	`c_°r
(), meh.
Àn
);

138 
	}
}

140 ~
	$js⁄_°rög
(){ 
°d
::
	`‰ì
(
°r
); 
	}
};

142 
	$js⁄_°rög
(
l
, 
mych¨
 
meh
Ë: 
	`Àn
(0), 
	$°r
(0){

143 
°r
 = (
mych¨
*)
°d
::
	`mÆloc
((
l
 + 1) * (mychar));

144 
Àn
 = 
l
;

145 
i
 = 0; i < 
l
; ++i){

146 
°r
[
i
] = 
meh
;

148 
°r
[
l
] = 
L
'\0';

149 
	}
}

151 
	$sw≠
(
js⁄_°rög
 & 
meh
){

152 
size_t
 
_Àn
 = 
Àn
;

153 
mych¨
 * 
_°r
 = 
°r
;

154 
Àn
 = 
meh
.len;

155 
°r
 = 
meh
.str;

156 
meh
.
Àn
 = 
_Àn
;

157 
meh
.
°r
 = 
_°r
;

158 
	}
}

160 
ôî©‹
 
	$begö
(){  
	`ôî©‹
(
°r
); 
	}
};

161 
ôî©‹
 
	$íd
(){  
	`ôî©‹
(
°r
 + 
	`Àngth
()); 
	}
};

162 c⁄° 
ôî©‹
 
	$begö
(Ëc⁄° {  
	`ôî©‹
(
°r
); 
	}
};

163 c⁄° 
ôî©‹
 
	$íd
(Ëc⁄° {  
	`ôî©‹
(
°r
 + 
	`Àngth
()); 
	}
};

164 
	$assign
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
){

165 
	`js⁄_°rög
(
beg
, 
í
).
	`sw≠
(*
this
);

166 
	}
}

167 
	gjs⁄_°rög
 & 
	$≠≥nd
(c⁄° 
ôî©‹
 & 
beg
, c⁄° iãøt‹ & 
í
){

168 
js⁄_°rög
 
	`ãmp
(
beg
, 
í
);

169  *
this
 +
ãmp
;

170 
	}
}

172 c⁄° 
mych¨
 * 
	$c_°r
(Ëc⁄° {  
°r
; 
	}
};

173 c⁄° 
mych¨
 * 
	$d©a
(Ëc⁄° {  
°r
; 
	}
};

174 
size_t
 
	$Àngth
(Ëc⁄° {  
Àn
; 
	}
};

175 
size_t
 
	$ˇ∑côy
(Ëc⁄° {  
Àn
; 
	}
};

176 
boﬁ
 
	$em±y
(Ëc⁄° {  
Àn
 =0; 
	}
};

178 
boﬁ
 
	g›î©‹
 ==(c⁄° 
js⁄_°rög
 & 
Ÿhî
) const {

179 i‡(
Àn
 !
Ÿhî
.ÀnË 
Ál£
;

180  
memcmp
(
°r
, 
Ÿhî
.°r, 
Àn
 * (
mych¨
)) == 0;

183 
boﬁ
 
	g›î©‹
 !=(c⁄° 
js⁄_°rög
 & 
Ÿhî
) const {

184  !(*
this
 =
Ÿhî
);

187 c⁄° 
	gwch¨_t
 & 
	g›î©‹
[] (
size_t
 
	gpos
Ëc⁄° {  
	g°r
[
pos
]; }

188 
	gwch¨_t
 & 
	g›î©‹
[] ( 
size_t
 
	gpos
 ){  
	g°r
[
pos
]; }

190 
	gjs⁄_°rög
 & 
	g›î©‹
 = (c⁄° 
js⁄_°rög
 & 
meh
) {

191 
°d
::
‰ì
(
°r
);

192 
£tToCSå
(
meh
.
c_°r
(), meh.
Àn
);

193  *
	gthis
;

196 
	gjs⁄_°rög
 & 
	g›î©‹
 = (c⁄° 
mych¨
 * 
meh
) {

197 
°d
::
‰ì
(
°r
);

198 
£tToCSå
(
meh
, 
my°æí
(meh));

199  *
	gthis
;

202 
	gjs⁄_°rög
 & 
	g›î©‹
 +(c⁄° 
js⁄_°rög
 & 
Ÿhî
) {

203 
size_t
 
√wÀn
 = 
Àn
 + 
Ÿhî
.len;

204 
mych¨
 * 
	g√w°r
 = (mych¨*)
°d
::
mÆloc
((
√wÀn
 + 1) * (mychar));

205 
	g°d
::
mem˝y
(
√w°r
, 
°r
, 
Àn
 * (
mych¨
));

206 
	g°d
::
mem˝y
(
√w°r
 + 
Àn
, 
Ÿhî
.
°r
, (Ÿhî.À¿+ 1Ë* (
mych¨
));

207 
	gÀn
 = 
√wÀn
;

208 
	g°d
::
‰ì
(
°r
);

209 
	g°r
 = 
√w°r
;

210  *
	gthis
;

213 c⁄° 
js⁄_°rög
 
	g›î©‹
 + (c⁄° 
	gjs⁄_°rög
 & 
	gŸhî
) const {

214 
js⁄_°rög
 
	gªsu…
 = *
this
;

215 
	gªsu…
 +
Ÿhî
;

216  
	gªsu…
;

219 
	gjs⁄_°rög
 & 
	g›î©‹
 +(c⁄° 
mych¨
 
Ÿhî
) {

220 
mych¨
 
ãmp
[2] = {
Ÿhî
, 
L
'\0'};

221 
js⁄_°rög
 
ãmp_s
(
ãmp
);

222  (*
	gthis
Ë+
ãmp_s
;

225 c⁄° 
js⁄_°rög
 
	g›î©‹
 + (c⁄° 
mych¨
 
	gŸhî
) const {

226 
js⁄_°rög
 
	gªsu…
 = *
this
;

227 
	gªsu…
 +
Ÿhî
;

228  
	gªsu…
;

231 
	$ª£rve
(
size_t
){
	}
};

232 
	$˛ór
(){
	`£tToCSå
(
L
"", 0);
	}
}

234 
js⁄_°rög
 
	$sub°r
(
size_t
 
pos
 = 0, size_à
n
 = 
≈os
) const {

235 
js⁄_°rög
 
	`ªs
(
Ál£
, false, false);

236 i‡(
n
 > 
Àn
)Ç =Üen;

237 i‡(
n
 + 
pos
 > 
Àn
)Ç =Üen -Öos;

238 
ªs
.
	`£tToCSå
(
°r
 + 
pos
, 
n
);

239 
ªs
.
°r
[
n
] = 
L
'\0';

240  
ªs
;

241 
	}
}

244 
size_t
 
	$föd
 ( 
mych¨
 
c
, 
size_t
 
pos
 = 0 ) const {

245 i‡(
pos
 > 
Àn
Ë 
≈os
;

246 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

247 i‡(*
i
 =
c
Ë i - 
°r
;

249  
≈os
;

250 
	}
}

252 
size_t
 
	$föd_fú°_nŸ_of
 ( c⁄° 
mych¨
* 
s
, 
size_t
 
pos
 = 0 ) const {

253 i‡(
pos
 > 
Àn
Ë 
≈os
;

254 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

255 
boﬁ
 
found
 = 
Ál£
;

256 c⁄° 
mych¨
 * 
k
 = 
s
; *k; ++k){

257 i‡(*
i
 =*
k
){

258 
found
 = 
åue
;

262 i‡(!
found
Ë 
i
 - 
°r
;

264  
≈os
;

265 
	}
}

267 
size_t
 
	$föd_fú°_of
 ( c⁄° 
mych¨
* 
s
, 
size_t
 
pos
 = 0 ) const {

268 i‡(
pos
 > 
Àn
Ë 
≈os
;

269 
mych¨
 * 
i
 = 
°r
 + 
pos
; *i; ++i){

270 c⁄° 
mych¨
 * 
k
 = 
s
; *k; ++k){

271 i‡(*
i
 =*
k
){

272  
i
 - 
°r
;

276  
≈os
;

277 
	}
}

279 
ôî©‹
 
	$îa£
(
ôî©‹
 
ô
, iãøt‹ 
ô2
){

280 
size_t
 
mov
 = 
ô2
.
ô
 - it.it;

281 
°d
::
	`memmove
(
°r
, 
ô2
.
ô
, (
Àn
 - 
mov
 + 1Ë* (
mych¨
));

282 
Àn
 -
mov
;

283  
ô
;

284 
	}
}

285 
	g¥iv©e
:

286 
	$js⁄_°rög
(
boﬁ
, boﬁ, boﬁË: 
	`Àn
(0), 
	$°r
(0){
	}
};

288 
	$£tToCSå
(c⁄° 
mych¨
 * 
°
, 
size_t
 
l
){

289 
Àn
 = 
l
;

290 
°r
 = (
mych¨
*)
°d
::
	`mem˝y
(°d::
	`mÆloc
((
Àn
 + 1Ë* (mych¨)), 
°
, (len + 1) * (mychar));

291 
	}
}

293 
size_t
 
	gÀn
;

294 
mych¨
 * 
	g°r
;

	@libjson/_internal/TestSuite/UnitTest.cpp

1 
	~"UnôTe°.h
"

2 
	~<ve˘‹
>

3 
	~<io°ªam
>

4 
	~<°dex˚±
>

5 
	~<˘ime
>

6 
	~<c°dlib
>

8 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
Faûs
;

9 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
AŒ
;

10 
boﬁ
 
	gRëu∫OnFaû
 = 
Ál£
;

11 
boﬁ
 
	gEcho
 = 
åue
;

12 
	g°d
::
°rög
 
Pªfix
;

13 
˛ock_t
 
	g°¨ãd
 = 0;

14 #i‡(!
deföed
(
CLOCKS_PER_SEC
))

15 
	#noTimeF‹m©tög


	)

18 
	g°d
::
°rög
 
timög
();

19 
	g°d
::
°rög
 
	$timög
(){

20 
˛ock_t
 
˛ockticks
 = 
	`˛ock
(Ë- 
°¨ãd
;

21 
°d
::
°rög°ªam
 
out
;

24 i‡(
CLOCKS_PER_SEC
 == 1000000){

25 i‡(
˛ockticks
 < 10000){

26 
out
 << 
˛ockticks
 << " microseconds";

27  
out
.
	`°r
();

28 } i‡(
˛ockticks
 < 10000000){

29 
out
 << 
˛ockticks
 / 1000 << " milliseconds";

30  
out
.
	`°r
();

32 } i‡(
CLOCKS_PER_SEC
 == 1000){

33 i‡(
˛ockticks
 < 10000){

34 
out
 << 
˛ockticks
 << " milliseconds";

35  
out
.
	`°r
();

38 
out
 << 
˛ockticks
 << " clockticks";

39  
out
.
	`°r
();

42 #i‚de‡
noTimeF‹m©tög


43 i‡((
CLOCKS_PER_SEC
 == 1000000) || (CLOCKS_PER_SEC == 1000)){

44 
˛ock_t
 
£c⁄ds
 = 
˛ockticks
 / 
CLOCKS_PER_SEC
;

45 i‡(
£c⁄ds
 < 60){

46 
out
 << 
£c⁄ds
 << " seconds";

47 } i‡(
£c⁄ds
 < 7200) {

48 
out
 << 
£c⁄ds
 / 60 << " minutes";

50 
out
 << 
£c⁄ds
 / 3600 << " hours";

52  
out
.
	`°r
();

55 
	}
}

57 
	gUnôTe°
::
	$SñfCheck
(){

58 
	`as£πTrue
(
åue
);

59 
	`as£πFÆ£
(
Ál£
);

60 
	`as£πEquÆs
(1, 1);

61 
	`as£πNŸEquÆs
(1, 0);

63 
	`as£πGª©îTh™
(1, 0);

64 
	`as£πGª©îTh™EquÆTo
(1, 0);

65 
	`as£πGª©îTh™EquÆTo
(1, 1);

67 
	`as£πLessTh™
(0, 1);

68 
	`as£πLessTh™EquÆTo
(0, 1);

69 
	`as£πLessTh™EquÆTo
(1, 1);

71 
	`as£πCSåögEquÆs
("Hello", "Hello");

72 
	`as£πCSåögNŸEquÆs
("Hello", "World");

74 
	`as£πCSåögEquÆsW
(
L
"Hello", L"Hello");

75 
	`as£πCSåögNŸEquÆsW
(
L
"Hello", L"World");

77 
°d
::
ve˘‹
<°d::
°rög
> 
ex˚±i⁄_Te°
;

78 
	`as£πEx˚±i⁄
(
°d
::
°rög
 
ªs
 = 
ex˚±i⁄_Te°
.
	`©
(15), std::
out_of_ønge
);

79 
	}
}

81 
	g°d
::
°rög
 
fix
(c⁄° 
°d
::°rög & 
°r
);

82 
	g°d
::
°rög
 
fix
(c⁄° 
°d
::°rög & 
°r
){

83 
°d
::
°rög
 
fff
(
°r
);

84 
size_t
 
	gpos
 = 
fff
.
föd
('\n');

85 
	gpos
 !
°d
::
°rög
::
≈os
){

86 
fff
 = fff.
sub°r
(0, 
pos
Ë+ "\\n" + 
	gfff
.substr(pos + 1);

87 
	gpos
 = 
fff
.
föd
('\n', 
pos
 + 1);

89 
	gpos
 = 
fff
.
föd
('\t');

90 
	gpos
 !
°d
::
°rög
::
≈os
){

91 
fff
 = fff.
sub°r
(0, 
pos
Ë+ "\\t" + 
	gfff
.substr(pos + 1);

92 
	gpos
 = 
fff
.
föd
('\t', 
pos
 + 1);

94 
	gpos
 = 
fff
.
föd
('\r');

95 
	gpos
 !
°d
::
°rög
::
≈os
){

96 
fff
 = fff.
sub°r
(0, 
pos
Ë+ "\\r" + 
	gfff
.substr(pos + 1);

97 
	gpos
 = 
fff
.
föd
('\r', 
pos
 + 1);

99 
	gpos
 = 
fff
.
föd
('\"');

100 
	gpos
 !
°d
::
°rög
::
≈os
){

101 
fff
 = fff.
sub°r
(0, 
pos
Ë+ "\\\"" + 
	gfff
.substr(pos + 1);

102 
	gpos
 = 
fff
.
föd
('\"', 
pos
 + 2);

104  
	gfff
;

107 
	gUnôTe°
::
PushFaûuª
(c⁄° 
°d
::
°rög
 & 
Áû
){

108 
Faûs
.
push_back
(
Áû
);

109 i‡(
ã°_likñy
(
Echo
)Ë
	g°d
::
cout
 << 
Áû
 << 
°d
::
ídl
;

110 
	gAŒ
.
push_back
(
°d
::
°rög
("<b styÀ=\"cﬁ‹:#000000;background:#FF0000\">"Ë+ 
Áû
 + "</b><br>");

113 
	gUnôTe°
::
PushSuc˚ss
(c⁄° 
°d
::
°rög
 & 
∑ss
){

114 
AŒ
.
push_back
(
°d
::
°rög
("<b styÀ=\"cﬁ‹:#000000;background:#00FF00\">"Ë+ 
∑ss
 + "</b><br>");

117 
	g°d
::
°rög
 
UnôTe°
::
	$ToSåög
(){

118 
°d
::
°rög°ªam
 
out
;

119 
out
 << "Numbî o‡ÁûedÅe°s: " << 
Faûs
.
	`size
();

120 
°d
::
°rög
 
	`ªsu…
(
out
.
	`°r
());

121 
°d
::
ve˘‹
<°d::
°rög
>::
ôî©‹
 
ô
 = 
Faûs
.
	`begö
(), 
íd
 = Faûs.
	`íd
(); it !=Énd; ++it){

122 
ªsu…
 +*
ô
;

123 
ªsu…
 += "\n";

125  
ªsu…
;

126 
	}
}

128 
	g°d
::
°rög
 
UnôTe°
::
	$ToHTML
(){

129 
°d
::
°rög
 
	`ªsu…
("<html><head><title>Test Suite Results</title></head><body><a style=\"font-size:14\">");

130 
°d
::
°rög°ªam
 
out
;

131 
out
 << "Pas£d Te°s: <¯°yÀ=\"cﬁ‹:#00CC00\">" << 
AŒ
.
	`size
(Ë- 
Faûs
.size() << "</c><br>Failed Tests: <c style=\"color:#CC0000\">" << Fails.size() << "</c><br>Total Tests: " << All.size() << "<br>";

132 i‡(
	`ã°_likñy
(
°¨ãd
)){

133 
out
 << "Eœp£dÅime: " << 
	`timög
() << "<br><br>";

135 
out
 << "<br>";

137 
ªsu…
 +
out
.
	`°r
();

138 
°d
::
ve˘‹
<°d::
°rög
>::
ôî©‹
 
ô
 = 
AŒ
.
	`begö
(), 
íd
 = AŒ.
	`íd
(); it !=Énd; ++it){

139 
ªsu…
 +*
ô
;

141  
ªsu…
 + "</a></body></html>";

142 
	}
}

144 
	~<io°ªam
>

145 
	~<c°dio
>

146 
	gUnôTe°
::
SaveTo
(c⁄° 
°d
::
°rög
 & 
loˇti⁄
){

147 
FILE
 * 
Â
 = 
f›í
(
loˇti⁄
.
c_°r
(), "w");

148 i‡(
ã°_likñy
(
Â
 != 0)){

149 
°d
::
°rög
 
html
(
ToHTML
());

150 
fwrôe
(
html
.
c_°r
(), html.
Àngth
(), 1, 
Â
);

151 
f˛o£
(
Â
);

152 
sy°em
("pwd");

153 
	g°d
::
cout
 << "Saved fûêtÿ" << 
loˇti⁄
 << 
°d
::
ídl
;

155 
	g°d
::
cout
 << "Couldn'àßvêfûe" << 
°d
::
ídl
;

158 i‡(
ã°_likñy
(
Echo
)Ë
	g°d
::
cout
 << "Pas£dÅe°s: " << 
AŒ
.
size
(Ë- 
Faûs
.size(Ë<< 
°d
::
ídl
 << "FailedÅests: " << Fails.size() << std::endl;

161 
boﬁ
 
	gUnôTe°
::
	$GëRëu∫OnFaû
(){  
Rëu∫OnFaû
; 
	}
}

162 
	gUnôTe°
::
	$SëRëu∫OnFaû
(
boﬁ
 
›ti⁄
){ 
Rëu∫OnFaû
 = o±i⁄; 
	}
}

163 
	gUnôTe°
::
	$SëEcho
(
boﬁ
 
›ti⁄
){ 
Echo
 = o±i⁄; 
	}
}

164 
	gUnôTe°
::
SëPªfix
(c⁄° 
°d
::
°rög
 & 
¥efix
){

165 
°d
::
cout
 << 
¥efix
 << std::
ídl
;

166 
	gPªfix
 = 
¥efix
;

168 
	g°d
::
°rög
 
UnôTe°
::
	$GëPªfix
(){  
Pªfix
; 
	}
}

169 
	gUnôTe°
::
echo_
(c⁄° 
°d
::
°rög
 & 
out
){

170 
AŒ
.
push_back
(
fix
(
out
) + "<br>");

171 
	g°d
::
cout
 << 
out
 << 
°d
::
ídl
;

174 
	gUnôTe°
::
	$SèπTime
(){

175 
°¨ãd
 = 
	`˛ock
();

176 
	}
}

	@libjson/_internal/TestSuite/UnitTest.h

1 #i‚de‡
_TEST_SUITE_H_


2 
	#_TEST_SUITE_H_


	)

4 
	~<°rög
>

5 
	~<s°ªam
>

6 
	~<c°rög
>

8 #ifde‡
__GNUC__


9 
	#TEST_GCC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100)

	)

10 #i‡(
TEST_GCC_VERSION
 >= 29600)

11 
	#ã°_likñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),1)

	)

12 
	#ã°_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(()((
boﬁ
)(x)),0)

	)

14 
	#ã°_likñy
(
x
Ë
	)
x

15 
	#ã°_u∆ikñy
(
x
Ë
	)
x

18 
	#ã°_likñy
(
x
Ë
	)
x

19 
	#ã°_u∆ikñy
(
x
Ë
	)
x

22 
	~<limôs
>

24 
	gãm∂©e
 <
ty≥«me
 
	gT
>

25 
	uunôã°_numUni⁄
 {

26 
unôã°_numUni⁄
(
T
 
_v
Ë: 
vÆ
(_v){}

27 
T
 
vÆ
;

28 
	mc
[(
T
)];

31 
	gãm∂©e
<
ty≥«me
 
	gT
>

32 
boﬁ
 
	$unôã°_isNAN
(
T
 
num
){

33 
unôã°_numUni⁄
<
T
> 
	`‹ig
(
num
);

35 
unôã°_numUni⁄
<
T
> 
	`sig_«n
(
°d
::
numîic_limôs
<T>::
	`sig«lög_NaN
());

37 
boﬁ
 
isNAN
 = 
åue
;

38 
size_t
 
i
 = 0; i < (
T
); ++i){

39 i‡(
‹ig
.
c
[
i
] !
sig_«n
.c[i]){

40 
isNAN
 = 
Ál£
;

44 i‡(
isNAN
Ë 
åue
;

46 
unôã°_numUni⁄
<
T
> 
	`quõt_«n
(
°d
::
numîic_limôs
<T>::
	`quõt_NaN
());

48 
size_t
 
i
 = 0; i < (
T
); ++i){

49 i‡(
‹ig
.
c
[
i
] !
quõt_«n
.c[i]){

50  
Ál£
;

53  
åue
;

54 
	}
}

56 ˛as†
	cUnôTe°
 {

57 
	mpublic
:

58 
SñfCheck
();

59 
PushFaûuª
(c⁄° 
°d
::
°rög
 & 
Áû
);

60 
PushSuc˚ss
(c⁄° 
°d
::
°rög
 & 
∑ss
);

61 
echo_
(c⁄° 
°d
::
°rög
 & 
out
);

62 
	m°d
::
°rög
 
ToSåög
();

63 
	m°d
::
°rög
 
ToHTML
();

64 
SaveTo
(c⁄° 
°d
::
°rög
 & 
loˇti⁄
);

65 
SëRëu∫OnFaû
(
boﬁ
 
›ti⁄
);

66 
boﬁ
 
GëRëu∫OnFaû
();

67 
SëEcho
(
boﬁ
 
›ti⁄
);

68 
SëPªfix
(c⁄° 
°d
::
°rög
 & 
¥efix
);

69 
	m°d
::
°rög
 
GëPªfix
();

70 
SèπTime
();

71 
ölöe
 
boﬁ
 
	$_ÊﬂtsAªEquÆ
(c⁄° & 
⁄e
, c⁄° & 
two
){

72  (
⁄e
 > 
two
) ? (one -Åwo) < .000001 : (one -Åwo) > -.000001;

74 
	}
};

76 
	#MakePª
()\

77 
°d
::
°rög
 
¥e
 = 
UnôTe°
::
	`GëPªfix
();\

78 i‡(
	`ã°_u∆ikñy
(
¥e
.
	`em±y
())){\

79 
°d
::
°rög°ªam
 
out
;\

80 
out
 << 
__FILE__
 << ":" << 
__LINE__
;\

81 
¥e
 = 
out
.
	`°r
();\

83 
¥e
 +": ";

	)

85 
	#FAIL
(
°ri
)\

86 
	`MakePª
()\

87 
UnôTe°
::
	`PushFaûuª
(
¥e
 + 
°d
::
	`°rög
(
°ri
));\

88 i‡(
UnôTe°
::
	`GëRëu∫OnFaû
()Ë;

	)

90 
	#PASS
(
°ri
)\

91 
	`MakePª
();\

92 
UnôTe°
::
	`PushSuc˚ss
(
¥e
 + 
°d
::
	`°rög
(
°ri
));\

93 

	)

94 
	#as£πUnôTe°
()\

95 
UnôTe°
::
	`SñfCheck
();

	)

97 
	#as£πTrue
(
c⁄d
)\

98 i‡(
	`ã°_u∆ikñy
(!(
c⁄d
))){\

99 
	`FAIL
(#cond);\

101 
	`PASS
(#cond);\

102 }

	)

104 
	#as£πFÆ£
(
c⁄d
)\

105 i‡(
	`ã°_u∆ikñy
(
c⁄d
)){\

106 
	`FAIL
(#cond);\

108 
	`PASS
(#cond);\

109 }

	)

111 
	#as£πTrue_Primôive
(
c⁄d
, 
À·side
, 
rightside
)\

112 i‡(
	`ã°_u∆ikñy
(!(
c⁄d
))){\

113 
°d
::
°rög°ªam
 
unô_out
;\

114 
unô_out
 << #cond;\

115 
unô_out
 << ", Le· side: " << 
À·side
;\

116 
unô_out
 << ", Righàside: " << 
rightside
;\

117 
	`FAIL
(
unô_out
.
	`°r
());\

119 
	`PASS
(#cond);\

120 }

	)

123 
	#as£πNAN
(
ty≥
, 
⁄e
)\

125 
ty≥
 
vÆ
 = (ty≥)
⁄e
;\

126 
°d
::
°rög
 
	`œg
(#one);\

127 
œg
 += "ÇotáÇumber";\

128 i‡(
	`ã°_likñy
(
unôã°_isNAN
<
ty≥
>(
⁄e
))){\

129 
	`PASS
(
œg
)\

131 
	`FAIL
(
œg
)\

133 }

	)

135 
	#as£πFlﬂtEquÆs
(
⁄e
, 
two
)\

136 
	`as£πTrue
(
UnôTe°
::
	`_ÊﬂtsAªEquÆ
(
⁄e
, 
two
))

	)

138 
	#as£πEquÆs
(
⁄e
, 
two
)\

139 
	`as£πTrue
((
⁄e
Ë=(
two
))

	)

141 
	#as£πNŸEquÆs
(
⁄e
, 
two
)\

142 
	`as£πTrue
((
⁄e
Ë!(
two
))

	)

144 
	#as£πGª©îTh™
(
⁄e
, 
two
)\

145 
	`as£πTrue
((
⁄e
Ë> (
two
))

	)

147 
	#as£πGª©îTh™EquÆTo
(
⁄e
, 
two
)\

148 
	`as£πTrue
((
⁄e
Ë>(
two
))

	)

150 
	#as£πLessTh™
(
⁄e
, 
two
)\

151 
	`as£πTrue
((
⁄e
Ë< (
two
))

	)

153 
	#as£πLessTh™EquÆTo
(
⁄e
, 
two
)\

154 
	`as£πTrue
((
⁄e
Ë<(
two
))

	)

158 
	#as£πEquÆs_Primôive
(
⁄e
, 
two
)\

159 
	`as£πTrue_Primôive
((
⁄e
Ë=(
two
), o√,Åwo)

	)

161 
	#as£πNŸEquÆs_Primôive
(
⁄e
, 
two
)\

162 
	`as£πTrue_Primôive
((
⁄e
Ë!(
two
), o√,Åwo)

	)

164 
	#as£πGª©îTh™_Primôive
(
⁄e
, 
two
)\

165 
	`as£πTrue_Primôive
((
⁄e
Ë> (
two
), o√,Åwo)

	)

167 
	#as£πGª©îTh™EquÆTo_Primôive
(
⁄e
, 
two
)\

168 
	`as£πTrue_Primôive
((
⁄e
Ë>(
two
), o√,Åwo)

	)

170 
	#as£πLessTh™_Primôive
(
⁄e
, 
two
)\

171 
	`as£πTrue_Primôive
((
⁄e
Ë< (
two
), o√,Åwo)

	)

173 
	#as£πLessTh™EquÆTo_Primôive
(
⁄e
, 
two
)\

174 
	`as£πTrue_Primôive
((
⁄e
Ë<(
two
), o√,Åwo)

	)

176 
	#as£πNuŒ
(
⁄e
)\

177 
	`as£πTrue
(
⁄e
 =
NULL
);

	)

179 
	#as£πNŸNuŒ
(
⁄e
)\

180 
	`as£πTrue
(
⁄e
 !
NULL
);

	)

182 
	#as£πCSåögEquÆs
(
⁄e
, 
two
)\

183 i‡(
	`ã°_u∆ikñy
(
	`°rcmp
(
⁄e
, 
two
))){\

184 
	`FAIL
(
°d
::
	`°rög
(#one) + "==" + #two);\

186 
	`PASS
(
°d
::
	`°rög
(#one) + "==" + #two);\

187 }

	)

189 
	#as£πCSåögNŸEquÆs
(
⁄e
, 
two
)\

190 i‡(
	`ã°_u∆ikñy
(!
	`°rcmp
(
⁄e
, 
two
))){\

191 
	`FAIL
(
°d
::
	`°rög
(#one) + "!=" + #two);\

193 
	`PASS
(
°d
::
	`°rög
(#one) + "!=" + #two);\

194 }

	)

196 
	#as£πCSåögEquÆsW
(
⁄e
, 
two
)\

197 i‡(
	`ã°_u∆ikñy
(
	`wcscmp
(
⁄e
, 
two
))){\

198 
	`FAIL
(
°d
::
	`°rög
(#one) + "==" + #two);\

200 
	`PASS
(
°d
::
	`°rög
(#one) + "==" + #two);\

201 }

	)

203 
	#as£πCSåögNŸEquÆsW
(
⁄e
, 
two
)\

204 i‡(
	`ã°_u∆ikñy
(!
	`wcscmp
(
⁄e
, 
two
))){\

205 
	`FAIL
(
°d
::
	`°rög
(#one) + "!=" + #two);\

207 
	`PASS
(
°d
::
	`°rög
(#one) + "!=" + #two);\

208 }

	)

210 
	#as£πEx˚±i⁄
(
code
, 
exc
)\

212 
boﬁ
 
Áûed
 = 
Ál£
;\

213 
åy
 {\

214 
code
;\

215 } 
	`ˇtch
 (
exc
){\

216 
	`PASS
(
°d
::
	`°rög
(#exc) + " caught");\

217 
Áûed
 = 
åue
;\

219 i‡(
	`ã°_u∆ikñy
(!
Áûed
)){ 
	`FAIL
(
°d
::
	`°rög
(#exc) + "Çot caught");}\

220 }

	)

222 
	#echo
(
somëhög
)\

224 
°d
::
°rög°ªam
 
somë
;\

225 
somë
 << 
somëhög
;\

226 
UnôTe°
::
	`echo_
(
somë
.
	`°r
());\

227 }

	)

	@libjson/_internal/TestSuite/main.cpp

1 
	~<io°ªam
>

2 
	~<c°dlib
>

3 
	~"Te°Suôe.h
"

4 
	~"../../libjs⁄.h
"

6 
DoTe°s
();

7 
	$DoTe°s
(){

8 
Te°Suôe
::
	`Te°Såóms
();

9 
Te°Suôe
::
	`Te°VÆid©‹
();

10 
Te°Suôe
::
	`Te°Såög
();

11 
Te°Suôe
::
	`Te°C⁄vîãrs
();

12 #ifde‡
JSON_BINARY


13 
Te°Suôe
::
	`Te°Ba£64
();

16 
Te°Suôe
::
	`Te°Re„ªn˚Cou¡ög
();

17 
Te°Suôe
::
	`Te°C⁄°ru˘‹s
();

18 
Te°Suôe
::
	`Te°Assignög
();

19 
Te°Suôe
::
	`Te°EquÆôy
();

20 
Te°Suôe
::
	`Te°I√quÆôy
();

21 
Te°Suôe
::
	`Te°Chûdªn
();

22 
Te°Suôe
::
	`Te°Fun˘i⁄s
();

23 
Te°Suôe
::
	`Te°Iãøt‹s
();

24 
Te°Suôe
::
	`Te°In•e˘‹s
();

25 
Te°Suôe
::
	`Te°Name•a˚
();

26 #ifde‡
JSON_WRITE_PRIORITY


27 
Te°Suôe
::
	`Te°Wrôî
();

29 #ifde‡
JSON_COMMENTS


30 
Te°Suôe
::
	`Te°Commíts
();

32 #ifde‡
JSON_MUTEX_CALLBACKS


33 
Te°Suôe
::
	`Te°Muãx
();

34 
Te°Suôe
::
	`Te°Thªadög
();

36 
Te°Suôe
::
	`Te°Sh¨edSåög
();

37 
Te°Suôe
::
	`Te°FöÆ
();

38 
	}
}

40 #ifde‡
JSON_MEMORY_CALLBACKS


41 
	gmÆlocs
 = 0;

42 
	gªÆlocs
 = 0;

43 
	g‰ìs
 = 0;

44 
	gbyãs
 = 0;

47 
size_t
 
	gmaxByãs
 = 0;

48 
size_t
 
	gcuºítByãs
 = 0;

49 #ifde‡
JSON_LIBRARY


50 
	#MEMTYPE
 

	)

52 
	#MEMTYPE
 
size_t


	)

54 
	~<m≠
>

55 
	~<ve˘‹
>

56 
	g°d
::
m≠
<*, 
	gMEMTYPE
> 
	gmem_m≠pög
;

57 
	g°d
::
ve˘‹
<
size_t
> 
byãßŒoˇãd
;

59 * 
ã°mÆ
(
MEMTYPE
 
siz
);

60 * 
	$ã°mÆ
(
MEMTYPE
 
siz
){

61 ++
mÆlocs
;

62 
byãs
 +()
siz
;

63 
cuºítByãs
 +
siz
;

64 i‡(
cuºítByãs
 > 
maxByãs
) maxBytes = currentBytes;

65 
byãßŒoˇãd
.
	`push_back
(
cuºítByãs
);

67 * 
ªs
 = 
°d
::
	`mÆloc
(
siz
);

68 
mem_m≠pög
[
ªs
] = 
siz
;

69  
ªs
;

70 
	}
}

72 
ã°‰ì
(* 
±r
);

73 
	$ã°‰ì
(* 
±r
){

74 ++
‰ìs
;

76 
°d
::
m≠
<*, 
MEMTYPE
>::
ôî©‹
 
i
 = 
mem_m≠pög
.
	`föd
(
±r
);

77 i‡(
i
 !
mem_m≠pög
.
	`íd
()){

78 
cuºítByãs
 -
mem_m≠pög
[
±r
];

79 
mem_m≠pög
.
	`îa£
(
±r
);

82 
byãßŒoˇãd
.
	`push_back
(
cuºítByãs
);

84 
°d
::
	`‰ì
(
±r
);

85 
	}
}

87 * 
ã°ªÆ
(* 
±r
, 
MEMTYPE
 
siz
);

88 * 
	$ã°ªÆ
(* 
±r
, 
MEMTYPE
 
siz
){

89 ++
ªÆlocs
;

91 
°d
::
m≠
<*, 
MEMTYPE
>::
ôî©‹
 
i
 = 
mem_m≠pög
.
	`föd
(
±r
);

92 i‡(
i
 !
mem_m≠pög
.
	`íd
()){

93 
cuºítByãs
 -
mem_m≠pög
[
±r
];

94 
mem_m≠pög
.
	`îa£
(
±r
);

96 
cuºítByãs
 +
siz
;

97 i‡(
cuºítByãs
 > 
maxByãs
) maxBytes = currentBytes;

98 
byãßŒoˇãd
.
	`push_back
(
cuºítByãs
);

101 * 
ªs
 = 
°d
::
	`ªÆloc
(
±r
, 
siz
);

102 
mem_m≠pög
[
ªs
] = 
siz
;

103  
ªs
;

104 
	}
}

106 
doMemTe°s
();

107 
	$doMemTe°s
(){

108 #ifde‡
JSON_LIBRARY


109 
	`js⁄_ªgi°î_mem‹y_ˇŒbacks
(
ã°mÆ
, 
ã°ªÆ
, 
ã°‰ì
);

111 
libjs⁄
::
	`ªgi°î_mem‹y_ˇŒbacks
(
ã°mÆ
, 
ã°ªÆ
, 
ã°‰ì
);

113 
	`DoTe°s
();

114 
	`echo
("mÆlocs: " << 
mÆlocs
);

115 
	`echo
("‰ìs: " << 
‰ìs
);

116 
	`echo
("ªÆlocs: " << 
ªÆlocs
);

117 
	`echo
("byãs: " << 
byãs
 << " (" << ()(bytes / 1024) << " KB)");

118 
	`echo
("max byã†© on˚: " << 
maxByãs
 << " (" << ()(maxBytes / 1024) << " KB)");

119 
°d
::
ve˘‹
<
size_t
>::
ôî©‹
 
i
 = 
byãßŒoˇãd
.
	`begö
();

120 
°d
::
ve˘‹
<
size_t
>::
ôî©‹
 
e
 = 
byãßŒoˇãd
.
	`íd
();

121 
size_t
 
bbyãs
 = 0;

122 ; 
i
 !
e
; ++i){

123 
bbyãs
 +*
i
;

125 
bbyãs
 = (
size_t
)((()bbyãsË/ (()
byãßŒoˇãd
.
	`size
()));

126 
	`echo
("avg byã†© on˚: " << 
bbyãs
 << " (" << ()(bbytes / 1024) << " KB)");

127 
	`echo
("°û»Æloˇãd: " << 
cuºítByãs
 << " (" << ()(currentBytes / 1024) << " KB) (Global variables)");

128 
	`as£πEquÆs
(
mÆlocs
, 
‰ìs
);

129 
	}
}

132 
	~"RunTe°Suôe2.h
"

134 
	$maö
 () {

135 
UnôTe°
::
	`SèπTime
();

136 
Te°Suôe
::
	`Te°Sñf
();

138 
	`DoTe°s
();

140 #ifde‡
JSON_MEMORY_CALLBACKS


141 
	`doMemTe°s
();

144 
RunTe°Suôe2
::
	`RunTe°s
();

146 
UnôTe°
::
	`SaveTo
("out.html");

149 
	}
}

	@libjson/_internal/TestSuite2/BaseTest.h

1 #i‚de‡
JSON_TESTSUITE_BASETEST_H


2 
	#JSON_TESTSUITE_BASETEST_H


	)

4 
	~"../Te°Suôe/UnôTe°.h
"

5 
	~<°rög
>

7 
˛ass
 
	glibjs⁄_CodeCovîage
;

9 ˛as†
	cBa£Te°
 {

10 
	mpublic
:

11 
Ba£Te°
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
_«me
“ame), 
	$covîage
(0) {}

12 
vútuÆ
 ~
	$Ba£Te°
(){
	}
};

13 
vútuÆ
 
£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
){ 
UnôTe°
::
SëPªfix
(
_«me
 + "::" + methodName); }

14 
vútuÆ
 
	$ã¨Down
(){
	}
}

15 
	g¥Ÿe˘ed
:

16 c⁄° 
°d
::
°rög
 
_«me
;

17 
libjs⁄_CodeCovîage
 * 
	gcovîage
;

18 
	g¥iv©e
:

19 
Ba£Te°
(const BaseTest &);

20 
	gBa£Te°
 & 
	g›î©‹
=(c⁄° 
Ba£Te°
 &);

	@libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT.cpp

1 
	~"JSON_ASSERT.h
"

2 
	~"../../Sour˚/JSONDebug.h
"

4 #i‡
deföed
 
JSON_DEBUG


5 #i‚de‡
JSON_STDERROR


6 
js⁄_°rög
 
	gœ°
;

7 #ifde‡
JSON_LIBRARY


8 
	$ˇŒback
(c⁄° 
js⁄_ch¨
 * 
p
){ 
œ°
 =Ö; 
	}
}

10 
	$ˇŒback
(c⁄° 
js⁄_°rög
 & 
p
){ 
œ°
 =Ö; 
	}
}

15 c⁄° 
js⁄_°rög
 
	gÁû_c⁄°a
 = 
JSON_TEXT
("fail");

16 c⁄° 
js⁄_°rög
 
	gnuŒ_c⁄°a
 = 
JSON_TEXT
("");

17 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


18 
js⁄_îr‹_ˇŒback_t
 
	g‹igCÆlbacka
 = 
NULL
;

21 
	gã°JSONDebug_JSON_ASSERT
::
£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
){

22 
Ba£Te°
::
£tUp
(
mëhodName
);

23 #i‡
deföed
 
JSON_DEBUG


24 #i‚de‡
JSON_STDERROR


25 
	g‹igCÆlbacka
 = 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

26 
	gœ°
 = 
nuŒ_c⁄°a
;

31 
	gã°JSONDebug_JSON_ASSERT
::
	$ã¨Down
(){

32 
Ba£Te°
::
	`ã¨Down
();

33 #i‡
deföed
 
JSON_DEBUG


34 #i‚de‡
JSON_STDERROR


35 
JSONDebug
::
	`ªgi°î_ˇŒback
(
‹igCÆlbacka
);

38 
	}
}

44 
	gã°JSONDebug_JSON_ASSERT
::
	$ã°Pass
(){

45 #i‡
deföed
 
JSON_DEBUG


46 #i‚de‡
JSON_STDERROR


47 
	`JSON_ASSERT
(1 =1, 
Áû_c⁄°a
);

48 
	`as£πEquÆs
(
œ°
, 
nuŒ_c⁄°a
);

51 
	}
}

57 
	gã°JSONDebug_JSON_ASSERT
::
	$ã°Faû
(){

58 #i‡
deföed
 
JSON_DEBUG


59 #i‚de‡
JSON_STDERROR


60 
	`JSON_ASSERT
(1 =0, 
Áû_c⁄°a
);

61 
	`as£πEquÆs
(
œ°
, 
Áû_c⁄°a
);

64 
	}
}

	@libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT.h

1 #i‚de‡
JSON_TESTSUITE_JSON_DEBUG__JSON_ASSERT_H


2 
	#JSON_TESTSUITE_JSON_DEBUG__JSON_ASSERT_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONDebug_JSON_ASSERT
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONDebug_JSON_ASSERT
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
vútuÆ
 
	`£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
);

10 
vútuÆ
 
	`ã¨Down
();

11 
	`ã°Pass
();

12 
	`ã°Faû
();

13 
	}
};

	@libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT_SAFE.cpp

1 
	~"JSON_ASSERT_SAFE.h
"

2 
	~"../../Sour˚/JSONDebug.h
"

4 #i‡
deföed
 
JSON_DEBUG


5 #i‚de‡
JSON_STDERROR


6 
js⁄_°rög
 
	gœ°
;

7 #ifde‡
JSON_LIBRARY


8 
	$ˇŒback
(c⁄° 
js⁄_ch¨
 * 
p
){ 
œ°
 =Ö; 
	}
}

10 
	$ˇŒback
(c⁄° 
js⁄_°rög
 & 
p
){ 
œ°
 =Ö; 
	}
}

15 c⁄° 
js⁄_°rög
 
	gÁû_c⁄°
 = 
JSON_TEXT
("fail");

16 c⁄° 
js⁄_°rög
 
	gnuŒ_c⁄°
 = 
JSON_TEXT
("");

17 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


18 
js⁄_îr‹_ˇŒback_t
 
	g‹igCÆlback
 = 
NULL
;

21 
	gã°JSONDebug_JSON_ASSERT_SAFE
::
£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
){

22 
Ba£Te°
::
£tUp
(
mëhodName
);

23 #i‡
deföed
 
JSON_DEBUG


24 #i‚de‡
JSON_STDERROR


25 
	g‹igCÆlback
 = 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

26 
	gœ°
 = 
nuŒ_c⁄°
;

31 
	gã°JSONDebug_JSON_ASSERT_SAFE
::
	$ã¨Down
(){

32 
Ba£Te°
::
	`ã¨Down
();

33 #i‡
deföed
 
JSON_DEBUG


34 #i‚de‡
JSON_STDERROR


35 
JSONDebug
::
	`ªgi°î_ˇŒback
(
‹igCÆlback
);

38 
	}
}

44 
	gã°JSONDebug_JSON_ASSERT_SAFE
::
	$ã°Pass
(){

45 
i
 = 0;

46 
	`JSON_ASSERT_SAFE
(1 =1, 
Áû_c⁄°
, 
i
 = 1;);

47 
	`as£πEquÆs
(
i
, 0);

49 #i‡
deföed
 
JSON_DEBUG


50 #i‚de‡
JSON_STDERROR


51 
	`as£πEquÆs
(
œ°
, 
nuŒ_c⁄°
);

54 
	}
}

60 
	gã°JSONDebug_JSON_ASSERT_SAFE
::
	$ã°Faû
(){

61 
i
 = 0;

62 
	`JSON_ASSERT_SAFE
(1 =0, 
Áû_c⁄°
, 
i
 = 1;);

63 #i‡
	`deföed
(
JSON_SAFE
)

64 
	`as£πEquÆs
(
i
, 1);

66 
	`as£πEquÆs
(
i
, 0);

69 #i‡
deföed
 
JSON_DEBUG


70 #i‚de‡
JSON_STDERROR


71 
	`as£πEquÆs
(
œ°
, 
Áû_c⁄°
);

74 
	}
}

	@libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT_SAFE.h

1 #i‚de‡
JSON_TESTSUITE_JSON_DEBUG__JSON_ASSERT_SAFE_H


2 
	#JSON_TESTSUITE_JSON_DEBUG__JSON_ASSERT_SAFE_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONDebug_JSON_ASSERT_SAFE
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONDebug_JSON_ASSERT_SAFE
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
vútuÆ
 
	`£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
);

10 
vútuÆ
 
	`ã¨Down
();

11 
	`ã°Pass
();

12 
	`ã°Faû
();

13 
	}
};

	@libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL.cpp

1 
	~"JSON_FAIL.h
"

2 
	~"../../Sour˚/JSONDebug.h
"

4 #i‡
deföed
 
JSON_DEBUG


5 #i‚de‡
JSON_STDERROR


6 
js⁄_°rög
 
	gœ°
;

7 #ifde‡
JSON_LIBRARY


8 
	$ˇŒback
(c⁄° 
js⁄_ch¨
 * 
p
){ 
œ°
 =Ö; 
	}
}

10 
	$ˇŒback
(c⁄° 
js⁄_°rög
 & 
p
){ 
œ°
 =Ö; 
	}
}

15 c⁄° 
js⁄_°rög
 
	gÁû_c⁄°f
 = 
JSON_TEXT
("fail");

16 c⁄° 
js⁄_°rög
 
	gnuŒ_c⁄°f
 = 
JSON_TEXT
("");

17 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


18 
js⁄_îr‹_ˇŒback_t
 
	g‹igCÆlbackf
 = 
NULL
;

21 
	gã°JSONDebug_JSON_FAIL
::
£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
){

22 
Ba£Te°
::
£tUp
(
mëhodName
);

23 #i‡
deföed
 
JSON_DEBUG


24 #i‚de‡
JSON_STDERROR


25 
	g‹igCÆlbackf
 = 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

26 
	gœ°
 = 
nuŒ_c⁄°f
;

31 
	gã°JSONDebug_JSON_FAIL
::
	$ã¨Down
(){

32 
Ba£Te°
::
	`ã¨Down
();

33 #i‡
deföed
 
JSON_DEBUG


34 #i‚de‡
JSON_STDERROR


35 
JSONDebug
::
	`ªgi°î_ˇŒback
(
‹igCÆlbackf
);

38 
	}
}

44 
	gã°JSONDebug_JSON_FAIL
::
	$ã°Faû
(){

45 #i‡
deföed
 
JSON_DEBUG


46 #i‚de‡
JSON_STDERROR


47 
	`JSON_FAIL
(
Áû_c⁄°f
);

48 
	`as£πEquÆs
(
œ°
, 
Áû_c⁄°f
);

51 
	}
}

	@libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL.h

1 #i‚de‡
JSON_TESTSUITE_JSON_DEBUG__JSON_FAIL_H


2 
	#JSON_TESTSUITE_JSON_DEBUG__JSON_FAIL_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONDebug_JSON_FAIL
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONDebug_JSON_FAIL
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
vútuÆ
 
	`£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
);

10 
vútuÆ
 
	`ã¨Down
();

11 
	`ã°Faû
();

12 
	}
};

	@libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL_SAFE.cpp

1 
	~"JSON_FAIL_SAFE.h
"

2 
	~"../../Sour˚/JSONDebug.h
"

4 #i‡
deföed
 
JSON_DEBUG


5 #i‚de‡
JSON_STDERROR


6 
js⁄_°rög
 
	gœ°
;

7 #ifde‡
JSON_LIBRARY


8 
	$ˇŒback
(c⁄° 
js⁄_ch¨
 * 
p
){ 
œ°
 =Ö; 
	}
}

10 
	$ˇŒback
(c⁄° 
js⁄_°rög
 & 
p
){ 
œ°
 =Ö; 
	}
}

15 c⁄° 
js⁄_°rög
 
	gÁû_c⁄°fs
 = 
JSON_TEXT
("fail");

16 c⁄° 
js⁄_°rög
 
	gnuŒ_c⁄°fs
 = 
JSON_TEXT
("");

17 #i‡
deföed
 
JSON_DEBUG
 || deföed 
JSON_SAFE


18 
js⁄_îr‹_ˇŒback_t
 
	g‹igCÆlbackfs
 = 
NULL
;

21 
	gã°JSONDebug_JSON_FAIL_SAFE
::
£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
){

22 
Ba£Te°
::
£tUp
(
mëhodName
);

23 #i‡
deföed
 
JSON_DEBUG


24 #i‚de‡
JSON_STDERROR


25 
	g‹igCÆlbackfs
 = 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

26 
	gœ°
 = 
nuŒ_c⁄°fs
;

31 
	gã°JSONDebug_JSON_FAIL_SAFE
::
	$ã¨Down
(){

32 
Ba£Te°
::
	`ã¨Down
();

33 #i‡
deföed
 
JSON_DEBUG


34 #i‚de‡
JSON_STDERROR


35 
JSONDebug
::
	`ªgi°î_ˇŒback
(
‹igCÆlbackfs
);

38 
	}
}

44 
	gã°JSONDebug_JSON_FAIL_SAFE
::
	$ã°Faû
(){

45 
i
 = 0;

46 
	`JSON_FAIL_SAFE
(
Áû_c⁄°fs
, 
i
 = 1;);

47 #i‡
	`deföed
(
JSON_SAFE
)

48 
	`as£πEquÆs
(
i
, 1);

50 
	`as£πEquÆs
(
i
, 0);

53 #i‡
deföed
 
JSON_DEBUG


54 #i‚de‡
JSON_STDERROR


55 
	`as£πEquÆs
(
œ°
, 
Áû_c⁄°fs
);

58 
	}
}

	@libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL_SAFE.h

1 #i‚de‡
JSON_TESTSUITE_JSON_DEBUG__JSON_FAIL_SAFE_H


2 
	#JSON_TESTSUITE_JSON_DEBUG__JSON_FAIL_SAFE_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONDebug_JSON_FAIL_SAFE
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONDebug_JSON_FAIL_SAFE
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
vútuÆ
 
	`£tUp
(c⁄° 
°d
::
°rög
 & 
mëhodName
);

10 
vútuÆ
 
	`ã¨Down
();

11 
	`ã°Faû
();

12 
	}
};

	@libjson/_internal/TestSuite2/JSONGlobals/jsonSingleton.cpp

1 
	~"js⁄SögÀt⁄.h
"

2 
	~"../../Sour˚/JSONGlobÆs.h
"

4 
js⁄_globÆ_de˛
(
°d
::
°rög
, 
WITHVALUE
, "myvalue");

5 
js⁄_globÆ_de˛
(
°d
::
°rög
, 
WITHOUTVALUE
, );

7 
	gã°JSONGlobÆs__js⁄SögÀt⁄
::
	$ã°VÆue
(){

8 
°d
::
°rög
 * 
p1
 = &
js⁄SögÀt⁄WITHVALUE
::
	`gëVÆue
();

9 
°d
::
°rög
 * 
p2
 = &
	`js⁄_globÆ
(
WITHVALUE
);

10 
	`as£πEquÆs
(
p1
, 
p2
);

11 
	`as£πEquÆs
(
	`js⁄_globÆ
(
WITHVALUE
), "myvalue");

12 
	`as£πEquÆs
(
js⁄SögÀt⁄WITHVALUE
::
	`gëVÆue
(), "myvalue");

13 
	}
}

15 
	gã°JSONGlobÆs__js⁄SögÀt⁄
::
	$ã°NoVÆue
(){

16 
°d
::
°rög
 * 
p1
 = &
js⁄SögÀt⁄WITHOUTVALUE
::
	`gëVÆue
();

17 
°d
::
°rög
 * 
p2
 = &
	`js⁄_globÆ
(
WITHOUTVALUE
);

18 
	`as£πEquÆs
(
p1
, 
p2
);

19 
	`as£πEquÆs
(
	`js⁄_globÆ
(
WITHOUTVALUE
), "");

20 
	`as£πEquÆs
(
js⁄SögÀt⁄WITHOUTVALUE
::
	`gëVÆue
(), "");

21 
	}
}

	@libjson/_internal/TestSuite2/JSONGlobals/jsonSingleton.h

1 #i‚de‡
JSON_TESTSUITE_JSON_GLOBALS__JSON_SINGLETON_H


2 
	#JSON_TESTSUITE_JSON_GLOBALS__JSON_SINGLETON_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONGlobÆs__js⁄SögÀt⁄
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONGlobÆs__js⁄SögÀt⁄
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°VÆue
();

10 
	`ã°NoVÆue
();

11 
	}
};

	@libjson/_internal/TestSuite2/JSONValidator/Resources/validyMacros.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR_RESOURCES_VALIDITY_MACROS_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR_RESOURCES_VALIDITY_MACROS_H


	)

4 
	~"../../../../JSONO±i⁄s.h
"

6 #ifde‡
JSON_VALIDATE


8 
	#as£πVÆid
(
x
, 
mëhod
, 
√xtch¨
)\

10 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

11 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

12 
	`as£πTrue
(
JSONVÆid©‹
::
	`mëhod
(
±r
Ë&& ((*±r)==
	`JSON_TEXT
(
√xtch¨
)));\

13 }

	)

15 
	#as£πNŸVÆid
(
x
, 
mëhod
, 
√xtch¨
)\

17 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

18 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

19 
	`as£πTrue
(!
JSONVÆid©‹
::
	`mëhod
(
±r
Ë|| ((*±r)!=
	`JSON_TEXT
(
√xtch¨
)));\

20 }

	)

22 #ifde‡
JSON_SECURITY_MAX_NEST_LEVEL


23 
	#as£πVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)\

25 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

26 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

27 
	`as£πTrue
(
JSONVÆid©‹
::
	`mëhod
(
±r
, 1Ë&& ((*±r)==
	`JSON_TEXT
(
√xtch¨
)));\

28 }

	)

30 
	#as£πNŸVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)\

32 
js⁄_°rög
 
	`ãmp
(
	`JSON_TEXT
(
x
));\

33 c⁄° 
js⁄_ch¨
 * 
±r
 = 
ãmp
.
	`c_°r
();\

34 
	`as£πTrue
(!
JSONVÆid©‹
::
	`mëhod
(
±r
, 1Ë|| ((*±r)!=
	`JSON_TEXT
(
√xtch¨
)));\

35 }

	)

37 
	#as£πVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
Ë
	`as£πVÆid
(x, mëhod,Çextch¨)

	)

38 
	#as£πNŸVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
Ë
	`as£πNŸVÆid
(x, mëhod,Çextch¨)

	)

42 
	#as£πVÆid
(
x
, 
mëhod
, 
√xtch¨
)

	)

43 
	#as£πNŸVÆid
(
x
, 
mëhod
, 
√xtch¨
)

	)

44 
	#as£πVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)

	)

45 
	#as£πNŸVÆid_Dïth
(
x
, 
mëhod
, 
√xtch¨
)

	)

	@libjson/_internal/TestSuite2/JSONValidator/isValidArray.cpp

10 
	~"isVÆidAºay.h
"

	@libjson/_internal/TestSuite2/JSONValidator/isValidArray.h

	@libjson/_internal/TestSuite2/JSONValidator/isValidMember.cpp

1 
	~"isVÆidMembî.h
"

2 
	~"Resour˚s/vÆidyMa¸os.h
"

3 
	~"../../Sour˚/JSONVÆid©‹.h
"

21 
	gã°JSONVÆid©‹__isVÆidMembî
::
	$ã°Membîs
(){

22 #ifde‡
JSON_VALIDATE


23 
	`as£πVÆid_Dïth
("åue,", 
isVÆidMembî
, ',');

24 
	`as£πVÆid_Dïth
("Ál£,", 
isVÆidMembî
, ',');

25 
	`as£πVÆid_Dïth
("nuŒ,", 
isVÆidMembî
, ',');

27 
	}
}

33 
	gã°JSONVÆid©‹__isVÆidMembî
::
	$ã°Såi˘
(){

34 #ifde‡
JSON_VALIDATE


35 #ifde‡
JSON_STRICT


36 
	`as£πNŸVÆid_Dïth
("TRUE,", 
isVÆidMembî
, ',');

37 
	`as£πNŸVÆid_Dïth
("FALSE,", 
isVÆidMembî
, ',');

38 
	`as£πNŸVÆid_Dïth
("NULL,", 
isVÆidMembî
, ',');

39 
	`as£πNŸVÆid_Dïth
(",", 
isVÆidMembî
, ',');

42 
	}
}

48 
	gã°JSONVÆid©‹__isVÆidMembî
::
	$ã°NŸSåi˘
(){

49 #ifde‡
JSON_VALIDATE


50 #i‚de‡
JSON_STRICT


51 
	`as£πVÆid_Dïth
("TRUE,", 
isVÆidMembî
, ',');

52 
	`as£πVÆid_Dïth
("FALSE,", 
isVÆidMembî
, ',');

53 
	`as£πVÆid_Dïth
("NULL,", 
isVÆidMembî
, ',');

54 
	`as£πVÆid_Dïth
(",", 
isVÆidMembî
, ',');

57 
	}
}

63 
	gã°JSONVÆid©‹__isVÆidMembî
::
	$ã°NŸMembîs
(){

64 #ifde‡
JSON_VALIDATE


65 
	`as£πNŸVÆid_Dïth
("åu,", 
isVÆidMembî
, ',');

66 
	`as£πNŸVÆid_Dïth
("Áls,", 
isVÆidMembî
, ',');

67 
	`as£πNŸVÆid_Dïth
("nul,", 
isVÆidMembî
, ',');

68 
	`as£πNŸVÆid_Dïth
("", 
isVÆidMembî
, ',');

69 
	`as£πNŸVÆid_Dïth
("xxx,", 
isVÆidMembî
, ',');

70 
	`as£πNŸVÆid_Dïth
("n⁄£n£,", 
isVÆidMembî
, ',');

72 
	}
}

78 
	gã°JSONVÆid©‹__isVÆidMembî
::
	$ã°SuddíEnd
(){

79 #ifde‡
JSON_VALIDATE


80 
	`as£πNŸVÆid_Dïth
("", 
isVÆidMembî
, ',');

83 
	`as£πNŸVÆid_Dïth
("åue", 
isVÆidMembî
, ',');

84 
	`as£πNŸVÆid_Dïth
("Ál£", 
isVÆidMembî
, ',');

85 
	`as£πNŸVÆid_Dïth
("nuŒ", 
isVÆidMembî
, ',');

88 
	`as£πNŸVÆid_Dïth
("TRUE", 
isVÆidMembî
, ',');

89 
	`as£πNŸVÆid_Dïth
("FALSE", 
isVÆidMembî
, ',');

90 
	`as£πNŸVÆid_Dïth
("NULL", 
isVÆidMembî
, ',');

93 
	`as£πNŸVÆid_Dïth
("åu", 
isVÆidMembî
, ',');

94 
	`as£πNŸVÆid_Dïth
("Áls", 
isVÆidMembî
, ',');

95 
	`as£πNŸVÆid_Dïth
("nul", 
isVÆidMembî
, ',');

96 
	`as£πNŸVÆid_Dïth
("", 
isVÆidMembî
, ',');

97 
	`as£πNŸVÆid_Dïth
("xxx", 
isVÆidMembî
, ',');

98 
	`as£πNŸVÆid_Dïth
("n⁄£n£", 
isVÆidMembî
, ',');

99 
	`as£πNŸVÆid_Dïth
("1234", 
isVÆidMembî
, ',');

101 
	}
}

	@libjson/_internal/TestSuite2/JSONValidator/isValidMember.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_MEMBER_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_MEMBER_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONVÆid©‹__isVÆidMembî
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONVÆid©‹__isVÆidMembî
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Membîs
();

10 
	`ã°Såi˘
();

11 
	`ã°NŸSåi˘
();

12 
	`ã°NŸMembîs
();

13 
	`ã°SuddíEnd
();

14 
	}
};

	@libjson/_internal/TestSuite2/JSONValidator/isValidNamedObject.cpp

10 
	~"isVÆidNamedObje˘.h
"

	@libjson/_internal/TestSuite2/JSONValidator/isValidNamedObject.h

	@libjson/_internal/TestSuite2/JSONValidator/isValidNumber.cpp

1 
	~"isVÆidNumbî.h
"

2 
	~"Resour˚s/vÆidyMa¸os.h
"

3 
	~"../../Sour˚/JSONVÆid©‹.h
"

22 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Posôive
(){

23 #ifde‡
JSON_VALIDATE


24 
	`as£πVÆid
("123,\"√xt\"", 
isVÆidNumbî
, ',');

25 
	`as£πVÆid
("12.3,\"√xt\"", 
isVÆidNumbî
, ',');

26 
	`as£πVÆid
("0.123,\"√xt\"", 
isVÆidNumbî
, ',');

27 
	`as£πVÆid
("0,\"√xt\"", 
isVÆidNumbî
, ',');

28 
	`as£πVÆid
("0.,\"√xt\"", 
isVÆidNumbî
, ',');

29 
	`as£πVÆid
("1.,\"√xt\"", 
isVÆidNumbî
, ',');

30 
	`as£πVÆid
("1,\"√xt\"", 
isVÆidNumbî
, ',');

31 
	`as£πVÆid
("0.0,\"√xt\"", 
isVÆidNumbî
, ',');

32 
	`as£πVÆid
("1.0,\"√xt\"", 
isVÆidNumbî
, ',');

33 
	`as£πVÆid
("1.01,\"√xt\"", 
isVÆidNumbî
, ',');

36 
	}
}

42 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Neg©ive
(){

43 #ifde‡
JSON_VALIDATE


44 
	`as£πVÆid
("-123,\"√xt\"", 
isVÆidNumbî
, ',');

45 
	`as£πVÆid
("-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

46 
	`as£πVÆid
("-0.123,\"√xt\"", 
isVÆidNumbî
, ',');

47 
	`as£πVÆid
("-0,\"√xt\"", 
isVÆidNumbî
, ',');

48 
	`as£πVÆid
("-0.,\"√xt\"", 
isVÆidNumbî
, ',');

49 
	`as£πVÆid
("-1,\"√xt\"", 
isVÆidNumbî
, ',');

50 
	`as£πVÆid
("-1.,\"√xt\"", 
isVÆidNumbî
, ',');

51 
	`as£πVÆid
("-0.0,\"√xt\"", 
isVÆidNumbî
, ',');

52 
	`as£πVÆid
("-1.0,\"√xt\"", 
isVÆidNumbî
, ',');

53 
	`as£πVÆid
("-1.01,\"√xt\"", 
isVÆidNumbî
, ',');

55 
	}
}

61 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Posôive_Scõ¡ificNŸ©i⁄
(){

62 #ifde‡
JSON_VALIDATE


63 
	`as£πVÆid
("0e123,\"√xt\"", 
isVÆidNumbî
, ',');

64 
	`as£πNŸVÆid
("0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

65 
	`as£πVÆid
("1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

66 
	`as£πNŸVÆid
("1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

67 
	`as£πVÆid
("1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

68 
	`as£πNŸVÆid
("1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

70 
	`as£πVÆid
("0e2,\"√xt\"", 
isVÆidNumbî
, ',');

71 
	`as£πVÆid
("1e2,\"√xt\"", 
isVÆidNumbî
, ',');

72 
	`as£πVÆid
("0.e2,\"√xt\"", 
isVÆidNumbî
, ',');

73 
	`as£πVÆid
("1.e2,\"√xt\"", 
isVÆidNumbî
, ',');

74 
	`as£πVÆid
("0.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

75 
	`as£πVÆid
("1.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

77 
	}
}

83 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Neg©ive_Scõ¡ificNŸ©i⁄
(){

84 #ifde‡
JSON_VALIDATE


85 
	`as£πVÆid
("-0e123,\"√xt\"", 
isVÆidNumbî
, ',');

86 
	`as£πNŸVÆid
("-0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

87 
	`as£πVÆid
("-1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

88 
	`as£πNŸVÆid
("-1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

89 
	`as£πVÆid
("-1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

90 
	`as£πNŸVÆid
("-1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

92 
	`as£πVÆid
("-0e2,\"√xt\"", 
isVÆidNumbî
, ',');

93 
	`as£πVÆid
("-1e2,\"√xt\"", 
isVÆidNumbî
, ',');

94 
	`as£πVÆid
("-0.e2,\"√xt\"", 
isVÆidNumbî
, ',');

95 
	`as£πVÆid
("-1.e2,\"√xt\"", 
isVÆidNumbî
, ',');

96 
	`as£πVÆid
("-0.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

97 
	`as£πVÆid
("-1.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

99 
	}
}

105 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
(){

106 #ifde‡
JSON_VALIDATE


107 
	`as£πVÆid
("0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

108 
	`as£πVÆid
("0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

109 
	`as£πNŸVÆid
("0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

110 
	`as£πNŸVÆid
("0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

111 
	`as£πVÆid
("1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

112 
	`as£πVÆid
("1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

113 
	`as£πNŸVÆid
("1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

114 
	`as£πNŸVÆid
("1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

115 
	`as£πVÆid
("1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

116 
	`as£πVÆid
("1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

117 
	`as£πNŸVÆid
("1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

118 
	`as£πNŸVÆid
("1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

120 
	`as£πVÆid
("0e2,\"√xt\"", 
isVÆidNumbî
, ',');

121 
	`as£πVÆid
("1e2,\"√xt\"", 
isVÆidNumbî
, ',');

122 
	`as£πVÆid
("0.e2,\"√xt\"", 
isVÆidNumbî
, ',');

123 
	`as£πVÆid
("1.e2,\"√xt\"", 
isVÆidNumbî
, ',');

124 
	`as£πVÆid
("0.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

125 
	`as£πVÆid
("1.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

127 
	}
}

133 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
(){

134 #ifde‡
JSON_VALIDATE


135 
	`as£πVÆid
("-0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

136 
	`as£πVÆid
("-0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

137 
	`as£πNŸVÆid
("-0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

138 
	`as£πNŸVÆid
("-0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

139 
	`as£πVÆid
("-0.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

140 
	`as£πVÆid
("-0.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

141 
	`as£πVÆid
("-1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

142 
	`as£πVÆid
("-1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

143 
	`as£πNŸVÆid
("-1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

144 
	`as£πNŸVÆid
("-1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

145 
	`as£πVÆid
("-0.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

146 
	`as£πVÆid
("-0.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

147 
	`as£πVÆid
("-1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

148 
	`as£πVÆid
("-1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

149 
	`as£πNŸVÆid
("-1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

150 
	`as£πNŸVÆid
("-1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

152 
	`as£πVÆid
("-0e-2,\"√xt\"", 
isVÆidNumbî
, ',');

153 
	`as£πVÆid
("-1e-2,\"√xt\"", 
isVÆidNumbî
, ',');

154 
	`as£πVÆid
("-0.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

155 
	`as£πVÆid
("-1.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

156 
	`as£πVÆid
("-0.0e-2,\"√xt\"", 
isVÆidNumbî
, ',');

157 
	`as£πVÆid
("-1.0e-2,\"√xt\"", 
isVÆidNumbî
, ',');

158 
	`as£πVÆid
("-0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

159 
	`as£πVÆid
("-1e+2,\"√xt\"", 
isVÆidNumbî
, ',');

160 
	`as£πVÆid
("-0.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

161 
	`as£πVÆid
("-1.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

162 
	`as£πVÆid
("-0.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

163 
	`as£πVÆid
("-1.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

165 
	}
}

172 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°Såi˘
(){

173 #ifde‡
JSON_VALIDATE


174 #ifde‡
JSON_STRICT


175 
	`as£πNŸVÆid
("00,\"√xt\"", 
isVÆidNumbî
, ',');

176 
	`as£πNŸVÆid
("00.01,\"√xt\"", 
isVÆidNumbî
, ',');

177 
	`as£πNŸVÆid
(".01,\"√xt\"", 
isVÆidNumbî
, ',');

178 
	`as£πNŸVÆid
("-.01,\"√xt\"", 
isVÆidNumbî
, ',');

179 
	`as£πNŸVÆid
("+123,\"√xt\"", 
isVÆidNumbî
, ',');

180 
	`as£πNŸVÆid
("+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

181 
	`as£πNŸVÆid
("+0.123,\"√xt\"", 
isVÆidNumbî
, ',');

182 
	`as£πNŸVÆid
("+0e123,\"√xt\"", 
isVÆidNumbî
, ',');

183 
	`as£πNŸVÆid
("+0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

184 
	`as£πNŸVÆid
("+0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

185 
	`as£πNŸVÆid
("+1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

186 
	`as£πNŸVÆid
("+1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

187 
	`as£πNŸVÆid
("+1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

188 
	`as£πNŸVÆid
("+1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

189 
	`as£πNŸVÆid
("+1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

190 
	`as£πNŸVÆid
("+1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

191 
	`as£πNŸVÆid
("+0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

192 
	`as£πNŸVÆid
("+0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

193 
	`as£πNŸVÆid
("+0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

194 
	`as£πNŸVÆid
("+1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

195 
	`as£πNŸVÆid
("+1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

196 
	`as£πNŸVÆid
("+1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

197 
	`as£πNŸVÆid
("+1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

198 
	`as£πNŸVÆid
("+1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

199 
	`as£πNŸVÆid
("+1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

201 
	`as£πNŸVÆid
("0x12FF,\"√xt\"", 
isVÆidNumbî
, ',');

202 
	`as£πVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

204 
	`as£πNŸVÆid
("0xABCD,\"√xt\"", 
isVÆidNumbî
, ',');

205 
	`as£πNŸVÆid
("0124,\"√xt\"", 
isVÆidNumbî
, ',');

206 
	`as£πNŸVÆid
("+1,\"√xt\"", 
isVÆidNumbî
, ',');

207 
	`as£πNŸVÆid
("+1.,\"√xt\"", 
isVÆidNumbî
, ',');

208 
	`as£πNŸVÆid
("+0.0,\"√xt\"", 
isVÆidNumbî
, ',');

209 
	`as£πNŸVÆid
("+1.0,\"√xt\"", 
isVÆidNumbî
, ',');

210 
	`as£πNŸVÆid
("+0e2,\"√xt\"", 
isVÆidNumbî
, ',');

211 
	`as£πNŸVÆid
("+1e2,\"√xt\"", 
isVÆidNumbî
, ',');

212 
	`as£πNŸVÆid
("+0.e2,\"√xt\"", 
isVÆidNumbî
, ',');

213 
	`as£πNŸVÆid
("+1.e2,\"√xt\"", 
isVÆidNumbî
, ',');

214 
	`as£πNŸVÆid
("+0.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

215 
	`as£πNŸVÆid
("+1.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

216 
	`as£πNŸVÆid
("+0e-2,\"√xt\"", 
isVÆidNumbî
, ',');

217 
	`as£πNŸVÆid
("+1e-2,\"√xt\"", 
isVÆidNumbî
, ',');

218 
	`as£πNŸVÆid
("+0.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

219 
	`as£πNŸVÆid
("+1.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

220 
	`as£πNŸVÆid
("+0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

221 
	`as£πNŸVÆid
("+1e+2,\"√xt\"", 
isVÆidNumbî
, ',');

222 
	`as£πNŸVÆid
("+0.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

223 
	`as£πNŸVÆid
("+1.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

224 
	`as£πNŸVÆid
("+0.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

225 
	`as£πNŸVÆid
("+1.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

227 
	`as£πNŸVÆid
("1e-0123,\"√xt\"", 
isVÆidNumbî
, ',');

230 
	}
}

237 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°NŸSåi˘
(){

238 #ifde‡
JSON_VALIDATE


239 #i‚de‡
JSON_STRICT


240 
	`as£πVÆid
("00,\"√xt\"", 
isVÆidNumbî
, ',');

241 
	`as£πVÆid
("00.01,\"√xt\"", 
isVÆidNumbî
, ',');

242 
	`as£πVÆid
(".01,\"√xt\"", 
isVÆidNumbî
, ',');

243 
	`as£πVÆid
("-.01,\"√xt\"", 
isVÆidNumbî
, ',');

244 
	`as£πVÆid
("+123,\"√xt\"", 
isVÆidNumbî
, ',');

245 
	`as£πVÆid
("+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

246 
	`as£πVÆid
("+0.123,\"√xt\"", 
isVÆidNumbî
, ',');

247 
	`as£πVÆid
("+0,\"√xt\"", 
isVÆidNumbî
, ',');

248 
	`as£πVÆid
("+0.,\"√xt\"", 
isVÆidNumbî
, ',');

249 
	`as£πVÆid
("+0e123,\"√xt\"", 
isVÆidNumbî
, ',');

250 
	`as£πVÆid
("+0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

251 
	`as£πVÆid
("+0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

252 
	`as£πVÆid
("+1.e123,\"√xt\"", 
isVÆidNumbî
, ',');

253 
	`as£πVÆid
("+1.e-123,\"√xt\"", 
isVÆidNumbî
, ',');

254 
	`as£πVÆid
("+1.e+123,\"√xt\"", 
isVÆidNumbî
, ',');

255 
	`as£πVÆid
("+1.0e123,\"√xt\"", 
isVÆidNumbî
, ',');

256 
	`as£πVÆid
("+1.0e-123,\"√xt\"", 
isVÆidNumbî
, ',');

257 
	`as£πVÆid
("+1.0e+123,\"√xt\"", 
isVÆidNumbî
, ',');

258 
	`as£πVÆid
("+0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

259 
	`as£πVÆid
("+0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

260 
	`as£πVÆid
("+0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

261 
	`as£πVÆid
("+1.e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

262 
	`as£πVÆid
("+1.e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

263 
	`as£πVÆid
("+1.e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

264 
	`as£πVÆid
("+1.0e12.3,\"√xt\"", 
isVÆidNumbî
, ',');

265 
	`as£πVÆid
("+1.0e-12.3,\"√xt\"", 
isVÆidNumbî
, ',');

266 
	`as£πVÆid
("+1.0e+12.3,\"√xt\"", 
isVÆidNumbî
, ',');

268 
	`as£πVÆid
("0x12FF,\"√xt\"", 
isVÆidNumbî
, ',');

269 #ifde‡
JSON_OCTAL


270 
	`as£πNŸVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

271 
	`as£πVÆid
("0123,\"√xt\"", 
isVÆidNumbî
, ',');

272 
	`as£πNŸVÆid
("-0128,\"√xt\"", 
isVÆidNumbî
, ',');

273 
	`as£πVÆid
("-0123,\"√xt\"", 
isVÆidNumbî
, ',');

275 
	`as£πVÆid
("0128,\"√xt\"", 
isVÆidNumbî
, ',');

276 
	`as£πVÆid
("0123,\"√xt\"", 
isVÆidNumbî
, ',');

277 
	`as£πVÆid
("-0128,\"√xt\"", 
isVÆidNumbî
, ',');

278 
	`as£πVÆid
("-0123,\"√xt\"", 
isVÆidNumbî
, ',');

282 
	`as£πVÆid
("0xABCD,\"√xt\"", 
isVÆidNumbî
, ',');

283 
	`as£πVÆid
("0124,\"√xt\"", 
isVÆidNumbî
, ',');

284 
	`as£πVÆid
("+1,\"√xt\"", 
isVÆidNumbî
, ',');

285 
	`as£πVÆid
("+1.,\"√xt\"", 
isVÆidNumbî
, ',');

286 
	`as£πVÆid
("+0.0,\"√xt\"", 
isVÆidNumbî
, ',');

287 
	`as£πVÆid
("+1.0,\"√xt\"", 
isVÆidNumbî
, ',');

288 
	`as£πVÆid
("+0e2,\"√xt\"", 
isVÆidNumbî
, ',');

289 
	`as£πVÆid
("+1e2,\"√xt\"", 
isVÆidNumbî
, ',');

290 
	`as£πVÆid
("+0.e2,\"√xt\"", 
isVÆidNumbî
, ',');

291 
	`as£πVÆid
("+1.e2,\"√xt\"", 
isVÆidNumbî
, ',');

292 
	`as£πVÆid
("+0.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

293 
	`as£πVÆid
("+1.0e2,\"√xt\"", 
isVÆidNumbî
, ',');

294 
	`as£πVÆid
("+0e-2,\"√xt\"", 
isVÆidNumbî
, ',');

295 
	`as£πVÆid
("+1e-2,\"√xt\"", 
isVÆidNumbî
, ',');

296 
	`as£πVÆid
("+0.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

297 
	`as£πVÆid
("+1.e-2,\"√xt\"", 
isVÆidNumbî
, ',');

298 
	`as£πVÆid
("+0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

299 
	`as£πVÆid
("+1e+2,\"√xt\"", 
isVÆidNumbî
, ',');

300 
	`as£πVÆid
("+0.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

301 
	`as£πVÆid
("+1.e+2,\"√xt\"", 
isVÆidNumbî
, ',');

302 
	`as£πVÆid
("+0.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

303 
	`as£πVÆid
("+1.0e+2,\"√xt\"", 
isVÆidNumbî
, ',');

305 
	`as£πVÆid
("1e-0123,\"√xt\"", 
isVÆidNumbî
, ',');

308 
	}
}

315 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°NŸNumbîs
(){

316 #ifde‡
JSON_VALIDATE


317 
	`as£πNŸVÆid
("-.,\"√xt\"", 
isVÆidNumbî
, ',');

318 
	`as£πNŸVÆid
("-e,\"√xt\"", 
isVÆidNumbî
, ',');

319 
	`as£πNŸVÆid
("0xABCDv,\"√xt\"", 
isVÆidNumbî
, ',');

320 
	`as£πNŸVÆid
("001234,\"√xt\"", 
isVÆidNumbî
, ',');

321 
	`as£πNŸVÆid
("09124,\"√xt\"", 
isVÆidNumbî
, ',');

322 
	`as£πNŸVÆid
("0no,\"√xt\"", 
isVÆidNumbî
, ',');

323 
	`as£πNŸVÆid
("no,\"√xt\"", 
isVÆidNumbî
, ',');

324 
	`as£πNŸVÆid
("n1234,\"√xt\"", 
isVÆidNumbî
, ',');

325 
	`as£πNŸVÆid
("12no,\"√xt\"", 
isVÆidNumbî
, ',');

326 
	`as£πNŸVÆid
("0í5,\"√xt\"", 
isVÆidNumbî
, ',');

328 
	}
}

335 
	gã°JSONVÆid©‹__isVÆidNumbî
::
	$ã°SuddíEnd
(){

336 #ifde‡
JSON_VALIDATE


337 
	`as£πNŸVÆid
("", 
isVÆidNumbî
, ',');

340 
	`as£πNŸVÆid
("123", 
isVÆidNumbî
, ',');

341 
	`as£πNŸVÆid
("12.3", 
isVÆidNumbî
, ',');

342 
	`as£πNŸVÆid
("0.123", 
isVÆidNumbî
, ',');

343 
	`as£πNŸVÆid
("0", 
isVÆidNumbî
, ',');

344 
	`as£πNŸVÆid
("0.", 
isVÆidNumbî
, ',');

345 
	`as£πNŸVÆid
("1.", 
isVÆidNumbî
, ',');

346 
	`as£πNŸVÆid
("1", 
isVÆidNumbî
, ',');

347 
	`as£πNŸVÆid
("0.0", 
isVÆidNumbî
, ',');

348 
	`as£πNŸVÆid
("1.0", 
isVÆidNumbî
, ',');

349 
	`as£πNŸVÆid
("1.01", 
isVÆidNumbî
, ',');

350 
	`as£πNŸVÆid
("0123", 
isVÆidNumbî
, ',');

353 
	`as£πNŸVÆid
("-123", 
isVÆidNumbî
, ',');

354 
	`as£πNŸVÆid
("-12.3", 
isVÆidNumbî
, ',');

355 
	`as£πNŸVÆid
("-0.123", 
isVÆidNumbî
, ',');

356 
	`as£πNŸVÆid
("-0", 
isVÆidNumbî
, ',');

357 
	`as£πNŸVÆid
("-0.", 
isVÆidNumbî
, ',');

358 
	`as£πNŸVÆid
("-1", 
isVÆidNumbî
, ',');

359 
	`as£πNŸVÆid
("-1.", 
isVÆidNumbî
, ',');

360 
	`as£πNŸVÆid
("-0.0", 
isVÆidNumbî
, ',');

361 
	`as£πNŸVÆid
("-1.0", 
isVÆidNumbî
, ',');

362 
	`as£πNŸVÆid
("-1.01", 
isVÆidNumbî
, ',');

363 
	`as£πNŸVÆid
("-0123", 
isVÆidNumbî
, ',');

366 
	`as£πNŸVÆid
("0e", 
isVÆidNumbî
, ',');

367 
	`as£πNŸVÆid
("0E", 
isVÆidNumbî
, ',');

368 
	`as£πNŸVÆid
("0e123", 
isVÆidNumbî
, ',');

369 
	`as£πNŸVÆid
("0e12.3", 
isVÆidNumbî
, ',');

370 
	`as£πNŸVÆid
("1.e123", 
isVÆidNumbî
, ',');

371 
	`as£πNŸVÆid
("1.e12.3", 
isVÆidNumbî
, ',');

372 
	`as£πNŸVÆid
("1.0e123", 
isVÆidNumbî
, ',');

373 
	`as£πNŸVÆid
("1.0e12.3", 
isVÆidNumbî
, ',');

374 
	`as£πNŸVÆid
("0e2", 
isVÆidNumbî
, ',');

375 
	`as£πNŸVÆid
("1e2", 
isVÆidNumbî
, ',');

376 
	`as£πNŸVÆid
("0.e2", 
isVÆidNumbî
, ',');

377 
	`as£πNŸVÆid
("1.e2", 
isVÆidNumbî
, ',');

378 
	`as£πNŸVÆid
("0.0e2", 
isVÆidNumbî
, ',');

379 
	`as£πNŸVÆid
("1.0e2", 
isVÆidNumbî
, ',');

382 
	`as£πNŸVÆid
("-0e123", 
isVÆidNumbî
, ',');

383 
	`as£πNŸVÆid
("-0e12.3", 
isVÆidNumbî
, ',');

384 
	`as£πNŸVÆid
("-1.e123", 
isVÆidNumbî
, ',');

385 
	`as£πNŸVÆid
("-1.e12.3", 
isVÆidNumbî
, ',');

386 
	`as£πNŸVÆid
("-1.0e123", 
isVÆidNumbî
, ',');

387 
	`as£πNŸVÆid
("-1.0e12.3", 
isVÆidNumbî
, ',');

388 
	`as£πNŸVÆid
("-0e2", 
isVÆidNumbî
, ',');

389 
	`as£πNŸVÆid
("-1e2", 
isVÆidNumbî
, ',');

390 
	`as£πNŸVÆid
("-0.e2", 
isVÆidNumbî
, ',');

391 
	`as£πNŸVÆid
("-1.e2", 
isVÆidNumbî
, ',');

392 
	`as£πNŸVÆid
("-0.0e2", 
isVÆidNumbî
, ',');

393 
	`as£πNŸVÆid
("-1.0e2", 
isVÆidNumbî
, ',');

396 
	`as£πNŸVÆid
("0e-123", 
isVÆidNumbî
, ',');

397 
	`as£πNŸVÆid
("0e+123", 
isVÆidNumbî
, ',');

398 
	`as£πNŸVÆid
("0e-12.3", 
isVÆidNumbî
, ',');

399 
	`as£πNŸVÆid
("0e+12.3", 
isVÆidNumbî
, ',');

400 
	`as£πNŸVÆid
("1.e-123", 
isVÆidNumbî
, ',');

401 
	`as£πNŸVÆid
("1.e+123", 
isVÆidNumbî
, ',');

402 
	`as£πNŸVÆid
("1.e-12.3", 
isVÆidNumbî
, ',');

403 
	`as£πNŸVÆid
("1.e+12.3", 
isVÆidNumbî
, ',');

404 
	`as£πNŸVÆid
("1.0e-123", 
isVÆidNumbî
, ',');

405 
	`as£πNŸVÆid
("1.0e+123", 
isVÆidNumbî
, ',');

406 
	`as£πNŸVÆid
("1.0e-12.3", 
isVÆidNumbî
, ',');

407 
	`as£πNŸVÆid
("1.0e+12.3", 
isVÆidNumbî
, ',');

408 
	`as£πNŸVÆid
("0e2", 
isVÆidNumbî
, ',');

409 
	`as£πNŸVÆid
("1e2", 
isVÆidNumbî
, ',');

410 
	`as£πNŸVÆid
("0.e2", 
isVÆidNumbî
, ',');

411 
	`as£πNŸVÆid
("1.e2", 
isVÆidNumbî
, ',');

412 
	`as£πNŸVÆid
("0.0e2", 
isVÆidNumbî
, ',');

413 
	`as£πNŸVÆid
("1.0e2", 
isVÆidNumbî
, ',');

416 
	`as£πNŸVÆid
("-0e-123", 
isVÆidNumbî
, ',');

417 
	`as£πNŸVÆid
("-0e+123", 
isVÆidNumbî
, ',');

418 
	`as£πNŸVÆid
("-0e-12.3", 
isVÆidNumbî
, ',');

419 
	`as£πNŸVÆid
("-0e+12.3", 
isVÆidNumbî
, ',');

420 
	`as£πNŸVÆid
("-0.e-123", 
isVÆidNumbî
, ',');

421 
	`as£πNŸVÆid
("-0.e+123", 
isVÆidNumbî
, ',');

422 
	`as£πNŸVÆid
("-1.e-123", 
isVÆidNumbî
, ',');

423 
	`as£πNŸVÆid
("-1.e+123", 
isVÆidNumbî
, ',');

424 
	`as£πNŸVÆid
("-1.e-12.3", 
isVÆidNumbî
, ',');

425 
	`as£πNŸVÆid
("-1.e+12.3", 
isVÆidNumbî
, ',');

426 
	`as£πNŸVÆid
("-0.0e-123", 
isVÆidNumbî
, ',');

427 
	`as£πNŸVÆid
("-0.0e+123", 
isVÆidNumbî
, ',');

428 
	`as£πNŸVÆid
("-1.0e-123", 
isVÆidNumbî
, ',');

429 
	`as£πNŸVÆid
("-1.0e+123", 
isVÆidNumbî
, ',');

430 
	`as£πNŸVÆid
("-1.0e-12.3", 
isVÆidNumbî
, ',');

431 
	`as£πNŸVÆid
("-1.0e+12.3", 
isVÆidNumbî
, ',');

432 
	`as£πNŸVÆid
("-0e-2", 
isVÆidNumbî
, ',');

433 
	`as£πNŸVÆid
("-1e-2", 
isVÆidNumbî
, ',');

434 
	`as£πNŸVÆid
("-0.e-2", 
isVÆidNumbî
, ',');

435 
	`as£πNŸVÆid
("-1.e-2", 
isVÆidNumbî
, ',');

436 
	`as£πNŸVÆid
("-0.0e-2", 
isVÆidNumbî
, ',');

437 
	`as£πNŸVÆid
("-1.0e-2", 
isVÆidNumbî
, ',');

438 
	`as£πNŸVÆid
("-0e+2", 
isVÆidNumbî
, ',');

439 
	`as£πNŸVÆid
("-1e+2", 
isVÆidNumbî
, ',');

440 
	`as£πNŸVÆid
("-0.e+2", 
isVÆidNumbî
, ',');

441 
	`as£πNŸVÆid
("-1.e+2", 
isVÆidNumbî
, ',');

442 
	`as£πNŸVÆid
("-0.0e+2", 
isVÆidNumbî
, ',');

443 
	`as£πNŸVÆid
("-1.0e+2", 
isVÆidNumbî
, ',');

446 
	`as£πNŸVÆid
(".01", 
isVÆidNumbî
, ',');

447 
	`as£πNŸVÆid
("-.01", 
isVÆidNumbî
, ',');

448 
	`as£πNŸVÆid
("+123", 
isVÆidNumbî
, ',');

449 
	`as£πNŸVÆid
("+12.3", 
isVÆidNumbî
, ',');

450 
	`as£πNŸVÆid
("+0.123", 
isVÆidNumbî
, ',');

451 
	`as£πNŸVÆid
("+0e123", 
isVÆidNumbî
, ',');

452 
	`as£πNŸVÆid
("+0e-123", 
isVÆidNumbî
, ',');

453 
	`as£πNŸVÆid
("+0e+123", 
isVÆidNumbî
, ',');

454 
	`as£πNŸVÆid
("+1.e123", 
isVÆidNumbî
, ',');

455 
	`as£πNŸVÆid
("+1.e-123", 
isVÆidNumbî
, ',');

456 
	`as£πNŸVÆid
("+1.e+123", 
isVÆidNumbî
, ',');

457 
	`as£πNŸVÆid
("+1.0e123", 
isVÆidNumbî
, ',');

458 
	`as£πNŸVÆid
("+1.0e-123", 
isVÆidNumbî
, ',');

459 
	`as£πNŸVÆid
("+1.0e+123", 
isVÆidNumbî
, ',');

460 
	`as£πNŸVÆid
("+0e12.3", 
isVÆidNumbî
, ',');

461 
	`as£πNŸVÆid
("+0e-12.3", 
isVÆidNumbî
, ',');

462 
	`as£πNŸVÆid
("+0e+12.3", 
isVÆidNumbî
, ',');

463 
	`as£πNŸVÆid
("+1.e12.3", 
isVÆidNumbî
, ',');

464 
	`as£πNŸVÆid
("+1.e-12.3", 
isVÆidNumbî
, ',');

465 
	`as£πNŸVÆid
("+1.e+12.3", 
isVÆidNumbî
, ',');

466 
	`as£πNŸVÆid
("+1.0e12.3", 
isVÆidNumbî
, ',');

467 
	`as£πNŸVÆid
("+1.0e-12.3", 
isVÆidNumbî
, ',');

468 
	`as£πNŸVÆid
("+1.0e+12.3", 
isVÆidNumbî
, ',');

469 
	`as£πNŸVÆid
("0x12FF", 
isVÆidNumbî
, ',');

470 
	`as£πNŸVÆid
("0128", 
isVÆidNumbî
, ',');

471 
	`as£πNŸVÆid
("0xABCD", 
isVÆidNumbî
, ',');

472 
	`as£πNŸVÆid
("0124", 
isVÆidNumbî
, ',');

473 
	`as£πNŸVÆid
("+1", 
isVÆidNumbî
, ',');

474 
	`as£πNŸVÆid
("+1.", 
isVÆidNumbî
, ',');

475 
	`as£πNŸVÆid
("+0.0", 
isVÆidNumbî
, ',');

476 
	`as£πNŸVÆid
("+1.0", 
isVÆidNumbî
, ',');

477 
	`as£πNŸVÆid
("+0e2", 
isVÆidNumbî
, ',');

478 
	`as£πNŸVÆid
("+1e2", 
isVÆidNumbî
, ',');

479 
	`as£πNŸVÆid
("+0.e2", 
isVÆidNumbî
, ',');

480 
	`as£πNŸVÆid
("+1.e2", 
isVÆidNumbî
, ',');

481 
	`as£πNŸVÆid
("+0.0e2", 
isVÆidNumbî
, ',');

482 
	`as£πNŸVÆid
("+1.0e2", 
isVÆidNumbî
, ',');

483 
	`as£πNŸVÆid
("+0e-2", 
isVÆidNumbî
, ',');

484 
	`as£πNŸVÆid
("+1e-2", 
isVÆidNumbî
, ',');

485 
	`as£πNŸVÆid
("+0.e-2", 
isVÆidNumbî
, ',');

486 
	`as£πNŸVÆid
("+1.e-2", 
isVÆidNumbî
, ',');

487 
	`as£πNŸVÆid
("+0e+2", 
isVÆidNumbî
, ',');

488 
	`as£πNŸVÆid
("+1e+2", 
isVÆidNumbî
, ',');

489 
	`as£πNŸVÆid
("+0.e+2", 
isVÆidNumbî
, ',');

490 
	`as£πNŸVÆid
("+1.e+2", 
isVÆidNumbî
, ',');

491 
	`as£πNŸVÆid
("+0.0e+2", 
isVÆidNumbî
, ',');

492 
	`as£πNŸVÆid
("+1.0e+2", 
isVÆidNumbî
, ',');

493 
	`as£πNŸVÆid
("0128", 
isVÆidNumbî
, ',');

497 
	`as£πNŸVÆid
("0xABCDv", 
isVÆidNumbî
, ',');

498 
	`as£πNŸVÆid
("001234", 
isVÆidNumbî
, ',');

499 
	`as£πNŸVÆid
("09124", 
isVÆidNumbî
, ',');

500 
	`as£πNŸVÆid
("0no", 
isVÆidNumbî
, ',');

501 
	`as£πNŸVÆid
("no", 
isVÆidNumbî
, ',');

502 
	`as£πNŸVÆid
("n1234", 
isVÆidNumbî
, ',');

503 
	`as£πNŸVÆid
("12no", 
isVÆidNumbî
, ',');

504 
	`as£πNŸVÆid
("0í5", 
isVÆidNumbî
, ',');

506 
	}
}

	@libjson/_internal/TestSuite2/JSONValidator/isValidNumber.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_NUMBER_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_NUMBER_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONVÆid©‹__isVÆidNumbî
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONVÆid©‹__isVÆidNumbî
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Posôive
();

10 
	`ã°Neg©ive
();

11 
	`ã°Posôive_Scõ¡ificNŸ©i⁄
();

12 
	`ã°Neg©ive_Scõ¡ificNŸ©i⁄
();

13 
	`ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
();

14 
	`ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
();

15 
	`ã°Såi˘
();

16 
	`ã°NŸSåi˘
();

17 
	`ã°NŸNumbîs
();

18 
	`ã°SuddíEnd
();

19 
	}
};

	@libjson/_internal/TestSuite2/JSONValidator/isValidObject.cpp

10 
	~"isVÆidObje˘.h
"

	@libjson/_internal/TestSuite2/JSONValidator/isValidObject.h

	@libjson/_internal/TestSuite2/JSONValidator/isValidPartialRoot.cpp

10 
	~"isVÆidP¨tülRoŸ.h
"

	@libjson/_internal/TestSuite2/JSONValidator/isValidPartialRoot.h

	@libjson/_internal/TestSuite2/JSONValidator/isValidRoot.cpp

1 
	~"isVÆidRoŸ.h
"

2 
	~"Resour˚s/vÆidyMa¸os.h
"

3 
	~"../../Sour˚/JSONVÆid©‹.h
"

5 
	gã°JSONVÆid©‹__isVÆidRoŸ
::
	$ã°RoŸs
(){

6 #ifde‡
JSON_VALIDATE


7 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{}")));

8 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[]")));

9 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[\"stuff\"]")));

11 
	}
}

13 
	gã°JSONVÆid©‹__isVÆidRoŸ
::
	$ã°NŸRoŸs
(){

14 #ifde‡
JSON_VALIDATE


15 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{]")));

16 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[}")));

17 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{}aoe")));

18 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[]aoe")));

19 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("aoe")));

20 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("")));

21 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[\"stuff\":{},]")));

23 
	}
}

25 
	gã°JSONVÆid©‹__isVÆidRoŸ
::
	$ã°SuddíEnd
(){

26 #ifde‡
JSON_VALIDATE


27 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("")));

30 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{")));

31 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[")));

32 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[\"stuff")));

35 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("{}aoe")));

36 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("[]aoe")));

37 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
	`JSON_TEXT
("aoe")));

39 
	}
}

	@libjson/_internal/TestSuite2/JSONValidator/isValidRoot.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_ROOT_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_ROOT_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONVÆid©‹__isVÆidRoŸ
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONVÆid©‹__isVÆidRoŸ
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°RoŸs
();

10 
	`ã°NŸRoŸs
();

11 
	`ã°SuddíEnd
();

12 
	}
};

	@libjson/_internal/TestSuite2/JSONValidator/isValidString.cpp

1 
	~"isVÆidSåög.h
"

2 
	~"Resour˚s/vÆidyMa¸os.h
"

3 
	~"../../Sour˚/JSONVÆid©‹.h
"

5 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°N‹mÆ
(){

6 
	`as£πVÆid
("hñlo\":123", 
isVÆidSåög
, ':');

7 
	`as£πVÆid
("he\\\"Œ\\\"o\":123", 
isVÆidSåög
, ':');

8 
	}
}

10 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°Unicode
(){

11 
	`as£πVÆid
("he\\u1234Œo\":123", 
isVÆidSåög
, ':');

12 
	`as£πVÆid
("he\\u0FFFŒo\":123", 
isVÆidSåög
, ':');

13 
	`as£πNŸVÆid
("he\\uFFFGŒo\":123", 
isVÆidSåög
, ':');

14 
	}
}

16 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°Såi˘
(){

17 #ifde‡
JSON_STRICT


18 
	`as£πNŸVÆid
("he\\xFFŒo\":123", 
isVÆidSåög
, ':');

19 
	`as£πNŸVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

21 
	}
}

23 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°NŸSåi˘
(){

24 #i‚de‡
JSON_STRICT


25 
	`as£πVÆid
("he\\xFFŒo\":123", 
isVÆidSåög
, ':');

26 #ifde‡
JSON_OCTAL


27 
	`as£πVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

29 
	`as£πNŸVÆid
("he\\0123Œo\":123", 
isVÆidSåög
, ':');

32 
	}
}

34 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°NŸSåög
(){

35 
	`as£πNŸVÆid
("he\\128Œo\":123", 
isVÆidSåög
, ':');

36 
	}
}

38 
	gã°JSONVÆid©‹__isVÆidSåög
::
	$ã°SuddíEnd
(){

39 
	`as£πNŸVÆid
("he\\", 
isVÆidSåög
, ':');

40 
	`as£πNŸVÆid
("he\\\"", 
isVÆidSåög
, ':');

41 
	`as£πNŸVÆid
("he\\\"Œo\\\"", 
isVÆidSåög
, ':');

44 
	`as£πNŸVÆid
("hñlo", 
isVÆidSåög
, ':');

45 
	`as£πNŸVÆid
("he\\\"Œ\\\"o", 
isVÆidSåög
, ':');

48 
	`as£πNŸVÆid
("he\\u1234Œo", 
isVÆidSåög
, ':');

49 
	`as£πNŸVÆid
("he\\u0FF", 
isVÆidSåög
, ':');

50 
	`as£πNŸVÆid
("he\\u0F", 
isVÆidSåög
, ':');

51 
	`as£πNŸVÆid
("he\\u0", 
isVÆidSåög
, ':');

52 
	`as£πNŸVÆid
("he\\u", 
isVÆidSåög
, ':');

53 
	`as£πNŸVÆid
("he\\", 
isVÆidSåög
, ':');

56 
	`as£πNŸVÆid
("he\\xFF", 
isVÆidSåög
, ':');

57 
	`as£πNŸVÆid
("he\\xF", 
isVÆidSåög
, ':');

58 
	`as£πNŸVÆid
("he\\x", 
isVÆidSåög
, ':');

59 
	`as£πNŸVÆid
("he\\0123", 
isVÆidSåög
, ':');

60 
	`as£πNŸVÆid
("he\\012", 
isVÆidSåög
, ':');

61 
	`as£πNŸVÆid
("he\\01", 
isVÆidSåög
, ':');

62 
	`as£πNŸVÆid
("he\\0", 
isVÆidSåög
, ':');

63 
	}
}

	@libjson/_internal/TestSuite2/JSONValidator/isValidString.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_STRING_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR__IS_VALID_STRING_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONVÆid©‹__isVÆidSåög
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONVÆid©‹__isVÆidSåög
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°N‹mÆ
();

10 
	`ã°Unicode
();

11 
	`ã°Såi˘
();

12 
	`ã°NŸSåi˘
();

13 
	`ã°NŸSåög
();

14 
	`ã°SuddíEnd
();

15 
	}
};

	@libjson/_internal/TestSuite2/JSONValidator/securityTest.cpp

1 
	~"£curôyTe°.h
"

2 
	~"Resour˚s/vÆidyMa¸os.h
"

3 
	~"../../Sour˚/JSONVÆid©‹.h
"

5 
	gã°JSONVÆid©‹__£curôyTe°
::
	$ã°£curôy
(){

6 #ifde‡
JSON_SECURITY_MAX_NEST_LEVEL


7 #i‡(
JSON_SECURITY_MAX_NEST_LEVEL
 != 128)

8 #îr‹, 
ã°
 
suôe
 
⁄ly
 
w™ts
 
a
 
√°
 
£curôy
 
Àvñ
 
of
 100

11 
js⁄_°rög
 
	`js⁄
(
	`JSON_TEXT
("{"));

12 
i
 = 0; i < 127; ++i){

13 
js⁄
 +
	`JSON_TEXT
("\"n\":{");

15 
js⁄
 +
	`js⁄_°rög
(128, '}');

16 
	`as£πTrue
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
js⁄
.
	`c_°r
()));

19 
js⁄_°rög
 
	`js⁄
(
	`JSON_TEXT
("{"));

20 
i
 = 0; i < 128; ++i){

21 
js⁄
 +
	`JSON_TEXT
("\"n\":{");

23 
js⁄
 +
	`js⁄_°rög
(129, '}');

24 
	`as£πFÆ£
(
JSONVÆid©‹
::
	`isVÆidRoŸ
(
js⁄
.
	`c_°r
()));

27 
	}
}

	@libjson/_internal/TestSuite2/JSONValidator/securityTest.h

1 #i‚de‡
JSON_TESTSUITE_JSON_VALIDATOR__SECURITY_TEST_H


2 
	#JSON_TESTSUITE_JSON_VALIDATOR__SECURITY_TEST_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSONVÆid©‹__£curôyTe°
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSONVÆid©‹__£curôyTe°
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°£curôy
();

10 
	}
};

	@libjson/_internal/TestSuite2/JSON_Base64/json_decode64.cpp

1 
	~"js⁄_decode64.h
"

2 
	~"../../Sour˚/JSON_Ba£64.h
"

4 
	gã°JSON_Ba£64__js⁄_decode64
::
	$ã°NŸBa£64
(){

5 #i‡
	`deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

6 #ifde‡
JSON_SAFE


7 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123!abc")), "");

8 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123=abc")), "");

9 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(
	`JSON_TEXT
("123abc===")), "");

12 
	}
}

	@libjson/_internal/TestSuite2/JSON_Base64/json_decode64.h

1 #i‚de‡
JSON_TESTSUITE_JSON_BASE64__JSON_DECODE64_H


2 
	#JSON_TESTSUITE_JSON_BASE64__JSON_DECODE64_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSON_Ba£64__js⁄_decode64
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSON_Ba£64__js⁄_decode64
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°NŸBa£64
();

10 
	}
};

	@libjson/_internal/TestSuite2/JSON_Base64/json_encode64.cpp

1 
	~"js⁄_ícode64.h
"

2 
	~"../../Sour˚/JSON_Ba£64.h
"

7 
	gã°JSON_Ba£64__js⁄_ícode64
::
	$ã°Revî£EachOthî
(){

8 #i‡
	`deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

9 #ifde‡
JSON_SAFE


10 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"", 0)), "");

12 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"A", 1)), "A");

13 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"AB", 2)), "AB");

14 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABC", 3)), "ABC");

15 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCD", 4)), "ABCD");

16 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDE", 5)), "ABCDE");

17 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEF", 6)), "ABCDEF");

18 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFG", 7)), "ABCDEFG");

19 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGH", 8)), "ABCDEFGH");

20 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGHI", 9)), "ABCDEFGHI");

21 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGHIJ", 10)), "ABCDEFGHIJ");

22 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGHIJK", 11)), "ABCDEFGHIJK");

23 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGHIJKL", 12)), "ABCDEFGHIJKL");

24 
	`as£πEquÆs
(
JSONBa£64
::
	`js⁄_decode64
(JSONBa£64::
	`js⁄_ícode64
((*)"ABCDEFGHIJKLM", 13)), "ABCDEFGHIJKLM");

26 
	}
}

31 
	gã°JSON_Ba£64__js⁄_ícode64
::
	$ã°AŒCh¨s
(){

32 #i‡
	`deföed
(
JSON_BINARY
Ë|| deföed(
JSON_EXPOSE_BASE64
)

35 
ãmp
[255];

36 
i
 = 0; i < 255; ++i){

37 
ãmp
[
i
] = ()i;

41 
Àngth
 = 1;Üength < 255; ++length){

42 
js⁄_°rög
 
ts
 = 
JSONBa£64
::
	`js⁄_ícode64
(
ãmp
, 
Àngth
);

43 
°d
::
°rög
 
rs
 = 
JSONBa£64
::
	`js⁄_decode64
(
ts
);

44 
	`as£πEquÆs
(
rs
.
	`size
(), 
Àngth
);

45 
	`as£πEquÆs
(
	`memcmp
(
rs
.
	`d©a
(), 
ãmp
, 
Àngth
), 0);

48 
	}
}

	@libjson/_internal/TestSuite2/JSON_Base64/json_encode64.h

1 #i‚de‡
JSON_TESTSUITE_JSON_BASE64__JSON_ENCODE64_H


2 
	#JSON_TESTSUITE_JSON_BASE64__JSON_ENCODE64_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°JSON_Ba£64__js⁄_ícode64
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°JSON_Ba£64__js⁄_ícode64
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Revî£EachOthî
();

10 
	`ã°AŒCh¨s
();

11 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/_areFloatsEqual.cpp

1 
	~"_¨eFlﬂtsEquÆ.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

8 
	gã°NumbîToSåög__¨eFlﬂtsEquÆ
::
	$ã°EquÆ
(){

9 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
( 0.0, 0.0));

10 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
( 1.0, 1.0));

11 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
( 1.1, 1.1));

12 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(-1.0, -1.0));

13 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
( 0.1, 0.1));

14 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(-0.1, -0.1));

15 
	}
}

21 
	gã°NumbîToSåög__¨eFlﬂtsEquÆ
::
	$ã°NŸEquÆ
(){

22 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
( 1.0, -1.0));

23 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
( 1.0, 0.0));

24 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(-1.0, -.0));

25 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
( 0.1, 0.0));

26 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(-0.1, 0.0));

27 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(1.0, 1.0001));

28 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
(1.0001, 1.0));

29 
	}
}

36 
	gã°NumbîToSåög__¨eFlﬂtsEquÆ
::
	$ã°Clo£Enough
(){

38 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
–0.0, 
JSON_FLOAT_THRESHHOLD
));

39 
	`as£πFÆ£
(
	`_ÊﬂtsAªEquÆ
–0.0, -
JSON_FLOAT_THRESHHOLD
));

42 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(0.0, 
JSON_FLOAT_THRESHHOLD
 / 2));

43 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(0.0, 
JSON_FLOAT_THRESHHOLD
 / -2));

44 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(-0.1, -0.1));

45 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(1.000000001, 1.0));

46 
	`as£πTrue
(
	`_ÊﬂtsAªEquÆ
(1.0, 1.000000001));

47 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/_areFloatsEqual.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__ARE_FLOATS_EQUAL_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__ARE_FLOATS_EQUAL_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__¨eFlﬂtsEquÆ
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__¨eFlﬂtsEquÆ
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°EquÆ
();

10 
	`ã°NŸEquÆ
();

11 
	`ã°Clo£Enough
();

12 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/_atof.cpp

1 
	~"_©of.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

4 #ifde‡
JSON_SAFE


5 
	#as£πNaN
(
⁄e
Ë
	`as£πNAN
(
js⁄_numbî
, o√)

	)

7 
	#as£πNaN
(
⁄e
)

	)

10 
	gã°NumbîToSåög__©of
::
ã°NumbîToSåög__©of
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){

12 
	}
}

13 
ã°NumbîToSåög__©of
::~
	$ã°NumbîToSåög__©of
(){

15 
	}
}

20 
ã°NumbîToSåög__©of
::
	$ã°Posôive
(){

21 #ifde‡
JSON_STRICT


22 
	`as£πFlﬂtEquÆs
(123, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("123")));

23 
	`as£πFlﬂtEquÆs
(12.3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("12.3")));

24 
	`as£πFlﬂtEquÆs
(0.123, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.123")));

25 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0")));

26 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.")));

27 
	`as£πFlﬂtEquÆs
(1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.")));

28 
	`as£πFlﬂtEquÆs
(1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1")));

29 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.0")));

30 
	`as£πFlﬂtEquÆs
(1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0")));

31 
	`as£πFlﬂtEquÆs
(1.01, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.01")));

33 
	}
}

38 
	gã°NumbîToSåög__©of
::
	$ã°Neg©ive
(){

39 #ifde‡
JSON_STRICT


40 
	`as£πFlﬂtEquÆs
(-123, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-123")));

41 
	`as£πFlﬂtEquÆs
(-12.3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-12.3")));

42 
	`as£πFlﬂtEquÆs
(-.123, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.123")));

43 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0")));

44 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.")));

45 
	`as£πFlﬂtEquÆs
(-1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1")));

46 
	`as£πFlﬂtEquÆs
(-1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.")));

47 
	`as£πFlﬂtEquÆs
(0, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0")));

48 
	`as£πFlﬂtEquÆs
(-1, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0")));

50 
	}
}

55 
	gã°NumbîToSåög__©of
::
	$ã°Posôive_Scõ¡ificNŸ©i⁄
(){

56 #ifde‡
JSON_STRICT


57 
	`as£πNAN
(
js⁄_numbî
, 
°d
::
numîic_limôs
<js⁄_numbî>::
	`sig«lög_NaN
());

58 
	`as£πFlﬂtEquÆs
(0e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e3")));

59 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e3.3")));

61 
	`as£πFlﬂtEquÆs
(1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e3")));

62 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e3.3")));

63 
	`as£πFlﬂtEquÆs
(1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e3")));

64 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e3.3")));

66 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e2")));

67 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1e2")));

68 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.e2")));

69 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e2")));

70 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.0e2")));

71 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e2")));

73 
	}
}

78 
	gã°NumbîToSåög__©of
::
	$ã°Neg©ive_Scõ¡ificNŸ©i⁄
(){

79 #ifde‡
JSON_STRICT


80 
	`as£πFlﬂtEquÆs
(0e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e3")));

81 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e3.3")));

82 
	`as£πFlﬂtEquÆs
(-1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e3")));

83 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e3.3")));

84 
	`as£πFlﬂtEquÆs
(-1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e3")));

85 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e3.3")));

87 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e2")));

88 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1e2")));

89 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.e2")));

90 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e2")));

91 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0e2")));

92 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e2")));

94 
	}
}

99 
	gã°NumbîToSåög__©of
::
	$ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
(){

100 #ifde‡
JSON_STRICT


101 
	`as£πFlﬂtEquÆs
(0e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e-3")));

102 
	`as£πFlﬂtEquÆs
(0e+3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e+3")));

103 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e-3.3")));

104 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e+3.3")));

105 
	`as£πFlﬂtEquÆs
(1e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e-3")));

106 
	`as£πFlﬂtEquÆs
(1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e+3")));

107 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e-3.3")));

108 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e+3.3")));

109 
	`as£πFlﬂtEquÆs
(1e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e-3")));

110 
	`as£πFlﬂtEquÆs
(1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e+3")));

111 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e-3.3")));

112 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e+3.3")));

114 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e2")));

115 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1e2")));

116 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.e2")));

117 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.e2")));

118 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0.0e2")));

119 
	`as£πFlﬂtEquÆs
(1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1.0e2")));

121 
	}
}

127 
	gã°NumbîToSåög__©of
::
	$ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
(){

128 #ifde‡
JSON_STRICT


129 
	`as£πFlﬂtEquÆs
(0e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e-3")));

130 
	`as£πFlﬂtEquÆs
(0e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e+3")));

131 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.e-3.3")));

132 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.e+3.3")));

133 
	`as£πFlﬂtEquÆs
(-1e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e-3")));

134 
	`as£πFlﬂtEquÆs
(-1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e+3")));

135 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e-3.3")));

136 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e+3.3")));

137 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0e-3.3")));

138 
	`as£πNaN
–
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0e+3.3")));

139 
	`as£πFlﬂtEquÆs
(-1e-3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e-3")));

140 
	`as£πFlﬂtEquÆs
(-1e3, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e+3")));

141 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e-3.3")));

142 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e+3.3")));

144 
	`as£πFlﬂtEquÆs
(0e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e-2")));

145 
	`as£πFlﬂtEquÆs
(-1e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1e-2")));

146 
	`as£πFlﬂtEquÆs
(0e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.e-2")));

147 
	`as£πFlﬂtEquÆs
(-1e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e-2")));

148 
	`as£πFlﬂtEquÆs
(0e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0e-2")));

149 
	`as£πFlﬂtEquÆs
(-1e-2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e-2")));

150 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0e+2")));

151 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1e+2")));

152 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.e+2")));

153 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.e+2")));

154 
	`as£πFlﬂtEquÆs
(0e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0.0e+2")));

155 
	`as£πFlﬂtEquÆs
(-1e2, 
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-1.0e+2")));

157 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("1e-0123")));

159 
	}
}

161 
	gã°NumbîToSåög__©of
::
	$ã°Såi˘
(){

162 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

163 #ifde‡
JSON_STRICT


164 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("00")));

165 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("00.01")));

166 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
(".01")));

167 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-.01")));

168 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+123")));

169 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+12.3")));

170 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.123")));

171 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0")));

172 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.")));

173 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e3")));

174 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e-3")));

175 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e+3")));

176 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e3")));

177 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e-3")));

178 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e+3")));

179 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e3")));

180 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e-3")));

181 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e+3")));

182 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e3")));

183 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e3.3")));

184 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e-3.3")));

185 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e+3.3")));

186 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e3.3")));

187 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e-3.3")));

188 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e+3.3")));

189 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e3.3")));

190 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e-3.3")));

191 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e+3.3")));

192 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e3.3")));

194 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0x12FF")));

195 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0128")));

196 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0123")));

197 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0123")));

199 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0xABCD")));

200 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0124")));

201 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1")));

202 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.")));

203 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.0")));

204 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0")));

205 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e2")));

206 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1e2")));

207 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.e2")));

208 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e2")));

209 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.0e2")));

210 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e2")));

211 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e-2")));

212 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1e-2")));

213 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.e-2")));

214 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e-2")));

215 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.0e-2")));

216 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e-2")));

217 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0e+2")));

218 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1e+2")));

219 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.e+2")));

220 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.e+2")));

221 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+0.0e+2")));

222 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("+1.0e+2")));

225 
	}
}

227 
	gã°NumbîToSåög__©of
::
	$ã°NŸNumbîs
(){

228 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

229 #ifde‡
JSON_STRICT


230 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-.")));

231 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-e3")));

232 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0xABCDv")));

233 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("00124")));

234 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("09124")));

235 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0no")));

236 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("no")));

237 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("n1234")));

238 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("12no")));

239 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0en5")));

240 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0e")));

241 
	`as£πNaN
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("0E")));

244 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/_atof.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__ATOF_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__ATOF_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__©of
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__©of
(c⁄° 
°d
::
°rög
 & 
«me
);

9 
	mvútuÆ
 ~
ã°NumbîToSåög__©of
();

10 
ã°Posôive
();

11 
ã°Neg©ive
();

12 
ã°Posôive_Scõ¡ificNŸ©i⁄
();

13 
ã°Neg©ive_Scõ¡ificNŸ©i⁄
();

14 
ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
();

15 
ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
();

16 
ã°Såi˘
();

17 
ã°NŸNumbîs
();

	@libjson/_internal/TestSuite2/NumberToString/_ftoa.cpp

1 
	~"_·ﬂ.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

8 
	gã°NumbîToSåög__·ﬂ
::
	$ã°R™domNumbîs
(){

10 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë1.2), 
	`JSON_TEXT
( "1.2"));

11 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-1.2), 
	`JSON_TEXT
( "-1.2"));

12 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë1.02), 
	`JSON_TEXT
( "1.02"));

13 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-1.02), 
	`JSON_TEXT
( "-1.02"));

14 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë1.002), 
	`JSON_TEXT
( "1.002"));

15 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-1.002), 
	`JSON_TEXT
( "-1.002"));

16 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë3.1415), 
	`JSON_TEXT
( "3.1415"));

17 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-3.1415), 
	`JSON_TEXT
( "-3.1415"));

18 
	}
}

25 
	gã°NumbîToSåög__·ﬂ
::
	$ã°S≥cülizedI¡s
(){

26 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë1.0), 
	`JSON_TEXT
( "1"));

27 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë10.0), 
	`JSON_TEXT
( "10"));

28 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-1.0), 
	`JSON_TEXT
( "-1"));

29 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
)-10.0), 
	`JSON_TEXT
("-10"));

30 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë0.0), 
	`JSON_TEXT
( "0"));

31 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-0.0), 
	`JSON_TEXT
( "0"));

34 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë1.000000001), 
	`JSON_TEXT
( "1"));

35 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-1.000000001), 
	`JSON_TEXT
( "-1"));

36 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë0.000000001), 
	`JSON_TEXT
( "0"));

37 
	`as£πEquÆs
(
NumbîToSåög
::
	`_·ﬂ
((
js⁄_numbî
Ë-0.000000001), 
	`JSON_TEXT
( "0"));

38 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/_ftoa.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__FTOA_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__FTOA_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__·ﬂ
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__·ﬂ
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°R™domNumbîs
();

10 
	`ã°S≥cülizedI¡s
();

11 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/_itoa.cpp

1 
	~"_ôﬂ.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

8 
	gã°NumbîToSåög__ôﬂ
::
	$ã°Ch¨
(){

10 
	`as£πEquÆs
((), 1);

11 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

12 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

13 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

14 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-0), 
	`JSON_TEXT
("0"));

15 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

16 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

18 
	}
}

24 
	gã°NumbîToSåög__ôﬂ
::
	$ã°Sh‹t
(){

26 
	`as£πEquÆs
((), 2);

27 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

28 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

29 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

30 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

31 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-0), 
	`JSON_TEXT
("0"));

32 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

33 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

34 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-32767), 
	`JSON_TEXT
("-32767"));

36 
	}
}

42 
	gã°NumbîToSåög__ôﬂ
::
	$ã°I¡
(){

44 
	`as£πEquÆs
((), 4);

45 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

46 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

47 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

48 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

49 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

50 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-0), 
	`JSON_TEXT
("0"));

51 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

52 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

53 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-32767), 
	`JSON_TEXT
("-32767"));

54 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-2147483647), 
	`JSON_TEXT
("-2147483647"));

56 
	}
}

62 
	gã°NumbîToSåög__ôﬂ
::
	$ã°L⁄g
(){

64 #ifde‡
TEST_LONG_EXTREMES


66 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()9223372036854775807L), 
	`JSON_TEXT
("9223372036854775807"));

67 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-9223372036854775807L), 
	`JSON_TEXT
("-9223372036854775807"));

70 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

71 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

72 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

73 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

74 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

75 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-0), 
	`JSON_TEXT
("0"));

76 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

77 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

78 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-32767), 
	`JSON_TEXT
("-32767"));

79 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-2147483647), 
	`JSON_TEXT
("-2147483647"));

81 
	}
}

87 
	gã°NumbîToSåög__ôﬂ
::
	$ã°L⁄gL⁄g
(){

88 #i‚de‡
JSON_ISO_STRICT


90 #ifde‡
TEST_LONG_EXTREMES


92 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()9223372036854775807L), 
	`JSON_TEXT
("9223372036854775807"));

93 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-9223372036854775807L), 
	`JSON_TEXT
("-9223372036854775807"));

96 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

97 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

98 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

99 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

100 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

101 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-0), 
	`JSON_TEXT
("0"));

102 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-15), 
	`JSON_TEXT
("-15"));

103 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-127), 
	`JSON_TEXT
("-127"));

104 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-32767), 
	`JSON_TEXT
("-32767"));

105 
	`as£πEquÆs
(
NumbîToSåög
::
_ôﬂ
<>(()-2147483647), 
	`JSON_TEXT
("-2147483647"));

108 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/_itoa.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__ITOA_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__ITOA_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__ôﬂ
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__ôﬂ
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Ch¨
();

10 
	`ã°Sh‹t
();

11 
	`ã°I¡
();

12 
	`ã°L⁄g
();

13 
	`ã°L⁄gL⁄g
();

14 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/_uitoa.cpp

1 
	~"_uôﬂ.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

8 
	gã°NumbîToSåög__uôﬂ
::
	$ã°Ch¨
(){

9 #i‚de‡
JSON_LIBRARY


10 
	`as£πEquÆs
((), 1);

11 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()255), 
	`JSON_TEXT
("255"));

12 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

13 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

14 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

16 
	}
}

22 
	gã°NumbîToSåög__uôﬂ
::
	$ã°Sh‹t
(){

23 #i‚de‡
JSON_LIBRARY


24 
	`as£πEquÆs
((), 2);

25 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()65535), 
	`JSON_TEXT
("65535"));

26 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

27 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

28 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

29 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

31 
	}
}

37 
	gã°NumbîToSåög__uôﬂ
::
	$ã°I¡
(){

38 #i‚de‡
JSON_LIBRARY


39 
	`as£πEquÆs
((), 4);

40 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()4294967295u), 
	`JSON_TEXT
("4294967295"));

41 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

42 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

43 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

44 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

45 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

47 
	}
}

53 
	gã°NumbîToSåög__uôﬂ
::
	$ã°L⁄g
(){

54 #i‚de‡
JSON_LIBRARY


55 #ifde‡
TEST_LONG_EXTREMES


57 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()18446744073709551615UL), 
	`JSON_TEXT
("18446744073709551615"));

58 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()9223372036854775807L), 
	`JSON_TEXT
("9223372036854775807"));

61 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

62 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

63 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

64 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

65 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

67 
	}
}

73 
	gã°NumbîToSåög__uôﬂ
::
	$ã°L⁄gL⁄g
(){

74 #i‚de‡
JSON_LIBRARY


75 #i‚de‡
JSON_ISO_STRICT


76 #ifde‡
TEST_LONG_EXTREMES


78 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()18446744073709551615UL), 
	`JSON_TEXT
("18446744073709551615"));

79 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()9223372036854775807L), 
	`JSON_TEXT
("9223372036854775807"));

80 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()-9223372036854775807L), 
	`JSON_TEXT
("-9223372036854775807"));

83 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()2147483647), 
	`JSON_TEXT
("2147483647"));

84 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()32767), 
	`JSON_TEXT
("32767"));

85 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()127), 
	`JSON_TEXT
("127"));

86 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()15), 
	`JSON_TEXT
("15"));

87 
	`as£πEquÆs
(
NumbîToSåög
::
_uôﬂ
<>(()0), 
	`JSON_TEXT
("0"));

90 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/_uitoa.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__UITOA_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__UITOA_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__uôﬂ
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__uôﬂ
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Ch¨
();

10 
	`ã°Sh‹t
();

11 
	`ã°I¡
();

12 
	`ã°L⁄g
();

13 
	`ã°L⁄gL⁄g
();

14 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/getLenSize.cpp

1 
	~"gëLíSize.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

9 
	gã°NumbîToSåög__gëLíSize
::
	$ã°Såu˘
(){

10 
	`as£πEquÆs
(
gëLíSize
<1>::
GETLEN
, 5);

11 
	`as£πEquÆs
(
gëLíSize
<2>::
GETLEN
, 7);

12 
	`as£πEquÆs
(
gëLíSize
<4>::
GETLEN
, 12);

13 
	`as£πEquÆs
(
gëLíSize
<8>::
GETLEN
, 22);

14 
	`as£πEquÆs
(
gëLíSize
<16>::
GETLEN
, 41);

15 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/getLenSize.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__GET_LEN_SIZE_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__GET_LEN_SIZE_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__gëLíSize
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__gëLíSize
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){}

9 
	`ã°Såu˘
();

10 
	}
};

	@libjson/_internal/TestSuite2/NumberToString/isNumeric.cpp

1 
	~"isNumîic.h
"

2 
	~"../../Sour˚/NumbîToSåög.h
"

17 
	gã°NumbîToSåög__isNumîic
::
ã°NumbîToSåög__isNumîic
(c⁄° 
°d
::
°rög
 & 
«me
Ë: 
	$Ba£Te°
(
«me
){

25 
	}
}

26 
ã°NumbîToSåög__isNumîic
::~
	$ã°NumbîToSåög__isNumîic
(){

28 
	}
}

34 
ã°NumbîToSåög__isNumîic
::
	$ã°Posôive
(){

35 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

36 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("123")));

37 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("12.3")));

38 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.123")));

39 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0")));

40 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.")));

41 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.")));

42 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1")));

43 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0")));

44 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0")));

45 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.01")));

47 
	}
}

53 
	gã°NumbîToSåög__isNumîic
::
	$ã°Neg©ive
(){

54 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

55 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-123")));

56 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-12.3")));

57 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.123")));

58 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0")));

59 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.")));

60 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1")));

61 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.")));

62 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0")));

63 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0")));

65 
	}
}

70 
	gã°NumbîToSåög__isNumîic
::
	$ã°Posôive_Scõ¡ificNŸ©i⁄
(){

71 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

72 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e123")));

73 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e12.3")));

74 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e123")));

75 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e12.3")));

76 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e123")));

77 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e12.3")));

79 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e2")));

80 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e2")));

81 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.e2")));

82 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e2")));

83 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0e2")));

84 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e2")));

86 
	}
}

91 
	gã°NumbîToSåög__isNumîic
::
	$ã°Neg©ive_Scõ¡ificNŸ©i⁄
(){

92 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

93 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e123")));

94 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e12.3")));

95 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e123")));

96 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e12.3")));

97 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e123")));

98 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e12.3")));

100 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e2")));

101 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e2")));

102 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e2")));

103 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e2")));

104 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e2")));

105 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e2")));

107 
	}
}

113 
	gã°NumbîToSåög__isNumîic
::
	$ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
(){

114 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

115 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e-123")));

116 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e+123")));

117 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e-12.3")));

118 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e+12.3")));

119 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e-123")));

120 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e+123")));

121 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e-12.3")));

122 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e+12.3")));

123 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e-123")));

124 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e+123")));

125 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e-12.3")));

126 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e+12.3")));

128 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e2")));

129 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e2")));

130 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.e2")));

131 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.e2")));

132 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0.0e2")));

133 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1.0e2")));

135 
	}
}

141 
	gã°NumbîToSåög__isNumîic
::
	$ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
(){

142 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

143 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e-123")));

144 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e+123")));

145 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e-12.3")));

146 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e+12.3")));

147 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e-123")));

148 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e+123")));

149 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e-12.3")));

150 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e+12.3")));

151 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e-12.3")));

152 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e+12.3")));

153 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e-123")));

154 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e+123")));

155 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e-12.3")));

156 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e+12.3")));

158 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e-2")));

159 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e-2")));

160 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e-2")));

161 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e-2")));

162 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e-2")));

163 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e-2")));

164 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0e+2")));

165 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1e+2")));

166 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.e+2")));

167 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.e+2")));

168 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0.0e+2")));

169 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-1.0e+2")));

171 
	}
}

178 
	gã°NumbîToSåög__isNumîic
::
	$ã°Såi˘
(){

179 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

180 #ifde‡
JSON_STRICT


181 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00")));

182 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00.01")));

183 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
(".01")));

184 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-.01")));

185 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+123")));

186 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+12.3")));

187 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.123")));

188 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0")));

189 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.")));

190 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e123")));

191 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-123")));

192 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+123")));

193 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e123")));

194 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-123")));

195 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+123")));

196 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e123")));

197 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-123")));

198 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+123")));

199 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e123")));

200 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e12.3")));

201 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-12.3")));

202 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+12.3")));

203 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e12.3")));

204 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-12.3")));

205 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+12.3")));

206 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e12.3")));

207 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-12.3")));

208 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+12.3")));

209 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e12.3")));

211 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0x12FF")));

212 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0128")));

213 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0123")));

214 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0128")));

215 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0123")));

217 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCD")));

218 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0124")));

219 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1")));

220 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.")));

221 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0")));

222 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0")));

223 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e2")));

224 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e2")));

225 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e2")));

226 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e2")));

227 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e2")));

228 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e2")));

229 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-2")));

230 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e-2")));

231 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e-2")));

232 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-2")));

233 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e-2")));

234 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-2")));

235 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+2")));

236 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e+2")));

237 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e+2")));

238 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+2")));

239 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e+2")));

240 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+2")));

242 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e-0123")));

245 
	}
}

252 
	gã°NumbîToSåög__isNumîic
::
	$ã°NŸSåi˘
(){

253 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

254 #i‚de‡
JSON_STRICT


255 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00")));

256 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00.01")));

257 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
(".01")));

258 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-.01")));

259 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+123")));

260 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+12.3")));

261 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.123")));

262 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0")));

263 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.")));

264 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e123")));

265 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-123")));

266 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+123")));

267 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e123")));

268 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-123")));

269 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+123")));

270 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e123")));

271 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-123")));

272 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+123")));

273 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e123")));

275 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0x12FF")));

276 #ifde‡
JSON_OCTAL


277 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0128")));

278 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0123")));

279 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0128")));

280 
	`as£πTrue
(
NumbîToSåög
::
	`_©of
(
	`JSON_TEXT
("-0123")));

282 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0128")));

283 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0123")));

284 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0128")));

285 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-0123")));

289 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCD")));

290 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0124")));

291 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0")));

292 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1")));

293 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.")));

294 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.")));

295 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0")));

296 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0")));

297 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e2")));

298 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e2")));

299 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e2")));

300 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e2")));

301 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e2")));

302 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e2")));

303 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e-2")));

304 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e-2")));

305 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e-2")));

306 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e-2")));

307 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e-2")));

308 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e-2")));

309 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0e+2")));

310 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1e+2")));

311 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.e+2")));

312 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.e+2")));

313 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+0.0e+2")));

314 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("+1.0e+2")));

316 
	`as£πTrue
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("1e-0123")));

319 
	}
}

326 
	gã°NumbîToSåög__isNumîic
::
	$ã°NŸNumbîs
(){

327 #i‡
	`deföed
(
JSON_SAFE
Ë|| deföed(
JSON_DEBUG
)

328 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("")));

329 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-.")));

330 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("-e12")));

331 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0xABCDv")));

332 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("00124")));

333 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("09124")));

334 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0no")));

335 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("no")));

336 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("n1234")));

337 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("12no")));

338 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0en5")));

339 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0e")));

340 
	`as£πFÆ£
(
NumbîToSåög
::
	`isNumîic
(
	`JSON_TEXT
("0E")));

342 
	}
}

	@libjson/_internal/TestSuite2/NumberToString/isNumeric.h

1 #i‚de‡
JSON_TESTSUITE_NUMBER_TO_STRING__IS_NUMERIC_H


2 
	#JSON_TESTSUITE_NUMBER_TO_STRING__IS_NUMERIC_H


	)

4 
	~"../Ba£Te°.h
"

6 ˛as†
	cã°NumbîToSåög__isNumîic
 : 
public
 
Ba£Te°
 {

7 
public
:

8 
ã°NumbîToSåög__isNumîic
(c⁄° 
°d
::
°rög
 & 
«me
);

9 
	mvútuÆ
 ~
ã°NumbîToSåög__isNumîic
();

10 
ã°Posôive
();

11 
ã°Neg©ive
();

12 
ã°Posôive_Scõ¡ificNŸ©i⁄
();

13 
ã°Neg©ive_Scõ¡ificNŸ©i⁄
();

14 
ã°Posôive_Sig√dScõ¡ificNŸ©i⁄
();

15 
ã°Neg©ive_Sig√dScõ¡ificNŸ©i⁄
();

16 
ã°Såi˘
();

17 
ã°NŸSåi˘
();

18 
ã°NŸNumbîs
();

	@libjson/libjson.h

1 #i‚de‡
LIBJSON_H


2 
	#LIBJSON_H


	)

4 
	~"_öã∫Æ/Sour˚/JSONDefs.h
"

13 #ifde‡
JSON_LIBRARY


15 #ifde‡
__˝lu•lus


19 #ifde‡
JSON_NO_C_CONSTS


21 
	#js⁄_c⁄°


	)

22 
	#TOCONST_CSTR
(
x
Ë
c⁄°_ˇ°
<c⁄° 
js⁄_ch¨
 *>(x)

	)

24 
	#js⁄_c⁄°
 c⁄°

	)

25 
	#TOCONST_CSTR
(
x
Ë
	)
x

31 
js⁄_‰ì
(* 
°r
);

32 
js⁄_dñëe
(
JSONNODE
 * 
node
);

33 #ifde‡
JSON_MEMORY_MANAGE


34 
js⁄_‰ì_Æl
();

35 
js⁄_dñëe_Æl
();

37 #ifde‡
JSON_READ_PRIORITY


38 
JSONNODE
 * 
js⁄_∑r£
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

39 
JSONNODE
 * 
js⁄_∑r£_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

41 
js⁄_ch¨
 * 
js⁄_°rù_whôe_•a˚
(
js⁄_c⁄°
 js⁄_ch¨ * 
js⁄
);

42 #ifde‡
JSON_VALIDATE


43 #ifde‡
JSON_DEPRECATED_FUNCTIONS


44 
JSONNODE
 * 
js⁄_dïªˇãd
(
js⁄_vÆid©e
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
), "json_validate is deprecated, use json_is_validánd json_parse instead");

46 
js⁄_boﬁ_t
 
js⁄_is_vÆid
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

47 
js⁄_boﬁ_t
 
js⁄_is_vÆid_unf‹m©ãd
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
js⁄
);

49 #i‡
deföed
 
JSON_DEBUG
 && !deföed 
JSON_STDERROR


51 
js⁄_ªgi°î_debug_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
);

53 #ifde‡
JSON_MUTEX_CALLBACKS


54 #ifde‡
JSON_MUTEX_MANAGE


55 
js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, js⁄_muãx_ˇŒback_à
de°roy
, * 
m™agî_lock
);

57 
js⁄_ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
);

59 
js⁄_£t_globÆ_muãx
(* 
muãx
);

60 
js⁄_£t_muãx
(
JSONNODE
 * 
node
, * 
muãx
);

61 
js⁄_lock
(
JSONNODE
 * 
node
, 
thªadid
);

62 
js⁄_u∆ock
(
JSONNODE
 * 
node
, 
thªadid
);

64 #ifde‡
JSON_MEMORY_CALLBACKS


65 
js⁄_ªgi°î_mem‹y_ˇŒbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
);

68 #ifde‡
JSON_STREAM


69 
JSONSTREAM
 * 
js⁄_√w_°ªam
(
js⁄_°ªam_ˇŒback_t
 
ˇŒback
, 
js⁄_°ªam_e_ˇŒback_t
 
e_ˇŒback
, * 
idítifõr
);

70 
js⁄_°ªam_push
(
JSONSTREAM
 * 
°ªam
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
addídum
);

71 
js⁄_dñëe_°ªam
(
JSONSTREAM
 * 
°ªam
);

72 
js⁄_°ªam_ª£t
(
JSONSTREAM
 * 
°ªam
);

80 
JSONNODE
 * 
js⁄_√w_a
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, js⁄_c⁄° js⁄_ch¨ * 
vÆue
);

81 
JSONNODE
 * 
js⁄_√w_i
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_öt_t
 
vÆue
);

82 
JSONNODE
 * 
js⁄_√w_f
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_numbî
 
vÆue
);

83 
JSONNODE
 * 
js⁄_√w_b
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
, 
js⁄_boﬁ_t
 
vÆue
);

84 
JSONNODE
 * 
js⁄_√w
(
ty≥
);

85 
JSONNODE
 * 
js⁄_c›y
(
js⁄_c⁄°
 JSONNODE * 
‹ig
);

86 
JSONNODE
 * 
js⁄_du∂iˇã
(
js⁄_c⁄°
 JSONNODE * 
‹ig
);

89 
js⁄_£t_a
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
vÆue
);

90 
js⁄_£t_i
(
JSONNODE
 * 
node
, 
js⁄_öt_t
 
vÆue
);

91 
js⁄_£t_f
(
JSONNODE
 * 
node
, 
js⁄_numbî
 
vÆue
);

92 
js⁄_£t_b
(
JSONNODE
 * 
node
, 
js⁄_boﬁ_t
 
vÆue
);

93 
js⁄_£t_n
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 JSONNODE * 
‹ig
);

96 
js⁄_ty≥
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

97 
js⁄_ödex_t
 
js⁄_size
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

98 
js⁄_boﬁ_t
 
js⁄_em±y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

99 
js⁄_ch¨
 * 
js⁄_«me
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

100 #ifde‡
JSON_COMMENTS


101 
js⁄_ch¨
 * 
js⁄_gë_commít
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

103 
js⁄_ch¨
 * 
js⁄_as_°rög
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

104 
js⁄_öt_t
 
js⁄_as_öt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

105 
js⁄_numbî
 
js⁄_as_Êﬂt
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

106 
js⁄_boﬁ_t
 
js⁄_as_boﬁ
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

107 #ifde‡
JSON_CASTABLE


108 
JSONNODE
 * 
js⁄_as_node
(
js⁄_c⁄°
 JSONNODE * 
node
);

109 
JSONNODE
 * 
js⁄_as_¨øy
(
js⁄_c⁄°
 JSONNODE * 
node
);

111 #ifde‡
JSON_BINARY


112 * 
js⁄_as_bö¨y
(
js⁄_c⁄°
 
JSONNODE
 * 
node
, * 
size
);

114 #ifde‡
JSON_WRITE_PRIORITY


115 
js⁄_ch¨
 * 
js⁄_wrôe
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

116 
js⁄_ch¨
 * 
js⁄_wrôe_f‹m©ãd
(
js⁄_c⁄°
 
JSONNODE
 * 
node
);

120 
js⁄_£t_«me
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

121 #ifde‡
JSON_COMMENTS


122 
js⁄_£t_commít
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
commít
);

124 
js⁄_˛ór
(
JSONNODE
 * 
node
);

125 
js⁄_nuŒify
(
JSONNODE
 * 
node
);

126 
js⁄_sw≠
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

127 
js⁄_mîge
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

128 #i‡!
deföed
 (
JSON_PREPARSE
Ë&& deföed(
JSON_READ_PRIORITY
)

129 
js⁄_¥ï¨£
(
JSONNODE
 * 
node
);

131 #ifde‡
JSON_BINARY


132 
js⁄_£t_bö¨y
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 * 
d©a
, 
Àngth
);

134 #ifde‡
JSON_EXPOSE_BASE64


135 
js⁄_ch¨
 * 
js⁄_ícode64
(
js⁄_c⁄°
 * 
bö¨y
, 
js⁄_ödex_t
 
byãs
);

136 * 
js⁄_decode64
(
js⁄_c⁄°
 
js⁄_ch¨
 * 
ãxt
, * 
size
);

138 #ifde‡
JSON_CASTABLE


139 
js⁄_ˇ°
(
JSONNODE
 * 
node
, 
ty≥
);

143 
js⁄_ª£rve
(
JSONNODE
 * 
node
, 
js⁄_ödex_t
 
siz
);

144 
JSONNODE
 * 
js⁄_©
(JSONNODE * 
node
, 
js⁄_ödex_t
 
pos
);

145 
JSONNODE
 * 
js⁄_gë
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

146 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


147 
JSONNODE
 * 
js⁄_gë_noˇ£
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

148 
JSONNODE
 * 
js⁄_p›_back_noˇ£
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

150 
js⁄_push_back
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

151 
JSONNODE
 * 
js⁄_p›_back_©
(JSONNODE * 
node
, 
js⁄_ödex_t
 
pos
);

152 
JSONNODE
 * 
js⁄_p›_back
(JSONNODE * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

153 #ifde‡
JSON_ITERATORS


154 
JSONNODE_ITERATOR
 
js⁄_föd
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

155 #ifde‡
JSON_CASE_INSENSITIVE_FUNCTIONS


156 
JSONNODE_ITERATOR
 
js⁄_föd_noˇ£
(
JSONNODE
 * 
node
, 
js⁄_c⁄°
 
js⁄_ch¨
 * 
«me
);

158 
JSONNODE_ITERATOR
 
js⁄_îa£
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
);

159 
JSONNODE_ITERATOR
 
js⁄_îa£_mu…i
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
°¨t
, JSONNODE_ITERATOR 
íd
);

160 
JSONNODE_ITERATOR
 
js⁄_ö£π
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
, JSONNODE * 
node2
);

161 
JSONNODE_ITERATOR
 
js⁄_ö£π_mu…i
(
JSONNODE
 * 
node
, JSONNODE_ITERATOR 
ô
, JSONNODE_ITERATOR 
°¨t
, JSONNODE_ITERATOR 
íd
);

164 
JSONNODE_ITERATOR
 
js⁄_begö
(
JSONNODE
 * 
node
);

165 
JSONNODE_ITERATOR
 
js⁄_íd
(
JSONNODE
 * 
node
);

169 
js⁄_boﬁ_t
 
js⁄_equÆ
(
JSONNODE
 * 
node
, JSONNODE * 
node2
);

171 #ifde‡
__˝lu•lus


176 #i‚de‡
__˝lu•lus


177 #îr‹ 
Tu∫ög
 
off
 
JSON_LIBRARY
 
ªquúes
 
C
++

179 
	~"_öã∫Æ/Sour˚/JSONNode.h
"

180 
	~"_öã∫Æ/Sour˚/JSONW‹kî.h
"

181 
	~"_öã∫Æ/Sour˚/JSONVÆid©‹.h
"

182 
	~"_öã∫Æ/Sour˚/JSONSåóm.h
"

183 
	~"_öã∫Æ/Sour˚/JSONPª∑r£.h
"

184 #ifde‡
JSON_EXPOSE_BASE64


185 
	~"_öã∫Æ/Sour˚/JSON_Ba£64.h
"

187 #i‚de‡
JSON_NO_EXCEPTIONS


188 
	~<°dex˚±
>

191 
	~<cwch¨
>

192 
	~<°rög
>

194 
«me•a˚
 
libjs⁄
 {

195 #ifde‡
JSON_EXPOSE_BASE64


196 
ölöe
 
js⁄_°rög
 
ícode64
(c⁄° * 
bö¨y
, 
size_t
 
byãs
Ë
js⁄_nŸhrow
 {

197  
JSONBa£64
::
js⁄_ícode64
(
bö¨y
, 
byãs
);

200 
ölöe
 
°d
::
°rög
 
decode64
(c⁄° 
js⁄_°rög
 & 
ícoded
Ë
js⁄_nŸhrow
 {

201  
JSONBa£64
::
js⁄_decode64
(
ícoded
);

206 
ölöe
 
js⁄_°rög
 
°rù_whôe_•a˚
(c⁄° js⁄_°rög & 
js⁄
Ë
js⁄_nŸhrow
 {

207  
JSONW‹kî
::
RemoveWhôeS∑˚AndCommíts
(
js⁄
, 
Ál£
);

210 #i‚de‡
JSON_STRING_HEADER


211 
ölöe
 
°d
::
°rög
 
to_°d_°rög
(c⁄° 
js⁄_°rög
 & 
°r
){

212 #i‡
deföed
(
JSON_UNICODE
Ë||deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

213  
°d
::
°rög
(
°r
.
begö
(), så.
íd
());

215  
°r
;

218 
ölöe
 
°d
::
w°rög
 
to_°d_w°rög
(c⁄° 
js⁄_°rög
 & 
°r
){

219 #i‡(!
deföed
(
JSON_UNICODE
)Ë|| deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

220  
°d
::
w°rög
(
°r
.
begö
(), så.
íd
());

222  
°r
;

226 
ölöe
 
js⁄_°rög
 
to_js⁄_°rög
(c⁄° 
°d
::
°rög
 & 
°r
){

227 #i‡
deföed
(
JSON_UNICODE
Ë||deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

228  
js⁄_°rög
(
°r
.
begö
(), så.
íd
());

230  
°r
;

233 
ölöe
 
js⁄_°rög
 
to_js⁄_°rög
(c⁄° 
°d
::
w°rög
 & 
°r
){

234 #i‡(!
deföed
(
JSON_UNICODE
)Ë|| deföed(
JSON_MEMORY_CALLBACKS
Ë|| deföed(
JSON_MEMORY_POOL
)

235  
js⁄_°rög
(
°r
.
begö
(), så.
íd
());

237  
°r
;

242 #ifde‡
JSON_READ_PRIORITY


244 
ölöe
 
JSONNode
 
∑r£
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_throws
(
°d
::
övÆid_¨gumít
) {

245 #ifde‡
JSON_PREPARSE


246 
size_t
 
Àn
;

247 
js⁄_auto
<
js⁄_ch¨
> 
buf„r
(
JSONW‹kî
::
RemoveWhôeS∑˚
(
js⁄
, 
Àn
, 
Ál£
));

248  
JSONPª∑r£
::
isVÆidRoŸ
(
buf„r
.
±r
);

250  
JSONW‹kî
::
∑r£
(
js⁄
);

254 
ölöe
 
JSONNode
 
∑r£_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_throws
(
°d
::
övÆid_¨gumít
) {

255 #ifde‡
JSON_PREPARSE


256  
JSONPª∑r£
::
isVÆidRoŸ
(
js⁄
);

258  
JSONW‹kî
::
∑r£_unf‹m©ãd
(
js⁄
);

262 #ifde‡
JSON_VALIDATE


263 
ölöe
 
boﬁ
 
is_vÆid
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_nŸhrow
 {

264 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


265 i‡(
js⁄_u∆ikñy
(
js⁄
.
Àngth
(Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

266 
JSON_FAIL
(
JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

267  
Ál£
;

270 
js⁄_auto
<
js⁄_ch¨
> 
s
;

271 
s
.
£t
(
JSONW‹kî
::
RemoveWhôeS∑˚AndCommítsC
(
js⁄
, 
Ál£
));

272  
JSONVÆid©‹
::
isVÆidRoŸ
(
s
.
±r
);

275 
ölöe
 
boﬁ
 
is_vÆid_unf‹m©ãd
(c⁄° 
js⁄_°rög
 & 
js⁄
Ë
js⁄_nŸhrow
 {

276 #ifde‡
JSON_SECURITY_MAX_STRING_LENGTH


277 i‡(
js⁄_u∆ikñy
(
js⁄
.
Àngth
(Ë> 
JSON_SECURITY_MAX_STRING_LENGTH
)){

278 
JSON_FAIL
(
JSON_TEXT
("Exceeding JSON_SECURITY_MAX_STRING_LENGTH"));

279  
Ál£
;

282  
JSONVÆid©‹
::
isVÆidRoŸ
(
js⁄
.
c_°r
());

284 #ifde‡
JSON_DEPRECATED_FUNCTIONS


285 #ifde‡
JSON_NO_EXCEPTIONS


286 #îr‹, 
JSON_DEPRECATED_FUNCTIONS
 
ªquúes
 
JSON_NO_EXCEPTIONS
 
be
 
off


289 
ölöe
 
JSONNode
 
js⁄_dïªˇãd
(
vÆid©e
(c⁄° 
js⁄_°rög
 & 
js⁄
), "libjson::validate is deprecated, useÜibjson::is_validándÜibjson::parse instead");

295 #i‡
deföed
 
JSON_DEBUG
 && !deföed 
JSON_STDERROR


296 
ölöe
 
ªgi°î_debug_ˇŒback
(
js⁄_îr‹_ˇŒback_t
 
ˇŒback
Ë
js⁄_nŸhrow
 {

297 
JSONDebug
::
ªgi°î_ˇŒback
(
ˇŒback
);

301 #ifde‡
JSON_MUTEX_CALLBACKS


302 #ifde‡
JSON_MUTEX_MANAGE


303 
ölöe
 
ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, js⁄_muãx_ˇŒback_à
de°roy
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 {

304 
JSONNode
::
ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

305 
JSONNode
::
ªgi°î_muãx_de°ru˘‹
(
de°roy
);

308 
ölöe
 
ªgi°î_muãx_ˇŒbacks
(
js⁄_muãx_ˇŒback_t
 
lock
, js⁄_muãx_ˇŒback_à
u∆ock
, * 
m™agî_lock
Ë
js⁄_nŸhrow
 {

309 
JSONNode
::
ªgi°î_muãx_ˇŒbacks
(
lock
, 
u∆ock
, 
m™agî_lock
);

313 
ölöe
 
£t_globÆ_muãx
(* 
muãx
Ë
js⁄_nŸhrow
 {

314 
JSONNode
::
£t_globÆ_muãx
(
muãx
);

318 #ifde‡
JSON_MEMORY_CALLBACKS


319 
ölöe
 
ªgi°î_mem‹y_ˇŒbacks
(
js⁄_mÆloc_t
 
mÆ
, 
js⁄_ªÆloc_t
 
ªÆ
, 
js⁄_‰ì_t
 
‰e
Ë
js⁄_nŸhrow
 {

320 
JSONMem‹y
::
ªgi°îMem‹yCÆlbacks
(
mÆ
, 
ªÆ
, 
‰e
);

325 #ifde‡
JSON_VALIDATE


326 #ifde‡
JSON_DEPRECATED_FUNCTIONS


328 
ölöe
 
JSONNode
 
libjs⁄
::
	$vÆid©e
(c⁄° 
js⁄_°rög
 & 
js⁄
) {

329 i‡(
	`js⁄_likñy
(
	`is_vÆid
(
js⁄
))){

330  
	`∑r£
(
js⁄
);

332 
throw
 
°d
::
	`övÆid_¨gumít
("");

333 
	}
}

	@pageparser.hpp

1 #i‚de‡
PAGEPARSERHPP


2 
	#PAGEPARSERHPP


	)

4 
	~"js⁄∑r£r.hµ
"

5 
	~<°rög
>

6 
	~<ˇs£π
>

9 ˛as†
	c∑gï¨£r


11 
	m¥Ÿe˘ed
:

12 
°rög
 
ªsu…_
;

13 
°rög
 
	mto_∑r£r_∑ge_
;

14 
js⁄∑r£r
 
	mj∑r£r_
;

19 
	mpublic
:

21 
vútuÆ
 ~
	$∑gï¨£r
()

25 
vútuÆ
 
°rög
 
	$gëResu…
 ()

27 
°d
::
°rög
::
size_ty≥
 
pos
;

29 
pos
 = 
ªsu…_
.
	`föd
("\\");

30  
pos
 !
°rög
::
≈os
 )

33 
ªsu…_
.
	`îa£
(
pos
,1);

34 
pos
 = 
ªsu…_
.
	`föd
("\\");

38  
ªsu…_
;

40 
	}
}

44 
°rög
 
	$£tPage
 (c⁄° 
°rög
 &
∑ge
 )

46 
to_∑r£r_∑ge_
 = 
∑ge
;

47 
	}
}

50 
vútuÆ
 
∑r£r
 () = 0;

52 
	$∑r£r
 ( c⁄° 
°rög
 &
∑ge
 )

54 
to_∑r£r_∑ge_
 = 
∑ge
;

55 
	`∑r£r
 ();

57 
	}
}

	@test/libjson_baidu.cpp

1 
	~<libjs⁄.h
>

2 
	~<f°ªam
>

3 
	~<io°ªam
>

4 
	~<°rög
>

5 
usög
 
«me•a˚
 
	g°d
;

9 
∑r£rJs⁄
 ( c⁄° 
JSONNode
 & );

12 
	$maö
 ()

14 
if°ªam
 
	`ifûe
("baidu.json");

15 
°rög
 
w‹d
, 
c⁄ã¡
 ;

16  
ifûe
 >> 
w‹d
 )

17 
c⁄ã¡
 +
w‹d
 + ' ';

19 
cout
 << "thêc⁄ã¡ i†:" << 
c⁄ã¡
 << 
ídl
 ;

21 
JSONNode
 
n
 = 
libjs⁄
::
	`∑r£
–
c⁄ã¡
 );

22 
	`∑r£rJs⁄
 ( 
n
 );

25 
	}
}

27 
	$∑r£rJs⁄
 ( c⁄° 
JSONNode
 & 
n
 )

29 
JSONNode
::
c⁄°_ôî©‹
 
i
 = 
n
.
	`begö
();

30 
i
 !
n
.
	`íd
()){

32 i‡(
i
 -> 
	`ty≥
(Ë=
JSON_ARRAY
 || i ->Åy≥(Ë=
JSON_NODE
){

33 
	`∑r£rJs⁄
(*
i
);

37 
cout
 << " " << 
i
 -> 
	`«me
() ;

41 ++
i
;

44 
cout
 << 
ídl
 ;

46 
	}
}

	@testbaidu.cc

1 
	~"baiduEngöe.hµ
"

2 
	~"js⁄∑r£r.hµ
"

3 
	~"baidu∑r£r.hµ
"

4 
	~"googÀ∑r£r.hµ
"

5 
	~<f°ªam
>

6 
	~<io°ªam
>

7 
usög
 
«me•a˚
 
	g°d
;

11 
	$maö
 ( 
¨gc
 , *
¨gv
[] )

14 
°rög
 
	`fûíame
(
¨gv
[1]);

15 
°rög
 
löe
, 
html
;

17 
if°ªam
 
	`öfûe
(
fûíame
.
	`c_°r
());

18  
	`gëlöe
(
öfûe
, 
löe
))

19 
html
 +
löe
;

53 
googÀ∑r£r
 
g∑r£r
;

55 
g∑r£r
.
	`∑r£r
(
html
);

56 
cout
 << 
g∑r£r
.
	`gëResu…
(Ë<< 
ídl
;

61 
	}
}

	@testjson.cc

1 
	~"js⁄∑r£r.hµ
"

3 
	~<io°ªam
>

4 
	~<f°ªam
>

5 
	~<°rög
>

7 
usög
 
«me•a˚
 
	g°d
;

9 
	$maö
 ( 
¨gc
, *
¨gv
[] )

11 
if°ªam
 
öfûe
;

12 
°rög
 
°r
;

13 
°rög
 
löe
;

15 
öfûe
.
	`›í
(
¨gv
[1]);

17  
	`gëlöe
(
öfûe
, 
löe
))

18 
°r
 +
löe
;

20 
cout
 << 
°r
 << 
ídl
;

22 
°rög
 
ªsu…
;

25 
js⁄∑r£r
 
j∑r£r
;

26 
j∑r£r
.
	`∑r£rJs⁄
(
°r
);

27 
j∑r£r
.
	`li°Js⁄
();

30 
ªsu…
 = 
j∑r£r
.
	`gëVÆue
(
	`°rög
("\"data\""));

31 
cout
 << "\"d©a\":" << 
ªsu…
 << 
ídl
;

33 
ªsu…
.
	`˛ór
();

35 i‡–
¨gc
 > 2 )

37 
ªsu…
 = 
	`°rög
(
¨gv
[2]);

41 
ªsu…
 = 
j∑r£r
.
	`gëVÆue
(Ñesult );

42 
cout
 << 
ªsu…
 << ":" <<Ñesu… << 
ídl
;

49 
	}
}

	@../include/Node.h

1 #i‚de‡
__HTML_PARSER_NODE_H


2 
	#__HTML_PARSER_NODE_H


	)

4 
	~<m≠
>

5 
	~<°rög
>

6 
	~<utûôy
>

8 
«me•a˚
 
	ghtmlcxx
 {

9 
«me•a˚
 
	gHTML
 {

10 ˛as†
	cNode
 {

12 
	gpublic
:

13 
Node
() {}

15 ~
Node
() {}

17 
ölöe
 
ãxt
(c⁄° 
°d
::
°rög
&ÅextË{ 
this
->
mText
 =Åext; }

18 
ölöe
 c⁄° 
	g°d
::
°rög
& 
ãxt
(Ëc⁄° {  
this
->
mText
; }

20 
ölöe
 
˛osögText
(c⁄° 
°d
::
°rög
 &
ãxt
Ë{ 
this
->
mClosögText
 =Åext; }

21 
ölöe
 c⁄° 
	g°d
::
°rög
& 
˛osögText
(Ëc⁄° {  
mClosögText
; }

23 
ölöe
 
off£t
(off£tË{ 
	gthis
->
	gmOff£t
 = offset; }

24 
ölöe
 
off£t
(Ëc⁄° {  
	gthis
->
	gmOff£t
; }

26 
ölöe
 
Àngth
(ÀngthË{ 
	gthis
->
	gmLígth
 =Üength; }

27 
ölöe
 
Àngth
(Ëc⁄° {  
	gthis
->
	gmLígth
; }

29 
ölöe
 
ègName
(c⁄° 
°d
::
°rög
& 
èg«me
Ë{ 
this
->
mTagName
 =Åagname; }

30 
ölöe
 c⁄° 
	g°d
::
°rög
& 
ègName
(Ëc⁄° {  
this
->
mTagName
; }

32 
boﬁ
 
isTag
(Ëc⁄° {  
	gthis
->
	gmIsHtmlTag
; }

33 
isTag
(
boﬁ
 
is_html_èg
){ 
	gthis
->
	gmIsHtmlTag
 = is_html_tag; }

35 
boﬁ
 
isCommít
(Ëc⁄° {  
	gthis
->
	gmCommít
; }

36 
isCommít
(
boﬁ
 
commít
){ 
	gthis
->
	gmCommít
 = comment; }

38 
	g°d
::
∑ú
<
boﬁ
, std::
°rög
> 
©åibuã
(c⁄° 
°d
::°rög &
©å
) const

40 
°d
::
m≠
<°d::
°rög
, 
	g°d
::°rög>::
c⁄°_ôî©‹
 
i
 = 
this
->
mAâribuãs
.
föd
(
©å
);

41 i‡(
	gi
 !
this
->
mAâribuãs
.
íd
()) {

42  
make_∑ú
(
åue
, 
i
->
£c⁄d
);

44  
make_∑ú
(
Ál£
, 
°d
::
°rög
());

48 
›î©‹
 
	g°d
::
°rög
() const;

49 
	g°d
::
o°ªam
 &
›î©‹
<<(
°d
::o°ªam &
°ªam
) const;

51 c⁄° 
	g°d
::
m≠
<
°d
::
°rög
, std::°rög>& 
©åibuãs
(Ëc⁄° {  
this
->
mAâribuãs
; }

52 
∑r£Aâribuãs
();

54 
boﬁ
 
	g›î©‹
==(c⁄° 
Node
 &
rhs
) const;

56 
	g¥Ÿe˘ed
:

58 
°d
::
°rög
 
mText
;

59 
	g°d
::
°rög
 
mClosögText
;

60 
	gmOff£t
;

61 
	gmLígth
;

62 
	g°d
::
°rög
 
mTagName
;

63 
	g°d
::
m≠
<
°d
::
°rög
, std::°rög> 
mAâribuãs
;

64 
boﬁ
 
	gmIsHtmlTag
;

65 
boﬁ
 
	gmCommít
;

	@../include/ParserSax.h

1 #i‚de‡
__HTML_PARSER_SAX_H__


2 
	#__HTML_PARSER_SAX_H__


	)

4 
	~<°rög
>

6 
	~"Node.h
"

10 
«me•a˚
 
	ghtmlcxx


12 
«me•a˚
 
	gHTML


14 ˛as†
	cP¨£rSax


16 
	gpublic
:

17 
P¨£rSax
(Ë: 
mpLôîÆ
(0), 
mCd©a
(
Ál£
) {}

18 
	gvútuÆ
 ~
P¨£rSax
() {}

21 
∑r£
(c⁄° 
°d
::
°rög
 &
html
);

23 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

24 
∑r£
(
_Iãøt‹
 
begö
, _Iãøt‹ 
íd
);

26 
	g¥Ÿe˘ed
:

29 
vútuÆ
 
begöP¨sög
() {}

32 
vútuÆ
 
foundTag
(
Node
 
node
, 
boﬁ
 
isEnd
) {}

33 
vútuÆ
 
foundText
(
Node
 
node
) {}

34 
vútuÆ
 
foundCommít
(
Node
 
node
) {}

36 
vútuÆ
 
ídP¨sög
() {}

39 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

40 
∑r£
(
_Iãøt‹
 &
begö
, _Iãøt‹ &
íd
,

41 
°d
::
f‹w¨d_ôî©‹_èg
);

43 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

44 
∑r£HtmlTag
(
_Iãøt‹
 
b
, _Iãøt‹ 
c
);

46 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

47 
∑r£C⁄ã¡
(
_Iãøt‹
 
b
, _Iãøt‹ 
c
);

49 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

50 
∑r£Commít
(
_Iãøt‹
 
b
, _Iãøt‹ 
c
);

52 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

53 
_Iãøt‹
 
skùHtmlTag
(_Iãøt‹ 
±r
, _Iãøt‹ 
íd
);

55 
	gãm∂©e
 <
ty≥«me
 
	g_Iãøt‹
>

56 
_Iãøt‹
 
skùHtmlCommít
(_Iãøt‹ 
±r
, _Iãøt‹ 
íd
);

58 
	gmCuºítOff£t
;

59 c⁄° *
	gmpLôîÆ
;

60 
boﬁ
 
	gmCd©a
;

66 
	~"P¨£rSax.tcc
"

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@
1
.
1
/usr/include
189
7971
JSONOptions.h
baiduEngine.cpp
baiduEngine.hpp
baiduparser.cpp
baiduparser.hpp
basictranslateEngine.hpp
googleparser.cpp
googleparser.hpp
json_array_node.cpp
json_array_node.hpp
json_base_node.hpp
jsonparser.cpp
jsonparser.hpp
libjson.h
libjson/._JSONOptions.h
libjson/JSONOptions.h
libjson/_internal/Dependencies/libbase64++/._libbase64++.h
libjson/_internal/Dependencies/libbase64++/libbase64++.h
libjson/_internal/Dependencies/mempool++/._mempool.h
libjson/_internal/Dependencies/mempool++/mempool.h
libjson/_internal/Source/._JSONAllocator.cpp
libjson/_internal/Source/._JSONAllocator.h
libjson/_internal/Source/._JSONChildren.cpp
libjson/_internal/Source/._JSONChildren.h
libjson/_internal/Source/._JSONDebug.cpp
libjson/_internal/Source/._JSONDebug.h
libjson/_internal/Source/._JSONDefs.h
libjson/_internal/Source/._JSONGlobals.h
libjson/_internal/Source/._JSONIterators.cpp
libjson/_internal/Source/._JSONMemory.cpp
libjson/_internal/Source/._JSONMemory.h
libjson/_internal/Source/._JSONMemoryPool.h
libjson/_internal/Source/._JSONNode.cpp
libjson/_internal/Source/._JSONNode.h
libjson/_internal/Source/._JSONNode_Mutex.cpp
libjson/_internal/Source/._JSONPreparse.cpp
libjson/_internal/Source/._JSONPreparse.h
libjson/_internal/Source/._JSONSharedString.h
libjson/_internal/Source/._JSONSingleton.h
libjson/_internal/Source/._JSONStats.h
libjson/_internal/Source/._JSONStream.cpp
libjson/_internal/Source/._JSONStream.h
libjson/_internal/Source/._JSONValidator.h
libjson/_internal/Source/._JSONWorker.cpp
libjson/_internal/Source/._JSONWorker.h
libjson/_internal/Source/._JSONWriter.cpp
libjson/_internal/Source/._JSON_Base64.h
libjson/_internal/Source/._NumberToString.h
libjson/_internal/Source/._internalJSONNode.cpp
libjson/_internal/Source/._internalJSONNode.h
libjson/_internal/Source/._libjson.cpp
libjson/_internal/Source/JSONAllocator.cpp
libjson/_internal/Source/JSONAllocator.h
libjson/_internal/Source/JSONChildren.cpp
libjson/_internal/Source/JSONChildren.h
libjson/_internal/Source/JSONDebug.cpp
libjson/_internal/Source/JSONDebug.h
libjson/_internal/Source/JSONDefs.h
libjson/_internal/Source/JSONDefs/._GNU_C.h
libjson/_internal/Source/JSONDefs/._Strings_Defs.h
libjson/_internal/Source/JSONDefs/._Unknown_C.h
libjson/_internal/Source/JSONDefs/._Visual_C.h
libjson/_internal/Source/JSONDefs/GNU_C.h
libjson/_internal/Source/JSONDefs/Strings_Defs.h
libjson/_internal/Source/JSONDefs/Unknown_C.h
libjson/_internal/Source/JSONDefs/Visual_C.h
libjson/_internal/Source/JSONGlobals.h
libjson/_internal/Source/JSONIterators.cpp
libjson/_internal/Source/JSONMemory.cpp
libjson/_internal/Source/JSONMemory.h
libjson/_internal/Source/JSONMemoryPool.h
libjson/_internal/Source/JSONNode.cpp
libjson/_internal/Source/JSONNode.h
libjson/_internal/Source/JSONNode_Mutex.cpp
libjson/_internal/Source/JSONPreparse.cpp
libjson/_internal/Source/JSONPreparse.h
libjson/_internal/Source/JSONSharedString.h
libjson/_internal/Source/JSONSingleton.h
libjson/_internal/Source/JSONStats.h
libjson/_internal/Source/JSONStream.cpp
libjson/_internal/Source/JSONStream.h
libjson/_internal/Source/JSONValidator.cpp
libjson/_internal/Source/JSONValidator.h
libjson/_internal/Source/JSONWorker.cpp
libjson/_internal/Source/JSONWorker.h
libjson/_internal/Source/JSONWriter.cpp
libjson/_internal/Source/JSON_Base64.h
libjson/_internal/Source/NumberToString.h
libjson/_internal/Source/internalJSONNode.cpp
libjson/_internal/Source/internalJSONNode.h
libjson/_internal/Source/libjson.cpp
libjson/_internal/TestSuite/All/main.cpp
libjson/_internal/TestSuite/Benchmark/main.cpp
libjson/_internal/TestSuite/RunTestSuite2.cpp
libjson/_internal/TestSuite/RunTestSuite2.h
libjson/_internal/TestSuite/StringTest.h
libjson/_internal/TestSuite/TestAssign.cpp
libjson/_internal/TestSuite/TestBinary.cpp
libjson/_internal/TestSuite/TestChildren.cpp
libjson/_internal/TestSuite/TestComments.cpp
libjson/_internal/TestSuite/TestConverters.cpp
libjson/_internal/TestSuite/TestCtors.cpp
libjson/_internal/TestSuite/TestEquality.cpp
libjson/_internal/TestSuite/TestFunctions.cpp
libjson/_internal/TestSuite/TestInequality.cpp
libjson/_internal/TestSuite/TestInspectors.cpp
libjson/_internal/TestSuite/TestIterators.cpp
libjson/_internal/TestSuite/TestMutex.cpp
libjson/_internal/TestSuite/TestNamespace.cpp
libjson/_internal/TestSuite/TestRefCounting.cpp
libjson/_internal/TestSuite/TestSharedString.cpp
libjson/_internal/TestSuite/TestStreams.cpp
libjson/_internal/TestSuite/TestString.cpp
libjson/_internal/TestSuite/TestSuite.cpp
libjson/_internal/TestSuite/TestSuite.h
libjson/_internal/TestSuite/TestValidator.cpp
libjson/_internal/TestSuite/TestWriter.cpp
libjson/_internal/TestSuite/UStringTest.h
libjson/_internal/TestSuite/UnitTest.cpp
libjson/_internal/TestSuite/UnitTest.h
libjson/_internal/TestSuite/main.cpp
libjson/_internal/TestSuite2/BaseTest.h
libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT.cpp
libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT.h
libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT_SAFE.cpp
libjson/_internal/TestSuite2/JSONDebug/JSON_ASSERT_SAFE.h
libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL.cpp
libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL.h
libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL_SAFE.cpp
libjson/_internal/TestSuite2/JSONDebug/JSON_FAIL_SAFE.h
libjson/_internal/TestSuite2/JSONGlobals/jsonSingleton.cpp
libjson/_internal/TestSuite2/JSONGlobals/jsonSingleton.h
libjson/_internal/TestSuite2/JSONValidator/Resources/validyMacros.h
libjson/_internal/TestSuite2/JSONValidator/isValidArray.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidArray.h
libjson/_internal/TestSuite2/JSONValidator/isValidMember.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidMember.h
libjson/_internal/TestSuite2/JSONValidator/isValidNamedObject.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidNamedObject.h
libjson/_internal/TestSuite2/JSONValidator/isValidNumber.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidNumber.h
libjson/_internal/TestSuite2/JSONValidator/isValidObject.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidObject.h
libjson/_internal/TestSuite2/JSONValidator/isValidPartialRoot.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidPartialRoot.h
libjson/_internal/TestSuite2/JSONValidator/isValidRoot.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidRoot.h
libjson/_internal/TestSuite2/JSONValidator/isValidString.cpp
libjson/_internal/TestSuite2/JSONValidator/isValidString.h
libjson/_internal/TestSuite2/JSONValidator/securityTest.cpp
libjson/_internal/TestSuite2/JSONValidator/securityTest.h
libjson/_internal/TestSuite2/JSON_Base64/json_decode64.cpp
libjson/_internal/TestSuite2/JSON_Base64/json_decode64.h
libjson/_internal/TestSuite2/JSON_Base64/json_encode64.cpp
libjson/_internal/TestSuite2/JSON_Base64/json_encode64.h
libjson/_internal/TestSuite2/NumberToString/_areFloatsEqual.cpp
libjson/_internal/TestSuite2/NumberToString/_areFloatsEqual.h
libjson/_internal/TestSuite2/NumberToString/_atof.cpp
libjson/_internal/TestSuite2/NumberToString/_atof.h
libjson/_internal/TestSuite2/NumberToString/_ftoa.cpp
libjson/_internal/TestSuite2/NumberToString/_ftoa.h
libjson/_internal/TestSuite2/NumberToString/_itoa.cpp
libjson/_internal/TestSuite2/NumberToString/_itoa.h
libjson/_internal/TestSuite2/NumberToString/_uitoa.cpp
libjson/_internal/TestSuite2/NumberToString/_uitoa.h
libjson/_internal/TestSuite2/NumberToString/getLenSize.cpp
libjson/_internal/TestSuite2/NumberToString/getLenSize.h
libjson/_internal/TestSuite2/NumberToString/isNumeric.cpp
libjson/_internal/TestSuite2/NumberToString/isNumeric.h
libjson/libjson.h
pageparser.hpp
test/libjson_baidu.cpp
testbaidu.cc
testjson.cc
../include/Node.h
../include/ParserSax.h
/usr/include/string.h
/usr/include/time.h
/usr/include/wchar.h
/usr/include/features.h
/usr/include/stdio.h
/usr/include/wctype.h
/usr/include/xlocale.h
/usr/include/endian.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/gconv.h
